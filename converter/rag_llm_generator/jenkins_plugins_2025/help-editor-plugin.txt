# Help Editor Plugin

Help editor plugin allows you to add additional custom help above default help on job configuration pages.

## Table of contents
1. [Quick Start](#quick-start)
2. [Current status](#current-status)
3. [Plugin Structure](#plugin-structure)

## Quick Start

After downloading help editor plugin you will need to make only few easy steps to create your custom help information:

1. Open job configuration page with all settings
2. Click blue question mark icon that would expand help information
3. Click 'Edit' button in the new field above custom help
4. Enter your information (text supports HTML markup)
5. Click save button

Then you will be able to see your custom information, each time you open your help.

You can see this process illustrated on the GIF below:

![Demonstrating GIF](https://files.gitter.im/samatdav/qmMA/Demo.gif)

## Current status

Currently the plugin is a work in progress. The plugin is fully functional, builds successfully, and passess all tests. 

However, there are still several comments on code improvements.

You can see the the work progress in the pull request to /jenkinsci/help-editor-plugin:

https://github.com/jenkinsci/help-editor-plugin/pull/1


## Plugin Structure

On startup of a Jenkins instanse the plugin downloads all custom help information and stores them in chache.

On click of a blue question mark icon the plugin checks if there is a custom help related to the clicked field.

If the the custom help found it is presented to user. Otherwise, a user sees a blank field.

When a user clicks 'Save' button, the new files is created with the information entered in the text box.

The plugin stores files in 'helpmanager' directory, located in JENKINS_HOME.

The files can be modified directly in file management system. However, for changes to appear, the Jenkins instance must be restarted.

On the image below you can see the main structure of the plugin.

After a click of a blue question mark icon, or an 'save' button the plugin sends AJAX requests just as hudson-behaviour does in Jenkins core.

AJAX request then connect to plugin's root action with correspoding functions.

Finally, then the root action accesses the help file by ID and either returns it to JavaScript and then to user, or updates it.

![Help manager plugin structure](https://www.gliffy.com/go/publish/image/10922741/L.png)

