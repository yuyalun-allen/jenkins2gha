:tip-caption: :bulb:

= Prism Jenkins Plugin

image:https://ci.jenkins.io/job/Plugins/job/prism-api-plugin/job/main/badge/icon?subject=Jenkins%20CI[Jenkins, link=https://ci.jenkins.io/job/Plugins/job/prism-api-plugin/job/main/]
image:https://github.com/jenkinsci/prism-api-plugin/workflows/GitHub%20CI/badge.svg[GitHub Actions, link=https://github.com/jenkinsci/prism-api-plugin/actions]
image:https://img.shields.io/github/issues-pr/jenkinsci/prism-api-plugin.svg[GitHub pull requests, link=https://github.com/jenkinsci/prism-api-plugin/pulls]

Provides https://prismjs.com/[Prism] for Jenkins Plugins. Prism is a lightweight, extensible syntax highlighter,
built with modern web standards in mind. Itâ€™s used in millions of websites, including some of those you
visit daily.

Additionally, this plugin provides:

* A global theme configuration that will be used by all source code views:

[#img-theme-selection]
image::images/themes.png[Themes selection]

* Support for Jenkins dark theme:

[#img-dark-theme]
image::images/dark-theme.png[Dark Prism theme in Jenkins]

* A default source code rendering view (see `SourceCodeViewModel`) that can be used in a Jenkins plugin to show the
source code in a separate page. This page renders the source code with the configured theme.

[#img-marker]
image::images/syntax-highlighting-marker.png[Grid layout in Jenkins]

* A configuration of permitted source code directories on agents. So Jenkins will not show
sensitive files by accident.

[#img-source-directories]
image::images/source-directories.png[Grid layout in Jenkins]


== How to use the plugin

In order to use this JS library, add a maven dependency to your pom:

[source,xml]
----
<dependency>
  <groupId>io.jenkins.plugins</groupId>
  <artifactId>prism-api</artifactId>
  <version>[latest version]</version>
</dependency>
----

Then you can use Prism in your jelly files using the following snippet:

[source,xml]
----
<j:jelly xmlns:j="jelly:core" xmlns:p="/prism">
  <p:prism configuration="${it.prismConfiguration}"/>
</j:jelly>
----

In your descriptor you will need to add a `getPrismConfiguration()` method:

[source,java]
----
public PrismConfiguration getPrismConfiguration() {
    return PrismConfiguration.getInstance();
}
----

== Examples

For source code rendering look into the
https://github.com/jenkinsci/warnings-ng-plugin[warnings plugin] that
uses the `SourceCodeViewModel` to render the source code with the selected warning.

For general prism API integration see https://github.com/jenkinsci/design-library-plugin/pull/72[design-library-plugin PR#72].

