[
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': \"archiveArtifacts artifacts: '$WORKSPACE/*'\", 'followSymlinks': 'false', 'onlyIfSuccessful': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'discordSend', 'raw_args': {'description': None, 'enableArtifactsList': 'true', 'footer': None, 'image': None, 'link': 'env.BUILD_URL', 'result': 'SUCCESS', 'scmWebUrl': None, 'thumbnail': None, 'title': 'Project1', 'webhookURL': 'https://discord.com/api/webhooks/994018555341307966/V-Or2AnFnDNpfHa7slRrl2S0rhdybzYSnDNzKHVHgnKxJHCWG8iXWVQAPNjsa8hvHJ_q'}}",
    "rank_1_name": "<div align=\"center\">",
    "rank_1_content": "<div align=\"center\">\n  <a href=\"https://dagshub.com\"><img src=\"https://raw.githubusercontent.com/DAGsHub/client/master/dagshub_github.png\" width=600 alt=\"\"/></a><br><br>\n</div>\n\n[![Discord](https://img.shields.io/discord/698874030052212737)](https://discord.com/invite/9gU36Y6)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://img.shields.io/github/checks-status/jenkinsci/dagshub-branch-source-plugin/master)](https://ci.jenkins.io/job/Plugins/job/dagshub-branch-source-plugin/)\n<a href=\"https://twitter.com/TheRealDAGsHub\" title=\"DAGsHub on Twitter\"><img src=\"https://img.shields.io/twitter/follow/TheRealDAGsHub.svg?style=social\"></a>\n\n# DAGsHub Branch Source Jenkins Plugin\n\nUse <a href=\"https://dagshub.com\">DAGsHub</a> repositories as sources for\n<a href=\"https://www.jenkins.io/doc/book/pipeline/multibranch/\">Jenkins Multibranch Workflow projects</a>.\n\nAfter installing the plugin, when you create or edit a Jenkins multibranch project, you can select a \nDAGsHub repo as a branch source, which means you can trigger automatic builds for any git branch, tag \nor pull request in your repo, if they have an existing \n[Jenkinsfile](jenkins.io/doc/book/pipeline/jenkinsfile/).\n\n## Installation\nInstall from Jenkins Update Center. Go to Jenkins > Configure > Manage Plugins > Available and search for DAGsHub branch source plugin then select Install.\n\n## Release notes\n[See the Github releases](https://github.com/jenkinsci/dagshub-branch-source-plugin/releases) for release notes.\n\n---\n\nMade with üê∂ by [DAGsHub](https://dagshub.com/). \n (Distance: 1.2536)",
    "rank_1_distance": 1.2536,
    "rank_2_name": "# Discord Notifier",
    "rank_2_content": "# Discord Notifier\n\nDiscord Notifier provides a bridge between Jenkins and Discord through the built-in webhook functionality.\n\n## The purpose\n\nThe Jenkins Discord Webhook plugin was made to share results of a build to a Discord channel using the webhooks that Discord provides. \n\nThrough this plugin you are able to:\n - [x] Get success and fail messages about your build\n - [x] Link to build artifacts\n - [x] List SCM changes to the build\n - [x] Only send notifications on state change\n\n## Download\n\nDiscord notifier is available in official jenkins repos.\n\n## Usage\n\nThis plugin uses the post-build feature to execute a request.\n\nAfter installing, go to your job's configure section and add the *Discord Notifier* item. Then proceed to enter your webhook URL.\n\n![Post-build dropdown with Discord Webhooks selected](.github/usage_01.jpg)\n\nThere are a few options you can choose from:\n - Webhook URL\n   - The URL of the webhook (pretty self-explanatory) provided by Discord\n - Send only on state change\n   - Checking this will only send the message when the state of the current build differs from the previous\n - Send only failed\n   - checking this will only send the failed job.  \n - Advanced:\n   - thumbnail\n     - If set, the image under the URL shows up on the right side of Discord message.\n   - Enable URL linking\n     - Enables the title, build summary and build id to be linked to the build. Requires the URL to be set in Jenkins' global configuration\n   - Enable artifact list\n     - Enables the listing of the artifacts generated by the build\n   - Enable version info in footer\n     - Adds the \"Jenkins version, Discord Webhook version\" text in the footer of the message\n\n![Standard options in the Discord Webhook config](.github/usage_02.jpg)\n![Advanced tab in the config](.github/usage_03.jpg)\n\n## Pipeline\n\nDiscord Notifier supports Jenkins Pipeline. The only required parameter is webhookURL (the URL of the webhook, of course) - but there isn't much point of sending nothing.\n\n### Parameters\n\n- webhookURL (required)\n\t- The URL of the webhook (pretty self-explanatory) provided by Discord.\n- title\n\t- The title of the embed.\n- link\n\t- If set, the title becomes a link to this URL.\n- thumbnail\n    - If set, the image under the URL shows up on the right side of Discord message.\n- image\n    - If set, the image under the URL shows up under discord message\n- description\n\t- The description of the message (the main chunk of text), can be markdown formatted, [Markdown Text 101 (Chat Formatting: Bold, Italic, Underline)](https://support.discordapp.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline-).\n- footer\n\t- The text in footer of the message.\n- result\n    - Sets the left side colour of the embed (SUCCESS - green, UNSTABLE - yellow, FAILURE - red, ABORTED - grey).\n\n### Example\n\n```groovy\ndiscordSend description: \"Jenkins Pipeline Build\", footer: \"Footer Text\", link: env.BUILD_URL, result: currentBuild.currentResult, title: env.JOB_NAME, webhookURL: \"Webhook URL\"\n``` \n (Distance: 1.3659)",
    "rank_2_distance": 1.3659,
    "rank_3_name": "# [@memkins](https://twitter.com/memkins) account on Twitter.",
    "rank_3_content": "# [@memkins](https://twitter.com/memkins) account on Twitter.\n\nThe goal of this channel is to repost funny memes and comics about Jenkins, while delivering best practices to end users.\nAlthough this channel will include more sarcasm and self-criticism than the official channel, the plan is to keep it overall positive w.r.t Jenkins.\nIt will also remain within the [Jenkins Code of Conduct](jenkins.io/conduct) boundaries.\n\n## Contributing\n\nThe repository uses the [Twitter Together](https://github.com/gr2m/twitter-together) project to automate tweets as code.\nTo contribute a tweet, just submit a pull request!\n\n## License\n\nAll code in this repository is licensed under the MIT License.\nAll content (Tweet texts, images, etc.) is licensed under the [Creative Commons Attribution-ShareAlike 3.0 Unported License](https://creativecommons.org/licenses/by-sa/3.0/). \n (Distance: 1.4108)",
    "rank_3_distance": 1.4108
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh 'python -m pip install --upgrade pip'\\n                    sh 'pip install -r requirements.txt'\\n                    sh 'pytest'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'echo \"Deploying to production...\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.result = \"FAILED\"\\n                step([\\n                    $class: \\'Mailer\\',\\n                    notifyEveryUnstableBuild: true,\\n                    recipients: \\'govuk-ci-notifications@digital.cabinet-office.gov.uk\\',\\n                    sendToIndividuals: true\\n                ])'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.checkoutFromGitHubWithSSH(env.REPOSITORY)'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.bundleApp()'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.pushTag(env.REPOSITORY, env.BRANCH_NAME, \"release_${env.BUILD_NUMBER}\")'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        rubyLintDiff: false,\\n                        skipDeployToIntegration: true\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        sassLint: false,\\n                        skipDeployToIntegration: true\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        skipDeployToIntegration: true,\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(skipDeployToIntegration: true)'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        sassLint: false,\\n                        skipDeployToIntegration: true,\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        skipDeployToIntegration: true,\\n                        rubyLintDiff: false,\\n                        overrideTestTask: {\\n                            stage(\"Run tests\") {\\n                                sh \"make test\"\\n                            }\\n                        }\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(skipDeployToIntegration: true)'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"govuk.buildProject(\\n                        sassLint: false,\\n                        afterTest: {\\n                            stage('Check documentation') {\\n                                sh 'bundle exec rake explain_yourself'\\n                            }\\n                        }\\n                    )\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.buildProject(\\n                        skipDeployToIntegration: true\\n                    )'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': 'color: \\'#30A452\\', message: \"SUCCESS: <${env.BUILD_URL}|${env.JOB_NAME}#${env.BUILD_NUMBER}>\"'}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': 'color: \\'#D41519\\', message: \"FAILED: <${env.BUILD_URL}|${env.JOB_NAME}#${env.BUILD_NUMBER}>\"'}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': 'color: \\'#DD9F3D\\', message: \"UNSTABLE: <${env.BUILD_URL}|${env.JOB_NAME}#${env.BUILD_NUMBER}>\"'}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[\\n                    usernamePassword(\\n                        credentialsId: 'git_credentials',\\n                        usernameVariable: 'username',\\n                        passwordVariable: 'password'\\n                    )\\n                ]\", 'raw_block': 'script {\\n                        version = sh(returnStdout: true, script: \"python setup.py --version\").trim()\\n                        sh \"\"\"\\n                            git tag $version\\n                            git push https://$username:$password@github.com/pureport/pureport-ansible-modules $version\\n                        \"\"\"\\n                    }'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'slackBuildFailure', 'raw_args': \"'TestUnit'\"}",
    "rank_1_name": "# GlobalSlackNotifierPlugin",
    "rank_1_content": "# GlobalSlackNotifierPlugin\n\n# Setup\n1. Setup [Slack Plugin](https://github.com/jenkinsci/slack-plugin)\n2. Setup Global Slack Messages in Global Configuration\n\n# Global Slack Messages\n1. Set XXXMessage\n2. Check notify on build XXX\n3. Set channel notifying, if necessary.(default is Slack Plugin's Channel)\n\n* XXX is build result\n\n![image](img/globalslackmessage.png) \n (Distance: 0.8746)",
    "rank_1_distance": 0.8746,
    "rank_2_name": "# Slack plugin for Jenkins",
    "rank_2_content": "# Slack plugin for Jenkins\n\n[![Build Status][jenkins-status]][jenkins-builds]\n[![Jenkins Plugin][plugin-version-badge]][plugin]\n[![GitHub release][github-release-badge]][github-release]\n[![Jenkins Plugin Installs][plugin-install-badge]][plugin]\n\nProvides Jenkins notification integration with Slack or Slack compatible\napplications like [RocketChat][rocketchat] and [Mattermost][mattermost].\n\n## Install Instructions for Slack\n\n1. Get a Slack account: <https://slack.com/>\n2. Install this plugin on your Jenkins server:\n\n    1.  From the Jenkins homepage navigate to `Manage Jenkins`\n    2.  Navigate to `Manage Plugins`,\n    3.  Change the tab to `Available`,\n    4.  Search for `slack`,\n    5.  Check the box next to install.\n\n![image][img-plugin-manager]\n\n3. Continue to the next section to create your Slack app.\n\n### Creating your app\n\n1. Go to <https://api.slack.com/apps> and click \"Create New App\".\n2. Click `From an app manifest`\n3. Select your workspace\n4. Delete the example manifest that Slack provides\n5. Click YAML\n6. Paste the following into the text box:\n\n```yaml\ndisplay_information:\n  name: Jenkins\nfeatures:\n  bot_user:\n    display_name: Jenkins\n    always_online: true\noauth_config:\n  scopes:\n    bot:\n      - channels:read\n      - chat:write\n      - chat:write.customize\n      - files:write\n      - reactions:write\n      - users:read\n      - users:read.email\n      - groups:read\nsettings:\n  org_deploy_enabled: false\n  socket_mode_enabled: false\n  token_rotation_enabled: false\n```\n\n7. Click \"Next\"\n8. Click \"Create\"\n9. Click \"Install App to Workspace\"\n10. Click \"Allow\"\n11. Click \"OAuth & Permissions\" in the sidebar\n9.  Copy the \"Bot User OAuth Access Token\"\n10. *On Jenkins*: Find the Slack configuration in \"Manage Jenkins ‚Üí System\".\n    1.  *On Jenkins*: Click \"Add\" to create a new \"Secret text\" Credential with the bot user token.\n    2.  *On Jenkins*: Select the new \"Secret text\" in the dropdown.\n    3.  *On Jenkins*: Add a default channel (this can be removed after validating the connection works).\n    4.  *On Jenkins*: Tick the \"Custom slack app bot user\" option.\n11. Invite the Jenkins bot user into the Slack channel(s) you wish to be notified in.\n12. *On Jenkins*: Click test connection. A message will be sent to the default channel / default member.\n\n### Notify for all jobs\n\nIf you want to configure a notification to be sent to Slack for **all jobs**, you may want to also consider installing an additional plugin called [Global Slack Notifier plugin](https://plugins.jenkins.io/global-slack-notifier).\n\n### Pipeline job\n\n    slackSend color: \"good\", message: \"Message from Jenkins Pipeline\"\n\nAdditionally you can pass attachments or blocks (requires [bot user](#bot-user-mode)) in order to send complex\nmessages, for example:\n\nAttachments:\n\n```groovy\ndef attachments = [\n  [\n    text: 'I find your lack of faith disturbing!',\n    fallback: 'Hey, Vader seems to be mad at you.',\n    color: '#ff0000'\n  ]\n]\n\nslackSend(channel: \"#general\", attachments: attachments)\n```\n\nBlocks (this feature requires a '[bot user](#bot-user-mode)' and a custom slack app):\n\n```groovy\nblocks = [\n\t[\n\t\t\"type\": \"section\",\n\t\t\"text\": [\n\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\"text\": \"Hello, Assistant to the Regional Manager Dwight! *Michael Scott* wants to know where you'd like to take the Paper Company investors to dinner tonight.\\n\\n *Please select a restaurant:*\"\n\t\t]\n\t],\n    [\n\t\t\"type\": \"divider\"\n\t],\n\t[\n\t\t\"type\": \"section\",\n\t\t\"text\": [\n\t\t\t\"type\": \"mrkdwn\",\n\t\t\t\"text\": \"*Farmhouse Thai Cuisine*\\n:star::star::star::star: 1528 reviews\\n They do have some vegan options, like the roti and curry, plus they have a ton of salad stuff and noodles can be ordered without meat!! They have something for everyone here\"\n\t\t],\n\t\t\"accessory\": [\n\t\t\t\"type\": \"image\",\n\t\t\t\"image_url\": \"https://s3-media3.fl.yelpcdn.com/bphoto/c7ed05m9lC2EmA3Aruue7A/o.jpg\",\n\t\t\t\"alt_text\": \"alt text for image\"\n\t\t]\n\t]\n]\n\nslackSend(channel: \"#general\", blocks: blocks)\n```\n\nFor more information about slack messages see [Slack Messages Api](https://api.slack.com/docs/messages), [Slack attachments Api](https://api.slack.com/docs/message-attachments) and [Block kit](https://api.slack.com/block-kit)\n\nNote: the attachments API is classified as legacy, with blocks as the replacement (but blocks are only supported when using a bot user through a custom slack app).\n\n#### File upload\n\nYou can upload files to slack with this plugin:\n\n```groovy\nnode {\n  sh \"echo hey > blah.txt\"\n  slackUploadFile filePath: \"*.txt\", initialComment:  \"HEY HEY\"\n}\n```\n\nThis feature requires [botUser](#bot-user-mode) mode.\n\n##### File upload to a user channel\n\nYou can upload files to a user channel by messaging the user first and then using the channel ID from the message response:\n\n```groovy\nnode {\n  sh \"echo hey > blah.txt\"\n  def slackResponse = slackSend channel: '$userId', message: 'Hey', sendAsText: true\n  slackUploadFile filePath: \"*.txt\", channel: slackResponse.channelId\n}\n```\n\n#### Threads Support\n\nYou can send a message and create a thread on that message using the pipeline step.\nThe step returns an object which you can use to retrieve the thread ID. Send new messages with that thread ID as the\ntarget channel to create a thread. All messages of a thread should use the same thread ID.\n\nExample:\n\n```groovy\ndef slackResponse = slackSend(channel: \"cool-threads\", message: \"Here is the primary message\")\nslackSend(channel: slackResponse.threadId, message: \"Thread reply #1\")\nslackSend(channel: slackResponse.threadId, message: \"Thread reply #2\")\n```\n\nThis feature requires [botUser](#bot-user-mode) mode.\n\nMessages that are posted to a thread can also optionally be broadcasted to the\nchannel. Set `replyBroadcast: true` to do so. For example:\n\n```groovy\ndef slackResponse = slackSend(channel: \"ci\", message: \"Started build\")\nslackSend(channel: slackResponse.threadId, message: \"Build still in progress\")\nslackSend(\n    channel: slackResponse.threadId,\n    replyBroadcast: true,\n    message: \"Build failed. Broadcast to channel for better visibility.\"\n)\n```\n\nIf you wish to upload a file to a thread, you can do so by specifying the channel, and the timestamp \nof the thread you want to add the file to, separated by a colon. For example:\n\n```groovy\ndef slackResponse = slackSend(channel: \"cool-threads\", message: \"Here is the primary message\")\nsh \"echo hey > blah.txt\"\nslackUploadFile(channel: \"cool-threads:\" + slackResponse.ts, filePath: \"*.txt\", initialComment:  \"A file, inside a thread.\")\n```\n\n#### Update Messages\n\nYou can update the content of a previously sent message using the pipeline step.\nThe step returns an object which you can use to retrieve the timestamp and channelId\nNOTE: The slack API requires the channel ID for `chat.update` calls.\n\nExample:\n\n```groovy\ndef slackResponse = slackSend(channel: \"updating-stuff\", message: \"Here is the primary message\")\nslackSend(channel: slackResponse.channelId, message: \"Update message now\", timestamp: slackResponse.ts)\n```\n\nThis feature requires [botUser](#bot-user-mode) mode.\n\n#### Emoji Reactions\n\nAdd an emoji reaction to a previously-sent message like this:\n\nExample:\n\n```groovy\ndef slackResponse = slackSend(channel: \"emoji-demo\", message: \"Here is the primary message\")\nslackResponse.addReaction(\"thumbsup\")\n```\n\n![image][img-emoji-reaction]\n\nYou can remove an emoji reaction to a previously-sent message like this:\n\nExample:\n\n```groovy\ndef slackResponse = slackSend(channel: \"emoji-demo\", message: \"Here is the primary message\")\nslackResponse.addReaction(\"thumbsup\")\n// ... do some stuff\nslackResponse.removeReaction(\"thumbsup\")\n```\n\nThis may only work reliably in channels (as opposed to private messages) due to [limitations in the Slack API](https://api.slack.com/methods/chat.postMessage) (See \"Post to an IM channel\").\n\nThis does not currently work in a situation where Jenkins is restarted between sending the initial message and adding the reaction. If this is something you need, please file an issue.\n\nThis feature requires [botUser](#bot-user-mode) mode and the `reactions:write` API scope.\n\n#### Unfurling Links\n\nYou can allow link unfurling if you send the message as text. This only works in a text message, as attachments cannot be unfurled.\n\nExample:\n\n```groovy\nslackSend(channel: \"news-update\", message: \"https://www.nytimes.com\", sendAsText: true)\n```\n\n#### User Id Look Up\n\nThere are two pipeline steps available to help with user id look up.\n\nA user id can be resolved from a user's email address with the `slackUserIdFromEmail` step.\n\nExample:\n\n```groovy\ndef userId = slackUserIdFromEmail('spengler@ghostbusters.example.com')\nslackSend(color: \"good\", message: \"<@$userId> Message from Jenkins Pipeline\")\n```\n\nA list of user ids can be resolved against the set of changeset commit authors with the `slackUserIdsFromCommitters` step.\n\nExample:\n\n```groovy\ndef userIds = slackUserIdsFromCommitters()\ndef userIdsString = userIds.collect { \"<@$it>\" }.join(' ')\nslackSend(color: \"good\", message: \"$userIdsString Message from Jenkins Pipeline\")\n```\n\nThis feature requires [botUser](#bot-user-mode) mode and the `users:read` and `users:read.email` API scopes.\n\n#### Colors\n\n_Warning: This functionality is not supported if you are using the `blocks` layout mode_\n\nAny hex triplet (i.e. `'#AA1100'`) can be used for the color of the message. There are also three builtin color options:\n\n| Name      | Color  |\n| --------- | ------ |\n| `good`    | green  |\n| `warning` | yellow |\n| `danger`  | red    |\n\n### Freestyle job\n\n1.  Configure it in your Jenkins job (and optionally as global configuration) and\n    **add it as a Post-build action**.\n\n## Security\n\nUse Jenkins Credentials and a credential ID to configure the Slack integration\ntoken. It is a security risk to expose your integration token using the previous\n_Integration Token_ setting.\n\nCreate a new **_Secret text_** credential:\n\n![image][img-secret-text]\n\nSelect that credential as the value for the **_Credential_** field:\n\n![image][img-token-credential]\n\n## Direct Message\n\nYou can send messages to channels or you can notify individual users via their\nslackbot.  In order to notify an individual user, use the syntax `@user_id` in\nplace of the project channel.  Mentioning users by display name may work, but it\nis not unique and will not work if it is an ambiguous match.\n\n## User Mentions\n\nUse the syntax `<@user_id>` in a message to mention users directly. See [User Id Look Up](#user-id-look-up) for pipeline steps to help with user id look up.\n\n## Configuration as code\n\nThis plugin supports configuration as code\nAdd to your yaml file:\n\n```yaml\ncredentials:\n  system:\n    domainCredentials:\n      - credentials:\n          - string:\n              scope: GLOBAL\n              id: slack-token\n              secret: '${SLACK_TOKEN}'\n              description: Slack token\n\n\nunclassified:\n  slackNotifier:\n    teamDomain: <your-slack-workspace-name> # i.e. your-company (just the workspace name not the full url)\n    tokenCredentialId: slack-token\n    botUser: true\n```\n\nFor more details see the configuration as code plugin documentation:\n<https://github.com/jenkinsci/configuration-as-code-plugin#getting-started>\n\n## Troubleshooting connection failure\n\nWhen testing the connection, you may see errors like:\n\n```text\n    WARNING j.p.slack.StandardSlackService#publish: Response Code: 404\n```\n\nThere's a couple of things to try:\n\n### Have you enabled bot user mode?\n\nIf you've ticked `Custom slack app bot user` then try unticking it, that mode is for when you've created a custom app and installed it to your workspace instead of the default Jenkins app made by Slack\n\n### Have you set the override URL?\n\nIf you've entered something into `Override url` then try clearing it out, that field is only needed for slack compatible apps like mattermost.\n\n### Enable additional logging\n\nAdd a [log recorder](https://support.cloudbees.com/hc/en-us/articles/204880580-How-do-I-create-a-logger-in-Jenkins-for-troubleshooting-and-diagnostic-information-) for the [StandardSlackService](https://github.com/jenkinsci/slack-plugin/blob/master/src/main/java/jenkins/plugins/slack/StandardSlackService.java) class this should give you additional details on what's going on.\n\nIf you still can't figure it out please raise an issue with as much information as possible about your config and any relevant logs.\n\n## Developer instructions\n\nInstall Maven and JDK.\n\n```shell\n$ mvn -version | grep -v home\nApache Maven 3.3.9 (bb52d8502b132ec0a5a3f4c09453c07478323dc5; 2015-11-10T08:41:47-08:00)\nJava version: 1.7.0_79, vendor: Oracle Corporation\nDefault locale: en_US, platform encoding: UTF-8\nOS name: \"linux\", version: \"4.4.0-65-generic\", arch: \"amd64\", family: \"unix\"\n```\n\nRun unit tests\n\n```shell\nmvn test\n```\n\nCreate an HPI file to install in Jenkins (HPI file will be in\n`target/slack.hpi`).\n\n```shell\nmvn clean package\n```\n\n[jenkins-builds]: https://ci.jenkins.io/job/Plugins/job/slack-plugin/job/master/\n\n[jenkins-status]: https://ci.jenkins.io/buildStatus/icon?job=Plugins/slack-plugin/master\n\n[slack-badge]: https://jenkins-slack-testing-signup.herokuapp.com/badge.svg\n\n[slack-signup]: https://jenkins-slack-testing-signup.herokuapp.com/\n\n[plugin-version-badge]: https://img.shields.io/jenkins/plugin/v/slack.svg\n\n[plugin-install-badge]: https://img.shields.io/jenkins/plugin/i/slack.svg?color=blue\n\n[plugin]: https://plugins.jenkins.io/slack\n\n[github-release-badge]: https://img.shields.io/github/release/jenkinsci/slack-plugin.svg?label=release\n\n[github-release]: https://github.com/jenkinsci/slack-plugin/releases/latest\n\n[rocketchat]: https://rocket.chat/\n\n[mattermost]: https://about.mattermost.com/\n\n[img-emoji-reaction]: /docs/emoji-reaction.png\n\n[img-secret-text]: https://cloud.githubusercontent.com/assets/983526/17971588/6c26dfa0-6aa9-11e6-808c-3e139446e013.png\n\n[img-token-credential]: /docs/global-config.png\n\n[img-plugin-manager]: /docs/plugin-manager-search.png \n (Distance: 0.8904)",
    "rank_2_distance": 0.8904,
    "rank_3_name": "# Jianliao plugin for Jenkins",
    "rank_3_content": "# Jianliao plugin for Jenkins\n\nStarted with a fork of the slack plugin:\n\nhttps://github.com/jenkinsci/slack-plugin\n\nWhich was, in turn, a fork of the Campfire plugin.\n\n# Jenkins Instructions\n\n1. Get a Jianliao(Talk) account: https://talk.ai/\n2. Configure the Jenkins integration\n3. Install this plugin on your Jenkins server \n (Distance: 1.0313)",
    "rank_3_distance": 1.0313
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'bat', 'raw_args': 'ren test_suite INW_OMP.org'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'INW_OMP.org/*.out', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'bat', 'raw_args': 'ren test_suite INW_OMP.org'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'INW_OMP.org/*.out', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'bat', 'raw_args': '\\'\\'\\n                                    call build\\\\\\\\setupenv.ifort_vc.SAYRE.bat\\n                                    set _MSPDBSRV_ENDPOINT_=%RANDOM%\\n                                    echo %_MSPDBSRV_ENDPOINT_%\\n                                    start mspdbsrv -start -spawn -shutdowntime 90000\\n                                    set\\n                                    cd build\\n                                    call make_w32.bat\\n                                    mspdbsrv -stop\\n                                    echo \"Build step complete\"\\n                                \\'\\''}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'name': 'bat', 'raw_args': '\\'\\'\\n                                    for /f \"tokens=1* delims==\" %%a in (\\'set\\') do (\\n                                      if /i NOT \"%%a\"==\"PATH\" set %%a=\\n                                    )\\n                                    set CRYSDIR=.\\\\\\\\,..\\\\\\\\build\\\\\\\\\\n                                    set COMPCODE=INW_OMP\\n                                    set CROPENMP=TRUE\\n                                    set CR64BIT=TRUE\\n                                    set MKL_DYNAMIC=FALSE\\n                                    set MKL_NUM_THREADS=1\\n                                    set MKL_THREADING_LAYER=SEQUENTIAL\\n                                    set OMP_DYNAMIC=FALSE\\n                                    set OMP_NUM_THREADS=1\\n                                    set MKL_CBWR=COMPATIBLE\\n                                    call build\\\\\\\\setupenv.ifort_vc.SAYRE.bat\\n                                    cd test_suite\\n                                    mkdir script\\n                                    echo \"%SCRIPT NONE\" > script\\\\\\\\tipauto.scp\\n                                    echo \"%END SCRIPT\" >> script\\\\\\\\tipauto.scp\\n                                    del crfilev2.dsc\\n                                    echo \\'Here are the env variables\\'\\n                                    set\\n                                    perl testsuite.pl\\n                                \\'\\''}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'name': 'bat', 'raw_args': \"''\\n                    call build\\\\\\\\setupenv.ifort_vc.SAYRE.bat\\n                    cd build\\n                    call make_w32.bat dist\\n                    xcopy /s /y ..\\\\\\\\debuginfo c:\\\\\\\\omp17-x64\\\\\\\\\\n                ''\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'installer/*.exe', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'ftpPublisher', 'raw_args': {'alwaysPublishFromMaster': 'false', 'masterNodeName': 'master', 'continueOnError': 'false', 'failOnError': 'false'}}",
    "rank_1_name": "# Rich Text Publisher Plugin",
    "rank_1_content": "# Rich Text Publisher Plugin\n\n\n\nNow featuring pipeline plugin support\n\n\n\nA plugin adds a configurable post-build step which publishes arbitrary rich text at the Project and Build pages.\n\nThe following markup languages are supported: HTML, WikiText, Confluence. Build parameters or whole files from workspace may be embedded into text.\n\n\n\nCopyright (c) 2013 Dmitry Korotkov. See LICENSE for further details. \n (Distance: 1.2986)",
    "rank_1_distance": 1.2986,
    "rank_2_name": "Moved to Github.",
    "rank_2_content": "Moved to Github. \n (Distance: 1.3299)",
    "rank_2_distance": 1.3299,
    "rank_3_name": "# Publish Over FTP Plugin for Jenkins",
    "rank_3_content": "# Publish Over FTP Plugin for Jenkins\n\nSend build artifacts over FTP.\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/publish-over-ftp.svg)](https://plugins.jenkins.io/publish-over-ftp)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/publish-over-ftp.svg?color=blue)](https://plugins.jenkins.io/publish-over-ftp)\n\n## Publish Over Plugin\n\n<!-- TODO: Update link once the Publish Over documentation is moved to GitHub -->\n\nPlease read [Publish Over Plugin](https://wiki.jenkins.io/display/JENKINS/Publish+Over) documentation first.\nCommon configuration options will not be repeated here.\n\n\n## Features\n\n-   Send files to FTP servers\n-   The plugin is \"promotion aware\" see\n    [Promotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n-   Publish to multiple servers in the \"Post-build Actions\"\n-   Transfer complete directory structures, partial structures or just\n    files\n-   Option to delete all files in the remote directory before publishing\n-   Use passive (PASV) or active (PORT) transfers\n-   FTP can be used as a build step during the build process\n-   Passwords are encrypted in the configuration files and in the UI\n\n## Configure\n\n#### Create host configurations in the main Jenkins configuration\n\nFrom the Jenkins home page, click \"Manage Jenkins\" and the click on\n\"Configure System\"\n\nFind the FTP section (as below) and click on the \"Add\" button next to\n\"FTP Servers\"  \n![](docs/images/ftp_global_unconfigured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_global_configured.PNG)\n\nFill in Name, Hostname, Username, Password and Remote Directory. [see\nPublish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n##### Advanced\n\nIf you click the \"Advanced...\" button for a configuration, then you will\nmake more configuration options available (see below)  \n![](docs/images/ftp_global_advanced.PNG)\n\n[see Publish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n###### Use active data mode\n\nBy default passive mode will be used to connect to the FTP Server.  \nIn passive mode the client initiates all connections which will allow\nthe client to send files through a firewall that has been configured to\nrefuse all inbound connections (and does not create dynamic rules).  \nIf you want to dissable passive mode, and have the client use PORT\ncommands for the server to connect to the client to retieve the files,\nthen you can check this box.\n\n###### Don't make nested dirs\n\nDo not try to create nested directories with a single MKD command  \nThe default behaviour when creating directories is to try to create the\ntarget directory with single command, even if it is nested. If this\nfails, the plugin will fall back to creating each directory\nindividually. Some FTP servers, when asked to create nested directories\nwill respond with a success code, but will not create the directories\ncorrectly. This will result in directories being created in incorrect\nbranches of the directory tree.  \nThis option will not prevent the creation of nested directories, it is\njust a fix for badly behaved FTP servers.\n\n##### Click \"Test Configuration\".\n\n##### Add more server configurations (if required)\n\n##### Save\n\n#### Configure a job to Publish Over FTP\n\nOpen a jobs main page and then click \"Configure\" from the left hand\nmenu.\n\nFind the \"Send build artifacts over FTP\" checkbox in the \"Post-build\nActions\" section (as below) and click in the box.  \n![](docs/images/ftp_publish_not_configured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_configure.png)\n\n[see Publish Over ... for common options for\nServer](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-server)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\nSource files\n\nThe build will fail if you do not select any Source files to transfer\n\n##### Advanced (Transfer Sets)\n\nIf you click the \"Advanced...\" button for a Transfer Set, then you will\nmake more configuration options available (see below)\n\n![](docs/images/screenshot18.png)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\n###### ASCII mode\n\nTransfer the files using ASCII mode.  \nThis means that during the transfer, new lines and carriage returns will\nbe converted from the format used on the client operating system to the\nformat used on the servers operating system.  \nDo not use this option if your Source files pattern will match any\nbinary files, as there is a good chance that binary files will be\ncorrupted during transfer.\n\n###### Clean remote\n\nDelete all files and directories from the remote directory before\nuploading the new files.\n\n##### Advanced (Publisher)\n\nIf you click the \"Advanced...\" button that is immediately below the \"Add\nServer\" button, then you will make more configuration options available\n(see below)  \n![](docs/images/ftp_publish_publisher_advanced.PNG)\n\n[see Publish Over ... for common options for\nPublisher](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-publisher)\n\n#### Options to override the default Promotion behaviour\n\nIf you are configuring an action in a promotion, new options will become\navailable.  \n![](docs/images/ftp_promotion.PNG)\n\n[see Publish Over ... for common options for\nPromotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n\n## Release Notes\n\nSee the [changelog](./CHANGELOG.md). \n (Distance: 1.3612)",
    "rank_3_distance": 1.3612
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': \"archiveArtifacts artifacts: '$WORKSPACE/*'\", 'followSymlinks': 'false', 'onlyIfSuccessful': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'discordSend', 'raw_args': {'description': None, 'enableArtifactsList': 'true', 'footer': None, 'image': None, 'link': 'env.BUILD_URL', 'result': 'SUCCESS', 'scmWebUrl': None, 'thumbnail': None, 'title': 'Project1', 'webhookURL': 'https://discord.com/api/webhooks/994018555341307966/V-Or2AnFnDNpfHa7slRrl2S0rhdybzYSnDNzKHVHgnKxJHCWG8iXWVQAPNjsa8hvHJ_q'}}",
    "rank_1_name": "<div align=\"center\">",
    "rank_1_content": "<div align=\"center\">\n  <a href=\"https://dagshub.com\"><img src=\"https://raw.githubusercontent.com/DAGsHub/client/master/dagshub_github.png\" width=600 alt=\"\"/></a><br><br>\n</div>\n\n[![Discord](https://img.shields.io/discord/698874030052212737)](https://discord.com/invite/9gU36Y6)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI](https://img.shields.io/github/checks-status/jenkinsci/dagshub-branch-source-plugin/master)](https://ci.jenkins.io/job/Plugins/job/dagshub-branch-source-plugin/)\n<a href=\"https://twitter.com/TheRealDAGsHub\" title=\"DAGsHub on Twitter\"><img src=\"https://img.shields.io/twitter/follow/TheRealDAGsHub.svg?style=social\"></a>\n\n# DAGsHub Branch Source Jenkins Plugin\n\nUse <a href=\"https://dagshub.com\">DAGsHub</a> repositories as sources for\n<a href=\"https://www.jenkins.io/doc/book/pipeline/multibranch/\">Jenkins Multibranch Workflow projects</a>.\n\nAfter installing the plugin, when you create or edit a Jenkins multibranch project, you can select a \nDAGsHub repo as a branch source, which means you can trigger automatic builds for any git branch, tag \nor pull request in your repo, if they have an existing \n[Jenkinsfile](jenkins.io/doc/book/pipeline/jenkinsfile/).\n\n## Installation\nInstall from Jenkins Update Center. Go to Jenkins > Configure > Manage Plugins > Available and search for DAGsHub branch source plugin then select Install.\n\n## Release notes\n[See the Github releases](https://github.com/jenkinsci/dagshub-branch-source-plugin/releases) for release notes.\n\n---\n\nMade with üê∂ by [DAGsHub](https://dagshub.com/). \n (Distance: 1.2536)",
    "rank_1_distance": 1.2536,
    "rank_2_name": "# Discord Notifier",
    "rank_2_content": "# Discord Notifier\n\nDiscord Notifier provides a bridge between Jenkins and Discord through the built-in webhook functionality.\n\n## The purpose\n\nThe Jenkins Discord Webhook plugin was made to share results of a build to a Discord channel using the webhooks that Discord provides. \n\nThrough this plugin you are able to:\n - [x] Get success and fail messages about your build\n - [x] Link to build artifacts\n - [x] List SCM changes to the build\n - [x] Only send notifications on state change\n\n## Download\n\nDiscord notifier is available in official jenkins repos.\n\n## Usage\n\nThis plugin uses the post-build feature to execute a request.\n\nAfter installing, go to your job's configure section and add the *Discord Notifier* item. Then proceed to enter your webhook URL.\n\n![Post-build dropdown with Discord Webhooks selected](.github/usage_01.jpg)\n\nThere are a few options you can choose from:\n - Webhook URL\n   - The URL of the webhook (pretty self-explanatory) provided by Discord\n - Send only on state change\n   - Checking this will only send the message when the state of the current build differs from the previous\n - Send only failed\n   - checking this will only send the failed job.  \n - Advanced:\n   - thumbnail\n     - If set, the image under the URL shows up on the right side of Discord message.\n   - Enable URL linking\n     - Enables the title, build summary and build id to be linked to the build. Requires the URL to be set in Jenkins' global configuration\n   - Enable artifact list\n     - Enables the listing of the artifacts generated by the build\n   - Enable version info in footer\n     - Adds the \"Jenkins version, Discord Webhook version\" text in the footer of the message\n\n![Standard options in the Discord Webhook config](.github/usage_02.jpg)\n![Advanced tab in the config](.github/usage_03.jpg)\n\n## Pipeline\n\nDiscord Notifier supports Jenkins Pipeline. The only required parameter is webhookURL (the URL of the webhook, of course) - but there isn't much point of sending nothing.\n\n### Parameters\n\n- webhookURL (required)\n\t- The URL of the webhook (pretty self-explanatory) provided by Discord.\n- title\n\t- The title of the embed.\n- link\n\t- If set, the title becomes a link to this URL.\n- thumbnail\n    - If set, the image under the URL shows up on the right side of Discord message.\n- image\n    - If set, the image under the URL shows up under discord message\n- description\n\t- The description of the message (the main chunk of text), can be markdown formatted, [Markdown Text 101 (Chat Formatting: Bold, Italic, Underline)](https://support.discordapp.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline-).\n- footer\n\t- The text in footer of the message.\n- result\n    - Sets the left side colour of the embed (SUCCESS - green, UNSTABLE - yellow, FAILURE - red, ABORTED - grey).\n\n### Example\n\n```groovy\ndiscordSend description: \"Jenkins Pipeline Build\", footer: \"Footer Text\", link: env.BUILD_URL, result: currentBuild.currentResult, title: env.JOB_NAME, webhookURL: \"Webhook URL\"\n``` \n (Distance: 1.3659)",
    "rank_2_distance": 1.3659,
    "rank_3_name": "# [@memkins](https://twitter.com/memkins) account on Twitter.",
    "rank_3_content": "# [@memkins](https://twitter.com/memkins) account on Twitter.\n\nThe goal of this channel is to repost funny memes and comics about Jenkins, while delivering best practices to end users.\nAlthough this channel will include more sarcasm and self-criticism than the official channel, the plan is to keep it overall positive w.r.t Jenkins.\nIt will also remain within the [Jenkins Code of Conduct](jenkins.io/conduct) boundaries.\n\n## Contributing\n\nThe repository uses the [Twitter Together](https://github.com/gr2m/twitter-together) project to automate tweets as code.\nTo contribute a tweet, just submit a pull request!\n\n## License\n\nAll code in this repository is licensed under the MIT License.\nAll content (Tweet texts, images, etc.) is licensed under the [Creative Commons Attribution-ShareAlike 3.0 Unported License](https://creativecommons.org/licenses/by-sa/3.0/). \n (Distance: 1.4108)",
    "rank_3_distance": 1.4108
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(credentialsId: 'cloudnet-discord-ci-webhook', variable: 'url')]\", 'raw_block': \"discordSend description: 'New build for CloudNet v3!', footer: 'New build!', link: env.BUILD_URL, successful: currentBuild.resultIsBetterOrEqualTo('SUCCESS'), title: JOB_NAME, webhookURL: url\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'content': \"sh 'chmod +x ./gradlew';\"}",
    "rank_1_name": "# hello-world-scala-plugin",
    "rank_1_content": "# hello-world-scala-plugin\n\nA straight forward reimplementation of the Java/Maven Jenkins Hello Worl Plugin in Scala/Gradle\n\n\nSimply clone and run\n```\n./gradlew server\n``` \n (Distance: 1.1996)",
    "rank_1_distance": 1.1996,
    "rank_2_name": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon.",
    "rank_2_content": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon. \n (Distance: 1.2218)",
    "rank_2_distance": 1.2218,
    "rank_3_name": "# Gradle JTE Plugin",
    "rank_3_content": "# Gradle JTE Plugin\n\nThis gradle plugin packages a library source for the [Jenkins Templating Engine](https://github.com/jenkinsci/templating-engine-plugin) into a Jenkins Plugin.\n\n## Configuration\n\nThis plugin relies on the [Gradle JPI Plugin](https://github.com/jenkinsci/gradle-jpi-plugin) to do a lot of the heavy lifting. As such, you'll need to configure both a `jte{}` block and a `jenkinsPlugin{}` block.\n\n```groovy\njte{\n    // the directory where the libraries are located\n    // default value: a directory called libraries\n    baseDirectory = file(\"libraries\")\n\n    // the identifier for this plugin when configuring its use\n    // via Job DSL or JCasC. If left empty, no `@Symbol` will \n    // be configured. \n    // default value: null \n    pluginSymbol = \"myCustomSymbol\"\n    \n    // the directory where this plugin will place the generated\n    // Jenkins Plugin's source code. This should only be used\n    // for testing and debugging. The default behavior is to \n    // create a temporary directory.\n    // default value: null\n    pluginGenerationDirectory = file(\"${project.buildDir}/generated-plugin\")\n    \n    // the minimum version of JTE the generated plugin requires\n    // must be greater than version 2.0\n    jteVersion = '2.0'\n}\n\n// for a full list of configuration options, check out the\n// gradle-jpi-plugin repository. \njenkinsPlugin{\n    // version of Jenkins core this plugin depends on, must be 1.420 or later\n    jenkinsVersion = '1.420'\n\n    // ID of the plugin, defaults to the project name without trailing '-plugin'\n    shortName = 'hello-world'\n\n    // human-readable name of plugin\n    // JTE note: this will be what populates the drop down for selecting\n    //           this plugin as a library source.\n    displayName = 'Hello World plugin built with Gradle'\n}\n``` \n (Distance: 1.2616)",
    "rank_3_distance": 1.2616
  },
  {
    "step": "{'content': \"sh './gradlew clean';\"}",
    "rank_1_name": "# hello-world-scala-plugin",
    "rank_1_content": "# hello-world-scala-plugin\n\nA straight forward reimplementation of the Java/Maven Jenkins Hello Worl Plugin in Scala/Gradle\n\n\nSimply clone and run\n```\n./gradlew server\n``` \n (Distance: 1.0972)",
    "rank_1_distance": 1.0972,
    "rank_2_name": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon.",
    "rank_2_content": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon. \n (Distance: 1.1015)",
    "rank_2_distance": 1.1015,
    "rank_3_name": "#Build#",
    "rank_3_content": "#Build#\nThe Jenkins plugin build is powered by the <a href=\"https://github.com/jenkinsci/gradle-jpi-plugin\">gradle-jpi-plugin</a> (see its <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Gradle+JPI+Plugin\">documentation</a>).\n\nThere are following targets defined:\n\nBuilds **.hpi** file\n\n    gradle jpi\n\nRun development server:\n\n    gradle server\n\n###Debugging###\n\nDebuggins is configured with GRADLE_OPTIONS env variable.\n\n    GRADLE_OPTS=\"${GRADLE_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006\" ./gradlew clean server\n\n\nHow to debug slave:\n\n    javaws  -J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8200 http://localhost:8080/computer/slave1/slave-agent.jnlp\n\n### Dependencies ###\n\nJenkins plugin for XL Deploy depends on publicly available libraries that can be found at https://dist.xebialabs.com/public/maven2/ \n (Distance: 1.1877)",
    "rank_3_distance": 1.1877
  },
  {
    "step": "{'content': \"sh './gradlew test';\"}",
    "rank_1_name": "# hello-world-scala-plugin",
    "rank_1_content": "# hello-world-scala-plugin\n\nA straight forward reimplementation of the Java/Maven Jenkins Hello Worl Plugin in Scala/Gradle\n\n\nSimply clone and run\n```\n./gradlew server\n``` \n (Distance: 1.0547)",
    "rank_1_distance": 1.0547,
    "rank_2_name": "# Gradle JTE Plugin",
    "rank_2_content": "# Gradle JTE Plugin\n\nThis gradle plugin packages a library source for the [Jenkins Templating Engine](https://github.com/jenkinsci/templating-engine-plugin) into a Jenkins Plugin.\n\n## Configuration\n\nThis plugin relies on the [Gradle JPI Plugin](https://github.com/jenkinsci/gradle-jpi-plugin) to do a lot of the heavy lifting. As such, you'll need to configure both a `jte{}` block and a `jenkinsPlugin{}` block.\n\n```groovy\njte{\n    // the directory where the libraries are located\n    // default value: a directory called libraries\n    baseDirectory = file(\"libraries\")\n\n    // the identifier for this plugin when configuring its use\n    // via Job DSL or JCasC. If left empty, no `@Symbol` will \n    // be configured. \n    // default value: null \n    pluginSymbol = \"myCustomSymbol\"\n    \n    // the directory where this plugin will place the generated\n    // Jenkins Plugin's source code. This should only be used\n    // for testing and debugging. The default behavior is to \n    // create a temporary directory.\n    // default value: null\n    pluginGenerationDirectory = file(\"${project.buildDir}/generated-plugin\")\n    \n    // the minimum version of JTE the generated plugin requires\n    // must be greater than version 2.0\n    jteVersion = '2.0'\n}\n\n// for a full list of configuration options, check out the\n// gradle-jpi-plugin repository. \njenkinsPlugin{\n    // version of Jenkins core this plugin depends on, must be 1.420 or later\n    jenkinsVersion = '1.420'\n\n    // ID of the plugin, defaults to the project name without trailing '-plugin'\n    shortName = 'hello-world'\n\n    // human-readable name of plugin\n    // JTE note: this will be what populates the drop down for selecting\n    //           this plugin as a library source.\n    displayName = 'Hello World plugin built with Gradle'\n}\n``` \n (Distance: 1.1081)",
    "rank_2_distance": 1.1081,
    "rank_3_name": "#Build#",
    "rank_3_content": "#Build#\nThe Jenkins plugin build is powered by the <a href=\"https://github.com/jenkinsci/gradle-jpi-plugin\">gradle-jpi-plugin</a> (see its <a href=\"https://wiki.jenkins-ci.org/display/JENKINS/Gradle+JPI+Plugin\">documentation</a>).\n\nThere are following targets defined:\n\nBuilds **.hpi** file\n\n    gradle jpi\n\nRun development server:\n\n    gradle server\n\n###Debugging###\n\nDebuggins is configured with GRADLE_OPTIONS env variable.\n\n    GRADLE_OPTS=\"${GRADLE_OPTS} -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5006\" ./gradlew clean server\n\n\nHow to debug slave:\n\n    javaws  -J-Xdebug -J-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8200 http://localhost:8080/computer/slave1/slave-agent.jnlp\n\n### Dependencies ###\n\nJenkins plugin for XL Deploy depends on publicly available libraries that can be found at https://dist.xebialabs.com/public/maven2/ \n (Distance: 1.1731)",
    "rank_3_distance": 1.1731
  },
  {
    "step": "{'content': \"junit '**/build/test-results/test/*.xml';\"}",
    "rank_1_name": "testrail-jenkins-plugin",
    "rank_1_content": "testrail-jenkins-plugin\n=======================\n\nForked from  <https://github.com/achikin/testrail-jenkins-plugin>\nIntegrate test results from Jenkins into TestRail.\nUpload your junit test results to TestRail after every run.\nThe file should follow the [junit schema](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\nEach Jenkins build becomes a test run.\nEach test suite becomes a test group.\n\nUsing the Plugin\n-----\n\n1. This plugin is not yet available through Plugin Manager. It must be installed manually. Download the source and use the below command, which will create the hpi file (found in `/testrail-plugin/target`), which you can then upload to your Jenkins installation.\n\n  ```bash\n  mvn package\n  ```\n\n2. Once you install the plugin, you must configure the TestRail user in your Global Settings.\n![Global Settings for the TestRail Notifier](global-settings.PNG)\n\n3. Go to the job you wish to use the plugin with and add a Post Build Acion. The option you want is Notify TestRail.\n\n4. Configure the step. The Project and Test Suite dropdowns are automatically populated using the TestRail API.\nNote you can also optionally define a Milestone that you are testing against.\nThe Test Report XMLs is a comma separated list of XML files in the job workspace containing results to send to TestRail.\n![Project Settings for the TestRail Notifier](job-settings.PNG)\n\nPipeline Support\n-----\n\nTo use this plugin in a pipeline, add the following to your jenkinsfile:\n\n```java\ntestRail(testrailProject: <Project ID>, testrailSuite: <Suite ID>,\n         junitResultsGlob: '<Junit results>', createNewTestcases:<true | false>])\n```\n\nDevelopers\n\n-----\nThis is a Maven project. You'll need the following in your ~/.m2/settings.xml. As an alternative, the settings file from the repo can be used directly, with `mvn --setings settings.xml ...`\n\n```xml\n<settings>\n  <pluginGroups>\n    <pluginGroup>org.jenkins-ci.tools</pluginGroup>\n  </pluginGroups>\n\n  <profiles>\n    <!-- Give access to Jenkins plugins -->\n    <profile>\n      <id>jenkins</id>\n      <activation>\n        <activeByDefault>true</activeByDefault> <!-- change this to false, if you don't like to have it on per default -->\n      </activation>\n      <repositories>\n        <repository>\n          <id>repo.jenkins-ci.org</id>\n          <url>https://repo.jenkins-ci.org/public/</url>\n        </repository>\n      </repositories>\n      <pluginRepositories>\n        <pluginRepository>\n          <id>repo.jenkins-ci.org</id>\n          <url>https://repo.jenkins-ci.org/public/</url>\n        </pluginRepository>\n      </pluginRepositories>\n    </profile>\n  </profiles>\n  <mirrors>\n    <mirror>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n      <mirrorOf>m.g.o-public</mirrorOf>\n    </mirror>\n  </mirrors>\n</settings>\n```\n\nTo run on your development box you can just do\n\n```bash\nmvn hpi:run\n```\n\nThat will build and start a Jenkins instance running at <http://localhost:8080/jenkins>. It will have the plugin installed but not configured.\nAnd to build a package to install on your production Jenkins box\n\n```bash\nmvn clean package\n```\n\nThat creates a .hpi file in the target directory. For more information about installing plugins, please see <https://wiki.jenkins-ci.org/display/JENKINS/Plugins>.\n\nLicense\n-------\n\nLicensed to the Apache Software Foundation (ASF) under one\nor more contributor license agreements.  See the NOTICE file\ndistributed with this work for additional information\nregarding copyright ownership.  The ASF licenses this file\nto you under the Apache License, Version 2.0 (the\n\"License\"); you may not use this file except in compliance\nwith the License.  You may obtain a copy of the License at: <http://www.apache.org/licenses/LICENSE-2.0>\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License. \n (Distance: 0.9140)",
    "rank_1_distance": 0.914,
    "rank_2_name": "# TestNG Plugin",
    "rank_2_content": "# TestNG Plugin\n\nThis plugin allows you to publish [TestNG](https://testng.org/#_testng_documentation) test results generated\nusing `org.testng.reporters.XMLReporter`. TestNG result xml file contains\nmore information than the junit report xml file . This plugin exposes\nthe extra information in graph and table reports.\n\nThis plugin makes it possible to import TestNG XML reports from each\nbuild into Jenkins.\n\nThe data is parsed using the output generated using\n`org.testng.reporters.XMLReporter`. The results are displayed with a\ntrend graph and all details about which tests that failed are also\npresented.\n\n## Plugin tutorial\n\n[![User tutorial by Darin Pope](images/plugin-tutorial-video.png)](https://www.youtube.com/watch?v=Mr0mohlaQEY)\n\n## Features\n\nThe page layouts are intentionally designed to look very similar to\nthe JUnit plugin.\n\n-   In the project/build page you can see a summary of passed/fail tests\n    as well as passed/fail configuration methods. It also lists the\n    failed test cases with a direct link to view the test failure.\n\n![](docs/images/test-summary.png)\n\n-   In the Class result summary page test methods are separated from\n    configuration methods\n\n![](docs/images/test-result.png)\n\n-   In the Package result summary you can see the order which test\n    methods were ran during the regression run.\n\n![](docs/images/execution-order.png)\n\n-   Different graphs will show you the pass/failed trend of job's\n    previous results.\n\n![](docs/images/test-graph.png)\n\n-   Able to hide/expand tables that display package and class results\n\n## Usage\n\nOnce you have configured your build to run TestNG based test cases and\nalso generate the TestNG specific result XML, using this plugin is very\nsimple. In **Post-Build Actions**, simply enable **Publish TestNG\nResults**. This option allows you to configure the following properties:\n\n-   **TestNG XML report pattern**: This is a file name pattern that can\n    be used to locate the TestNG XML report files (for example\n    **\\***/target/testng-results.xml\\*). The path is an Ant-style\n    pattern (e.g. fileset) or a list of files and folders separated by\n    the characters '***;:,***'. TestNG must be configured to generate\n    XML reports using \\_org.testng.reporters.XMLReporter \\_for this\n    plug-in to function.\n-   **Escape Test Description string?**: If checked, the plug-in escapes\n    the description string associated with the test method while\n    displaying test method details. Unchecking this allows you to use\n    HTML tags to format the description. (*enabled by default*).\n-   **Escape exception messages?**: If checked, the plug-in escapes the\n    test method's exception messages. Unchecking this allows you to use\n    HTML tags to format the exception message e.g. embed links in the\n    text. (*enabled by default*)\n-   **Show Failed Builds?**: If checked, the plug-in includes results\n    from failed builds in the trend graph. (Disabled by default).\n    -   If this is a maven build, it is better to configure the build\n        step with `-Dmaven.test.failure.ignore=true` option. This\n        results in build with test failures being marked as Unstable,\n        thus distinguishing it from build that failed because of non\n        test related issues\n    -   Even when this option is selected, failed builds with no results\n        and aborted builds will not be displayed in graphs\n-   **Mark build as unstable on Skipped config/test methods?**: Marks\n    the build unstable of skipped configuration or test methods are\n    found in results. If build result is worse that UNSTABLE, this\n    option has no effect\n-   **Mark build as failure on failed configuration?**: Marks the build\n    as failed if there are any configuration method failures\n-   **Thresholds for marking the build as Unstable/Failed**: User can\n    configure a Threshold Mode as number of tests or percentage of tests\n    and then configure these values separately as well. This allows for\n    scenarios where we want the builds to be marked successful even when\n    there are some test failures or mark the build as failed even if\n    there is a single test method failure.\n\n### Pipeline in Jenkinsfile\n\nThe [Pipeline Syntax Snippet Generator](https://www.jenkins.io/redirect/pipeline-snippet-generator) guides the user to select TestNG report options.\nAdd the `testNG` step to declarative Pipeline in a `post` section.\n\n```\n  post {\n    always {\n      testNG()\n    }\n  }\n```\n\nAdditional options can be included in the testNG declarative Pipeline step like this:\n\n```\n  post {\n    always {\n      testNG(showFailedBuilds: true,\n             unstableFails: 5, unstableSkips: 25,\n             failedFails:  10, failedSkips:   50)\n    }\n  }\n```\n\nThe `testNG` Pipeline step can be used in a scripted Pipeline like this:\n\n```\nnode {\n  // Add steps that run TestNG tests\n  // Publish TestNG report with the `testNG()` step\n  testNG(reportFilenamePattern: '**/testng-many-results.xml')\n}\n```\n\n### Properties\n\nSome TestNG plugin properties can only be controlled by command line properties set at Jenkins startup.\n\n#### Allow unescaped HTML\n\n[SECURITY-2788](https://www.jenkins.io/security/advisory/2022-06-30/#SECURITY-2788) notes that test description and test exception messages allow unescaped HTML, leading to a cross-site scripting vulnerability.\nCurrent releases of the TestNG plugin always escape test description and test exception messages.\nIf test description or test exceptions messages must not be escaped and administrators accept the risk of disabling this security safeguard, set the Java property\n`hudson.plugins.testng.Publisher.allowUnescapedHTML=true`\nfrom the command line that starts the Jenkins controller.\n\n## Release Notes\n\n* For recent versions, see [GitHub Releases](https://github.com/jenkinsci/testng-plugin-plugin/releases)\n* For versions 1.15 and older, see the [changelog archive](https://github.com/jenkinsci/testng-plugin-plugin/blob/552.va20eb2369116/CHANGELOG.md) \n (Distance: 0.9161)",
    "rank_2_distance": 0.9161,
    "rank_3_name": "This plugin publishes test results of an execution of a testing tool in Jenkins.",
    "rank_3_content": "This plugin publishes test results of an execution of a testing tool in Jenkins.\n\n![](docs/images/xunit_features.JPG)\n\n# Features\n\n-   Records xUnit tests\n-   Mark the build unstable or fail according to threshold values\n\n# Supported tools\n\n## Embedded tools\n\n* JUnit (supported schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd) and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd))\n* [AUnit](http://libre.adacore.com/libre/tools/aunit/)\n* [MSTest](http://en.wikipedia.org/wiki/MSTest) (imported from [MSTest Plugin](https://github.com/jenkinsci/mstest-plugin))\n* [NUnit](http://www.nunit.org/index.php) (imported from [NUnit Plugin](https://github.com/jenkinsci/nunit-plugin))\n* [UnitTest++](http://unittest-cpp.sourceforge.net/)\n* [Boost Test Library](http://www.boost.org/doc/libs/1_39_0/libs/test/doc/html/index.html)\n* [PHPUnit](http://www.phpunit.de/)\n* [Free Pascal Unit](http://www.freepascal.org/units.html)\n* [CppUnit](https://sourceforge.net/projects/cppunit/)\n* [MbUnit](http://www.mbunit.com/)\n* [Googletest](http://code.google.com/p/googletest/)\n* [EmbUnit](http://embunit.sourceforge.net/embunit/index.html)\n* [gtester/glib](https://developer.gnome.org/glib/stable/gtester.html)\n* [QTestLib](http://doc.qt.io/qt-5/qtest-overview.html)\n\n## Other plugins as an extension of the xUnit plugin:\n\n* [Gallio](http://www.gallio.org/) ([Gallio plugin](https://github.com/jenkinsci/gallio-plugin))\n* [Parasoft C++Test tool](http://www.parasoft.com/jsp/products/cpptest.jsp) ([Cpptest Plugin](https://github.com/jenkinsci/parasoft-findings-plugin))\n* [JSUnit](http://www.jsunit.net/) ([JSUnit Plugin](https://github.com/jenkinsci/jsunit-plugin))\n* [JBehave](http://jbehave.org/reference/stable/hudson-plugin.html)\n* [TestComplete](http://smartbear.com/product/testcomplete/overview/) ([TestComplete xUnit Plugin](https://github.com/jenkinsci/testcomplete-xunit-plugin))\n\n## External contributions\n\nFor each xUnit tool, an embedded style sheet is used.\nHowever, the plugin also enables you to use a custom style sheet for your own tool such as :\n\n* [WebUI](http://github.com/versionone/webui-plugin)\n* [Ranorex](http://github.com/ranorex/ranorex-to-xunit)\n\n# Configuration\n\n## Job Configuration\n\n* Execute your testing tools manually or as a step of your build chain\n* Give a pattern that specifies your test results\n\n![](docs/images/xunit-conf-0.2.png)\n\n##  Provide User XSL\n\nIf you want to customise how a input report is transformed to a JUnit report of an existing tool type; xUnit provides a way to use your own XSL if placed at specific path.\nSpecify your XSLs in the `JENKINS_HOME/userContent` directory with the following convention:\n\n```\n$JENKINS_HOME/userContent/xunit/[toolName]/[version]/[any_name].xsl\n```\n\nFor example:\n\n```\n$JENKINS_HOME/userContent/xunit/AUnit/3.x/aunit-to-junit.xsl\n```\n\n**Note**: The tool name and the version are taken from the label in the combo box from the UI.\nIf the tool doesn't have a version (N/A), do not create a version directory.\n\n##  Custom Tool for unsupported formats\n\nXUnit supports a large number of report format, but not all.\nFor unsupported report type an user could provide an own stylesheet that convert the original report into a supported JUnit report.\n\nWhen choose the \"Custom Tool\" as tool type a path to the user XSL must be provided.\nThe path is relative and the plugin lookup the provided relative path using the following priority:\n\n1.  on Jenkins controller\n2.  on Jenkins agent\n3.  relative to workspace\n\nYou could also provide an URL to the stylesheet.\nIf the XSL file is placed in the `$JENKINS_HOME/userContent` folder, the file will be available under the URL\n`http(s)://$JENKINS_URL/userContent/<xsl file>`\n\n### Publish test result checks\n\nThis feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nWhen enabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\nIn the *Details* view of each check, test results will be displayed.\n\nIn order to enable the checks feature, set the property `skipPublishingChecks` to `false`\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  xunit (tools: [ BoostTest(pattern: 'integration/*.xml') ], skipPublishingChecks: false)\n}\n// no stage at all\nxunit (tools: [ BoostTest(pattern: 'boost/*.xml') ], skipPublishingChecks: false)\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    xunit (tools: [ MSTest(pattern: '**/*.trx') ], skipPublishingChecks: false)\n  }\n}\n```\n\n# xUnit Architecture\n\n## Global Architecture\n\nWhen this plugin is installed and configured, Jenkins can transform test result reports produced by different testing tools into JUnit test result format.\nThe JUnit tests can then be recorded by Jenkins.\nJenkins can provide useful information about test results, such as the historical test result trend, web UI for viewing test reports, tracking failures, and so on.\n\nUnder the hood, xUnit Jenkins plugin delegates processing to [DTKit](https://plugins.jenkins.io/dtkit/).\n\n![](docs/images/xunit_architecture.JPG)\n\n## DTKit Activities for XUnit\n\n![](docs/images/xunit_dtkit_activities.JPG)\n\n## DTKit Packaging\n\n## ![](docs/images/xunit_packaging.JPG)\n\n## Working with Pipelines\n\nIt is also possible to set an xUnit configuration in a pipeline job, but is somewhat more verbose.\n\nFor example, creating a boost pipeline (declarative) with the same\nconfiguration as above would be:\n\n**Example of pipeline**\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Test'){\n            steps {\n                sh \"run_tests.bash\"\n            }\n        }\n    }\n    post {\n        always{\n            xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ BoostTest(pattern: 'boost/*.xml') ]\n            )\n        }\n    }\n }\n```\n\n# Releases\n\n**Moved to [GitHub repository page](https://github.com/jenkinsci/xunit-plugin/releases/)**\n\n## Version 2.2.5\n\n#### Improvements\n\n-   [JENKINS-51645](https://issues.jenkins-ci.org/browse/JENKINS-51645) Add\n    support for claims plugin in xUnit (nfalco79 to Arnaud)\n-   [JENKINS-24224](https://issues.jenkins-ci.org/browse/JENKINS-24224) improve\n    xunit plugin with test-stability plugin (nfalco79 to Arnaud)\n\n#### Bugfixes\n\n-   [JENKINS-53186](https://issues.jenkins-ci.org/browse/JENKINS-53186) NUnit\n    2.x test cases with result Error are reported as Success (nfalco79)\n-   Fix lookup strategy when user provides a custom stylesheets file to\n    override the embedded one (nfalco79)\n-   [JENKINS-53034](https://issues.jenkins-ci.org/browse/JENKINS-53034) Failure\n    when validate NUnit 2.x reports generated by NUnit 3.x console\n    (nfalco79)\n-   [JENKINS-53036](https://issues.jenkins-ci.org/browse/JENKINS-53036) NPE\n    after upgrade to 2.2.1 when run publisher (nfalco79)\n-   [JENKINS-52908](https://issues.jenkins-ci.org/browse/JENKINS-52908) Newlines\n    get ignored in failure message and possibly stack trace when\n    uploading xUnitDotNet xml results (nfalco79)\n\n## Version 2.1.0\n\n#### Improvements\n\n-   [JENKINS-32920](https://issues.jenkins-ci.org/browse/JENKINS-32920)\n    Support for URL for stylesheet in Custom Tool (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-52512](https://issues.jenkins-ci.org/browse/JENKINS-52512)\n    Builds on agent fails when there is no report file even if set\n    to do not fail (nfalco79)\n-   [JENKINS-52400](https://issues.jenkins-ci.org/browse/JENKINS-52400)\n    xUnit miss to add required attributes when converts Valgrind reports\n    (nfalco79)\n\n## Version 2.0.4\n\n#### Improvements\n\n-   Improved GoogleTest, FPCUnit, CppTest XSLT to produce a report more\n    compliant with surefire XSD\n\n#### Bugfixes\n\n-   [JENKINS-52327](https://issues.jenkins-ci.org/browse/JENKINS-52327) java.nio.file.AccessDeniedException\n    on Publish xunit Custom tool test report (nfalco79 to greghoeppner)\n-   [JENKINS-52202](https://issues.jenkins-ci.org/browse/JENKINS-52202)\n    xUnit reports \"All test reports are empty\" in case of parallel steps\n    but reports are not empty (nfalco79)\n-   [JENKINS-52253](https://issues.jenkins-ci.org/browse/JENKINS-52253)\n    xUnit in case of multiple tool type processes only the first one\n    (nfalco79)\n-   [JENKINS-52173](https://issues.jenkins-ci.org/browse/JENKINS-52173)\n    xUnit fails when converting gtester/glib2 input to junit format\n    (nfalco79)\n-   [JENKINS-51604](https://issues.jenkins-ci.org/browse/JENKINS-51604) XPathExeption\n    when parsing QtTestLib Reports when a Test contains multiple\n    Incidents (nfalco79)\n-   [JENKINS-27860](https://issues.jenkins-ci.org/browse/JENKINS-27860) Build\n    does not stop if it is marked as Failure when the opportune option\n    is enabled (nfalco79)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194) xUnit\n    should not consider report generated by other xUnit step (nfalco79)\n-   [JENKINS-52107](https://issues.jenkins-ci.org/browse/JENKINS-52107) Convertion\n    exception for NUnit 2.1 reports because nunit-version attribute not\n    contains only digits (nfalco79)\n-   [JENKINS-41093](https://issues.jenkins-ci.org/browse/JENKINS-41093)\n    For Unittest++ xml, only the first failure of each test case is\n    recognized (nfalco79)\n-   [JENKINS-51767](https://issues.jenkins-ci.org/browse/JENKINS-51767)\n    xUnit 2.x XSD does not validate NUnit 2.x XML report file (nfalco79)\n-   [JENKINS-51797](https://issues.jenkins-ci.org/browse/JENKINS-51797)\n    xUnit.Net v2 parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51798](https://issues.jenkins-ci.org/browse/JENKINS-51798) GoogleTest\n    parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51561](https://issues.jenkins-ci.org/browse/JENKINS-51561)\n    xUnit plugin fails to parse NUnit 2 report format generated by NUnit\n    3.6.0.0 (nfalco79)\n-   [JENKINS-51465](https://issues.jenkins-ci.org/browse/JENKINS-51465)\n    Exception in XSL Transformation cause JEP-200 (nfalco79)\n-   [JENKINS-51481](https://issues.jenkins-ci.org/browse/JENKINS-51481)\n    Parse error occur when NUnit report have categories (nfalco79)\n-   [JENKINS-26227](https://issues.jenkins-ci.org/browse/JENKINS-26227)\n    xUnit plugin doesn't use OS culture when reads time values in\n    [xUnit.net](http://xunit.net/) output (nfalco79)\n-   [JENKINS-12417](https://issues.jenkins-ci.org/browse/JENKINS-12417)\n    xUnit problems with CppTest reports generated with default options\n    (nfalco79)\n-   [JENKINS-28871](https://issues.jenkins-ci.org/browse/JENKINS-28871)\n    CppTest 9.5 report file seems not valid for xUnit when no tests was\n    executed (nfalco79)\n\n## Version 2.0.0\n\n#### Breaking Changes\n\nI have introduce some schemas validation becase the large number of\nissues opened to xUnit plugin. Those issues are caused by custom\nattributes or XML DOM in the report generated by some user/tools report\nlogger also if they declare to produce a valid report file. This cause\nme to spend a lot of time to investigate what is right and what is wrong\nand how to implement the XSL without it goes in error during\ntransformation. \n\n-   **Official supported JUnit schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\n    and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd)).**\n\nIn case you are using a non java tools that declares to produce a JUnit\ncompatible report, ensure the report respects one of the widely used\nsupported schemas. If not than select as test type the build step\n\"Custom Tool\" and\nuse [this](https://github.com/jenkinsci/xunit-plugin/blob/master/docs/files/input.xsl)\nXSL as\ndescribed [here](#provide-user-xsl). The XSL is provided AS IS without any support.\n\n-   **NUnit 2.x (2.0 - 2.6) schema validation from official\n    distribution.**\n\nIn case you are using a tools that declares to produce a NUnit 2\ncompatible report, ensure the report respects the official schemas. If\nnot than select as test type the build step \"Custom Tool\" and provide a\nXSL as\ndescribed [here](#provide-user-xsl).\n\n#### Improvements\n\n-   Improved MSTest, MbUnit, AUnit, NUnit, QtTest XSLT to produce a\n    report more compliant with surefire XSD\n-   Change UI rendering of the report tool and clarify the pattern\n    description\n-   [JENKINS-37611](https://issues.jenkins-ci.org/browse/JENKINS-37611)\n    Add support for pipeline using @Symbol annotation to xunit and its\n    parameters (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-42715](https://issues.jenkins-ci.org/browse/JENKINS-42715)\n    xUnit does not support PHPUnit 5.x skipped attribute (nfalco79 to\n    ray)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194)\n    xUnit should not consider report generated by other xUnit step\n    (nfalco79)\n-   [JENKINS-10911](https://issues.jenkins-ci.org/browse/JENKINS-10911)\n    xUnit not detecting Ignored MSTest and NUnit Tests (nfalco79)\n-   [JENKINS-51347](https://issues.jenkins-ci.org/browse/JENKINS-51347)\n    Test Status \"notrun\" being reported as \"failed\" test (nfalco79)\n-   [JENKINS-13113](https://issues.jenkins-ci.org/browse/JENKINS-13113)\n    xUnit plugins detects MSTEST \"NotExecuted\" as successed instead of\n    skipped (nfalco79)\n\n## Version 1.104\n\n#### Improvements\n\n-   [JENKINS-33450](https://issues.jenkins-ci.org/browse/JENKINS-33450)\n    Support for NUnit3 which uses a different XML format by NUnit2\n    (nfalco79 to alexschwantes)\n\n-   [JENKINS-50658](https://issues.jenkins-ci.org/browse/JENKINS-50658)\n    Fix xsd to be compliant with surefire report and rerun option\n    (nfalco79 to alemorato)\n-   Move plugin to pipeline so that commits and pull request could be\n    checked for test failure\n\n#### Bugfixes\n\n-   [JENKINS-48945](https://issues.jenkins-ci.org/browse/JENKINS-48945)\n    Testreport lacks of those test in which the hashcode of two\n    different testsuite name coincide (nfalco79)\n-   [JENKINS-33385](https://issues.jenkins-ci.org/browse/JENKINS-33385)\n    Testresult doesn't show test name in case the package is empty\n    (nfalco79 to Zenger Alexander)\n\n-   [JENKINS-51056](https://issues.jenkins-ci.org/browse/JENKINS-51056)\n    xUnit throws NPE when no threshold was specified (nfalco79)\n-   [JENKINS-35660](https://issues.jenkins-ci.org/browse/JENKINS-35660)\n    QTestLib time information is lost (nfalco79 to kpop)\n-   [JENKINS-28471](https://issues.jenkins-ci.org/browse/JENKINS-28471)\n    xUnit should compare test results to last build where tests was\n    recorded to calculate correctly thresholds (nfalco79 to Jimilian)\n-   [JENKINS-50378](https://issues.jenkins-ci.org/browse/JENKINS-50378)\n    Skipped count percentage is affected by integer rounding (nfalco79\n    to pauljohnston2009)\n-   [JENKINS-42031](https://issues.jenkins-ci.org/browse/JENKINS-42031)\n    xUnit Plugin Does Not Parse Some Boost 1.63 Test Reports (nfalco79\n    to aschet)\n-   Relax BoostTest code line validation (nfalco79 to penberg)\n-   Ensure testuite time attribute is valid for NUnit\n-   [JENKINS-24382](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)\n    Add basic support for Unit\n\n## Version 1.100\n\n-   Fix\n    [JENKINS-30812](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    added parsing for gtest errors so that a failure to run a test is\n    considered a test failure\n-   Fix\n    [JENKINS-27240](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    Workflow integration XUnit as a SimpleBuildSte \n (Distance: 0.9961)",
    "rank_3_distance": 0.9961
  },
  {
    "step": "{'content': \"sh './gradlew jar';\"}",
    "rank_1_name": "# hello-world-scala-plugin",
    "rank_1_content": "# hello-world-scala-plugin\n\nA straight forward reimplementation of the Java/Maven Jenkins Hello Worl Plugin in Scala/Gradle\n\n\nSimply clone and run\n```\n./gradlew server\n``` \n (Distance: 0.9788)",
    "rank_1_distance": 0.9788,
    "rank_2_name": "# Gradle JTE Plugin",
    "rank_2_content": "# Gradle JTE Plugin\n\nThis gradle plugin packages a library source for the [Jenkins Templating Engine](https://github.com/jenkinsci/templating-engine-plugin) into a Jenkins Plugin.\n\n## Configuration\n\nThis plugin relies on the [Gradle JPI Plugin](https://github.com/jenkinsci/gradle-jpi-plugin) to do a lot of the heavy lifting. As such, you'll need to configure both a `jte{}` block and a `jenkinsPlugin{}` block.\n\n```groovy\njte{\n    // the directory where the libraries are located\n    // default value: a directory called libraries\n    baseDirectory = file(\"libraries\")\n\n    // the identifier for this plugin when configuring its use\n    // via Job DSL or JCasC. If left empty, no `@Symbol` will \n    // be configured. \n    // default value: null \n    pluginSymbol = \"myCustomSymbol\"\n    \n    // the directory where this plugin will place the generated\n    // Jenkins Plugin's source code. This should only be used\n    // for testing and debugging. The default behavior is to \n    // create a temporary directory.\n    // default value: null\n    pluginGenerationDirectory = file(\"${project.buildDir}/generated-plugin\")\n    \n    // the minimum version of JTE the generated plugin requires\n    // must be greater than version 2.0\n    jteVersion = '2.0'\n}\n\n// for a full list of configuration options, check out the\n// gradle-jpi-plugin repository. \njenkinsPlugin{\n    // version of Jenkins core this plugin depends on, must be 1.420 or later\n    jenkinsVersion = '1.420'\n\n    // ID of the plugin, defaults to the project name without trailing '-plugin'\n    shortName = 'hello-world'\n\n    // human-readable name of plugin\n    // JTE note: this will be what populates the drop down for selecting\n    //           this plugin as a library source.\n    displayName = 'Hello World plugin built with Gradle'\n}\n``` \n (Distance: 1.0081)",
    "rank_2_distance": 1.0081,
    "rank_3_name": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon.",
    "rank_3_content": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon. \n (Distance: 1.1640)",
    "rank_3_distance": 1.164
  },
  {
    "step": "{'content': \"echo 'Creating CloudNet.zip file...';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 1.1531)",
    "rank_1_distance": 1.1531,
    "rank_2_name": "# OES Template Plugin",
    "rank_2_content": "# OES Template Plugin\n\nA simple implementation of the CloudBees Pipeline Template, But more flexible and simpler.\n\n## A short set up guide\n\n### Console Mode\n\n* create `Pipeline Job` and select `From Console`, For example, the console mode here,\n\n![pipeline-oes-console-ui.png](.media/pipeline-oes-from-console-ui.png)\n\n### SCM Mode\n\n* create a [template.yaml](templates/sample/Template.md) file that describes the meaning and type of the parameter variable\n* write [Jenkinsfile](templates/sample/Jenkinsfile), using variables defined by template.yml\n* create `Pipeline Job` and select `From SCM`, For example, the SCM mode here,\n\n![pipeline-oes-from-scm-ui.png](.media/pipeline-oes-from-scm-ui.png)\n\n**Tips**: console mode is generally used for debugging mode, and SCM mode is recommended for daily use. \n (Distance: 1.2654)",
    "rank_2_distance": 1.2654,
    "rank_3_name": "# Alibabacloud EDAS Publisher plugin",
    "rank_3_content": "# Alibabacloud EDAS Publisher plugin\nThis plugin used to publish to Alibabacloud [EDAS](https://www.aliyun.com/product/edas?spm=5176.12825654.h2v3icoap.479.e9392c4afgWdXy) Application as a Post Build step.\n\n# Usage\nAlibabacloud credentials are needed in the System Configuration.\n\n## Configure global credentials\nConfig Alibabacloud credentials in with `Alibaba Cloud Credentials`.\n\n![Config-1](images/config-1.png)\nChose `Alibaba Cloud Credentials` and enter `Access Key ID` and `Secret Access Key`.\n![Config-2](images/config-2.png)\n\n`Ping EDAS` to check after finishing the configuration.\n\n## FreeStyle job usage\n`Post-build Actions` and choose `Deploy to EDAS`Ôºåand `Add` configuration according to the specific scenarioÔºõ\n\n![deploy_type](images/deployType.png) \n\n| Name  |  Description |\n| :-----|:----------|\n|EDAS ECS Application| publish to EDAS ECS application |\n|Create EDAS ECS Application| create and publish to EDAS ECS application |\n|EDAS K8s Application| publish to EDAS K8s application |\n|Create EDAS K8s Application| create and publish to EDAS K8s application |\n\n## Pipeline usage\n![pipeline](images/pipeline.png)\nThe pipeline script can be generated by snippet generator.\n![snippet_generator](images/snippet_generator.png)\n\n## Job-dsl usage\n```\njob('edas') {    \n  publishers { \n    edasClient { \n      deployApplication('', '', '', '', '') \n    }\n  }\n}\n```\nThe methods supported list belowÔºö\n```\nvoid deployApplication(\n        String namespace,\n        String credentialId,\n        String group,\n        String appId,\n        String targetObject)Ôºõ\n\nvoid deployApplication(\n        String namespace,\n        String credentialId,\n        String group,\n        String appId,\n        String targetObject,\n        String versionLabelFormat,\n        String versionDescriptionFormat,\n        String batch,\n        String batchWaitTime,\n        String releaseType)Ôºõ\n\nvoid insertApplication(\n        String namespace,\n        String credentialId,\n        String applicationName,\n        String packageType,\n        String clusterId,\n        String targetObject,\n        String ecuInfo)Ôºõ\n\nvoid insertApplication(\n        String namespace,\n        String credentialId,\n        String applicationName,\n        String packageType,\n        String clusterId,\n        String targetObject,\n        String ecuInfo,\n        String versionLabelFormat,\n        String versionDescriptionFormat,\n        String buildPackId,\n        String healthCheckUrl)Ôºõ\n\nvoid deployK8sApplication(\n        String namespace,\n        String credentialId,\n        String appId,\n        String targetObject,\n        Boolean image)Ôºõ\n\nvoid deployK8sApplication(\n        String namespace,\n        String credentialId,\n        String appId,\n        String targetObject,\n        Boolean image,\n        String edasContainerVersion,\n        String webContainer,\n        String jdk,\n        String versionLabelFormat,\n        String envs,\n        String startupCommand,\n        String args,\n        String cpuLimit,\n        String memoryLimit,\n        String cpuRequest,\n        String memoryRequest,\n        String replicas,\n        String postStart,\n        String preStop,\n        String readiness,\n        String liveness,\n        String updateStrategy)Ôºõ\n\nvoid insertK8sApplication(\n        String namespace,\n        String credentialId,\n        String applicationName,\n        String packageType,\n        String clusterId,\n        String targetObject,\n        String k8sNamespace,\n        String jdk)Ôºõ\n\n void insertK8sApplication(\n        String namespace,\n        String credentialId,\n        String applicationName,\n        String packageType,\n        String clusterId,\n        String targetObject,\n        String k8sNamespace,\n        String jdk,\n        String descFormat,\n        String edasContainerVersion,\n        String webContainer,\n        String versionLabelFormat,\n        String envs,\n        String startupCommand,\n        String args,\n        String cpuLimit,\n        String memoryLimit,\n        String cpuRequest,\n        String memoryRequest,\n        String replicas,\n        String postStart,\n        String preStop,\n        String readiness,\n        String liveness)Ôºõ\n``` \n (Distance: 1.3084)",
    "rank_3_distance": 1.3084
  },
  {
    "step": "{'content': \"sh 'mkdir -p temp';\"}",
    "rank_1_name": "# Jenkins Pull-Request Tester Docker Image",
    "rank_1_content": "# Jenkins Pull-Request Tester Docker Image\n\nLets you test a pull-request on the Jenkins project in a clean environment.\n\n## How to use\n\n* Have a look at the [pull requests on the Jenkins project](https://github.com/jenkinsci/jenkins/pulls)\n* Select one, and copy its number (see on the URL)\n* Pass that number to the Docker container:\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 jenkins/core-pr-tester\n```\n\n### How to change the Jenkins home directory\n\nThe Jenkins home directory can be set with `JENKINS_HOME` as an environment variable.\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e JENKINS_HOME=/custom/directory/path jenkins/core-pr-tester\n```\n\n### How to merge with `master` branch\n\nAn additional environment variable `MERGE_WITH=` can be passed to merge the PR with any existing branch from the repository, before starting the build.\n\nNOTE: the merge **must** not have conflict, or the whole execution will fail and stop.\n\nExample:\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e MERGE_WITH=master jenkins/core-pr-tester\n```\n\n\n* Open your browser on http://localhost:8080 and test\n\n## Misc\n### WTF: that image is very big, and one layer is 500+ MB!\n\nTo accelerate testing at __run__time, the Docker image has been _built_ trying to cache\nas much as possible things required to build Jenkins.\nLike, for example, the Jenkins Maven dependencies both for 1.x and 2.x.\nThat results in a *very* big layer especially for that part.\n\nThe goal is that Maven has ideally to download no new dependency to build the requested\npull request. \n (Distance: 1.4209)",
    "rank_1_distance": 1.4209,
    "rank_2_name": "# Cross-platform shell",
    "rank_2_content": "# Cross-platform shell\n\nThis plugin defines a new build type to execute a shell command in a\ncross-platform environment.\n\n## Description\n\nCross platform shell executor.\n\nUsing Jenkins built-in \"Execute Windows batch command\" you can run\ncommands using the windows shell.\n\nUsing Jenkins built-in \"Execute shell\" you can run commands using unix\nshell.\n\nIf you need to run a job cross platform you cannot use the two standard\nexecutors provided by Jenkins. You need a \"build step\" that can be\nexecuted both in Windows and in Unix.\n\nThis plugin does exactly this: it takes a command, as the two standard\nbuild steps do, and executes it calling the correct shell depending on\nthe operating system running on the current job executor.\n\n## What it does...\n\n-   It runs any executable (with complete command line) available in the\n    system from current working dir (command must be in Path or in job's\n    workspace directory or subdirectory).\n-   Automatic conversion of file separator is done according to the\n    executing operating system.\n-   Variable style is converted according to the executing operating\n    system. E.g. `$JOBPARAM1` is converted to `%JOBPARAM1%` in the\n    command if the executing operating system is Windows.\n\nConstraints:\n\n-   the current working directory of the command execution is always the\n    job's workspace root.\n-   ./ must not be included in command line (use the configuration\n    switch provided to specify that command is in current working dir or\n    subdir).\n\nExamples:\n\n**Example 1: run executable + script with parameter**\n\nWrite your command in the \\*nix style:\n\n``` syntaxhighlighter-pre\nphp scripts/build.php $JOBPARAM1\n```\n\nIf the command runs on a \\*nix node, the command runs un-altered. If it\nruns on a Windows node, it is changed to:\n\n``` syntaxhighlighter-pre\nphp scripts\\build.php %JOBPARAM1%\n```\n\nNote that the file separator and variable naming convention have\nchanged.\n\n## ... and what it does not!\n\n### Command translation problem\n\n#### Description\n\nIt cannot translate any command! So you cannot write\n\n``` syntaxhighlighter-pre\nrm -rf bin\n```\n\nbecause on windows `rm` command is not available.\n\n#### Solution\n\nYou can wrap your commands in two scripts, one for windows and one for\nunix, each one calling the right command for the operating system:\n\n**clean**\n\n``` syntaxhighlighter-pre\nrm -rf bin\n```\n\n**clean.bat**\n\n``` syntaxhighlighter-pre\ndel /F /S bin\n```\n\nand then call `clean` using an XShell build step.\nThis will execute `clean` in unix and `clean.bat` in windows.\n\n## Notes\n\n-   in windows you can call clean and get clean.bat called, in unix you\n    can't (so the solutions above work);\n-   in unix you have to specify if the command is in the current working\n    dir (and if it is not available it will not be searched in PATH), in\n    windows you haven't to.\n\n## Build step configuration\n\nTo add a XShell build step\n\n-   click on the `Add build step` button and choose\n    `Invoke XShell script`;\n-   fill in the command line text;\n-   choose if the executable is in global Path or in workspace.\n\n![](docs/images/xshell-config.png)\n\n## Release Notes\n\n* For recent versions, see [GitHub Releases](https://github.com/jenkinsci/xshell-plugin/releases)\n* For versions 0.10 and older, see the [changelog archive](https://github.com/jenkinsci/xshell-plugin/blob/120.v1307d168def8/CHANGELOG.md) \n (Distance: 1.4676)",
    "rank_2_distance": 1.4676,
    "rank_3_name": "Jenkins plugin for building RPM packages in Copr.",
    "rank_3_content": "Jenkins plugin for building RPM packages in Copr. \n (Distance: 1.5013)",
    "rank_3_distance": 1.5013
  },
  {
    "step": "{'content': \"sh 'cp -r .template/* temp/';\"}",
    "rank_1_name": "![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/ez-templates-plugin/master)",
    "rank_1_content": "![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/ez-templates-plugin/master)\n\nAllows you to use any job as a template for other jobs.\n\n\nUsing EZ-Templates\n==================\n\n\nCreating a template\n-------------\nAny Jenkins job can be used as a template\n* Select `Allow this job to be used as a template`\n\nA template can be a runnable job in its own right or be disabled and used only as a parent for \"real\" jobs.\n![Image of template configuration](template.png)\n\n:exclamation: WARNING: Templates have the capacity to magnify a bad decision so should never be used without an automated backup\nsolution in place. [ThinBackup][5] plugin is a good candidate for this.\n\nUsing a template\n-------------------\n### Existing jobs\n\nAny Jenkins job can inherit from a template of the _same job type_. \n* Select `Use another job as a template` and enter the template's name\n* Click `Apply`.  When you open the job after this, you will see the configuration copied in from the template.\n\n![Image of implmentation configuration](implementation.png)\n\n:exclamation: The same job type (e.g. Maven/Freestyle) is important.\n\n### New jobs\n\nChoose `New Item > Copy existing item` and enter the template's name. The new job will be automatically created as an implementation.\n\n\nCustomising the implementation\n--------------\n\nSynchronisation happens whenever an implementation job or its template is saved. The implementation overwrites its config with that of the template, discarding any local changes.\n\nOnly configured items (see `Advanced` section) are retained.\n\n:exclamation: External edits are not monitored, users must manually Configure>Save after changing the raw `config.xml`.\n\n#### Job Parameters\n\nOne of those is the [Parameters][1] section.\n\n* New parameters added to the template are added to the implementation\n* Old parameters not in the template are removed from the implementation\n    * :exclamation: Renaming a template parameter counts as a removal and addition - it is not synched as a \"rename\" and you will lose any customisation.\n* Existing parameters are synchronised\n    * The parameters' Default Values are retained by the implementation.\n    * :exclamation: You cannot delete choices from a choice parameter, this would require a full remove/add of the property to reset the implementations.\n\nUsecases\n========\nNot everything can be parameterised in a Jenkins job config. Here's a few sample uses\n\n* SCM Repository URL can be a param, allowing completely different projects to be built with the same template\n    * Alternatively the param could simply the Git branch (e.g. ```master```, ```feature```)\n* Combined with [NodeLabel plugin][2], implementations can specify build node requirements\n    * e.g. Only build on Linux or boxes with IPv6\n* [Parameterized Trigger][3] and [Conditional BuildStep][4] plugins are the basis of many flexible configurations based on job parameters\n\n[1]: https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Build\n[2]: https://wiki.jenkins-ci.org/display/JENKINS/NodeLabel+Parameter+Plugin\n[3]: https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin\n[4]: https://wiki.jenkins-ci.org/display/JENKINS/Conditional+BuildStep+Plugin\n[5]: https://wiki.jenkins-ci.org/display/JENKINS/thinBackup \n (Distance: 1.3178)",
    "rank_1_distance": 1.3178,
    "rank_2_name": "Clang-tidy Plugin",
    "rank_2_content": "Clang-tidy Plugin\n===============\n\nThis [Jenkins CI](http://jenkins-ci.org/) plug-in generates the trend report for [Clang-tidy](http://clang.llvm.org/extra/clang-tidy/), a tool for static C/C++ code analysis and linting.\n\nA magic command:\n```bash\n/usr/share/clang/run-clang-tidy.py -j8 -clang-tidy-binary=\"$(which clang-tidy)\" -p='debug' -header-filter='debug/.*/include/.*' 2>/dev/null | grep -E \"^/\"  | sort | uniq | sed -e 's/\\&/\\&amp;/g' -e 's/\"/\\&quot;/g' -e \"s/'/\\&apos;/g\" -e 's/</\\&lt;/g' -e 's/>/\\&gt;/g' | sed -nr 's;^(/[^:]+):([0-9]+):([0-9]+): ([^:]+): (.*?) \\[(((clang-)?[^-]*)-(.*))\\]$;        <error type=\"\\7\" id=\"\\9\" severity=\"\\4\" message=\"\\5\">\\n            <location file=\"\\1\" line=\"\\2\" column=\"\\3\"/>\\n        </error>;p' | sed -r '1i<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<results>\\n    <clangtidy version=\"'\"$($(which clang-tidy) -version | sed -rn 's/^  LLVM version ([0-9.]+)$/\\1/p')\"'\"/>\\n    <errors>' | sed -r '$s;$;\\n    </errors>\\n</results>;'  > clangtidy-result.xml\n```\n\nFor more information, visit the wiki page https://wiki.jenkins-ci.org/display/JENKINS/Clang+Tidy+Plugin. \n (Distance: 1.4237)",
    "rank_2_distance": 1.4237,
    "rank_3_name": "Cppcheck Plugin",
    "rank_3_content": "Cppcheck Plugin\n===============\n\nThis plugin generates the trend report for [CppCheck](https://sourceforge.net/p/cppcheck/wiki/Home/), a tool for static C/C++ code analysis.\n\n# Description\n\nThe Cppcheck plug-in scans for Cppcheck report files in the build workspace and reports the issues detected during static C/C++ code analysis.\n\nThe following features are provided by this plug-in:\n\n- Configuration of the files to scan after a build, build status evaluation and graph.\n- Trend reports showing the number of detected issues per type.\n- Results summary and results details including new issues and solved issues.\n- Listing of source code with highlighted issues.\n- Show all violations highlighted on a single page.\n- [Dashboard View](https://plugins.jenkins.io/dashboard-view/) portlet showing number of issues per job.\n- Remote access API ([REST API](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API)).\n- Works with most project/job types.\n\nPlease use the [Mailing Lists](https://www.jenkins.io/mailing-lists/) or [issue tracker](http://issues.jenkins.io/) to ask questions, create feature request or bug reports.\n\n# Usage\n\n- Install [Cppcheck](https://cppcheck.sourceforge.io/) tool to the system. If you use master Jenkins server and several build slaves, install it to all slaves that will run the analysis.\n- For each job configuration page:\n    - Add **Execute shell** build step to generate Cppcheck report or create the report file in your build scripts (Ant, Maven, Make, ...).\n    - Activate **Publish Cppcheck results** in **Post-build Actions** and provide at least the path to the generated Cppcheck report (`cppcheck.xml`).\n    - Optionally configure build status evaluation (**Advanced** button).\n    - Optionally configure graph (second level **Advanced** button).\n- **Always prefer new XML version 2 for the output format.** XML version 1 is supported in the plugin too, but Cppcheck doesn't report some issues with the legacy format.\n\n```sh\n# Minimal set of arguments\ncppcheck --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n\n# Enable all checks\ncppcheck --enable=all --inconclusive --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n\n# Analysis in multiple parallel threads\ncppcheck -j 4 --enable=all --inconclusive --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n```\n\n![](docs/images/1.15_config.png)\n\n## Report in a sub-directory of the workspace (advanced)\n\n**The plugin expects that all paths in the input report file (`cppcheck.xml`) are relative to the workspace root directory.** If the Cppcheck tool is executed from a sub-directory, the plugin will be unable to pair the paths in the report with the files on disk and **the source codes with the highlighted errors won't be available in the details**.\n\n```sh\n# In the workspace root directory\ncd SUBDIRECTORY\ncppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\n```\n\nSee the warning in the Console Output below. The invalid absolute path is missing `SUBDIRECTORY` between `workspace` and `INPUT_DIRECTORY` directories.\n\n```sh\n[Cppcheck] Starting the cppcheck analysis.\n[Cppcheck] Processing 1 files with the pattern '**/cppcheck.xml'.\n[Cppcheck] [WARNING] - The source file 'file:/SHORTENED/work/jobs/JOB_NAME/workspace/INPUT_DIRECTORY/mainwindow.cpp'\ndoesn't exist on the slave. The ability to display its source code has been removed.\n...\n```\n\nThere are basically two solutions for this issue. The first one is to execute the Cppcheck analysis directly from the workspace root directory to make `SUBDIRECTORY` part of the path.\n\n```sh\n# In the workspace root directory\n# cd SUBDIRECTORY\n# cppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\n\ncppcheck --enable=all --inconclusive --xml --xml-version=2 SUBDIRECTORY/INPUT_DIRECTORY 2> SUBDIRECTORY/cppcheck.xml\n```\n\nBut the above solution is not much suitable for larger projects that are using for example recursive GNU/Make based build scripts where the Cppcheck analysis is executed for each sub-project (sub-directory). It is better to modify the paths in the report files after they are created.\n\n```sh\n# In the workspace root directory\ncd SUBDIRECTORY\ncppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\nsed -i 's%\\(<location file=\"\\)%\\1SUBDIRECTORY/%' cppcheck.xml\n```\n\nThe `sed` command above adds `SUBDIRECTORY/` to the beginning of the paths in the `location` elements. Note this method is not limited only to `sed`, you can use whatever tool that is able to replace string in a file.\n\n```xml\n<location file=\"INPUT_DIRECTORY/mainwindow.cpp\" line=\"1134\"/>\n<location file=\"SUBDIRECTORY/INPUT_DIRECTORY/mainwindow.cpp\" line=\"1134\"/>\n```\n\n# Remote access API ([REST API](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API))\n\nUse the URLs below to access the Cppcheck specific data.\n\nDescription of possibilities\n\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api)\n\nData\n\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api/xml](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api/xml)\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api/json](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api/json)\n- etc.\n\nExample of XML data:\n\n```xml\n<cppcheckStatistics>\n    <numberErrorSeverity>0</numberErrorSeverity>\n    <numberInformationSeverity>7</numberInformationSeverity>\n    <numberNoCategorySeverity>0</numberNoCategorySeverity>\n    <numberPerformanceSeverity>20</numberPerformanceSeverity>\n    <numberPortabilitySeverity>0</numberPortabilitySeverity>\n    <numberStyleSeverity>22</numberStyleSeverity>\n    <numberTotal>54</numberTotal>\n    <numberWarningSeverity>5</numberWarningSeverity>\n</cppcheckStatistics>\n```\n\nExample of JSON data:\n\n```json\n{\n    \"numberErrorSeverity\" : 0,\n    \"numberInformationSeverity\" : 7,\n    \"numberNoCategorySeverity\" : 0,\n    \"numberPerformanceSeverity\" : 20,\n    \"numberPortabilitySeverity\" : 0,\n    \"numberStyleSeverity\" : 22,\n    \"numberTotal\" : 54,\n    \"numberWarningSeverity\" : 5\n}\n```\n\n# Known Issues\n\n[View these issues in Jira](https://issues.jenkins.io/browse/?jql=project+%3D+JENKINS+AND+status+in+%28Open%2C+%22In+Progress%22%2C+Reopened%29+AND+component+%3D+%27cppcheck-plugin%27) \n (Distance: 1.4968)",
    "rank_3_distance": 1.4968
  },
  {
    "step": "{'content': \"sh 'mkdir temp/dev';\"}",
    "rank_1_name": "Jenkins DiskCheck Plugin",
    "rank_1_content": "Jenkins DiskCheck Plugin\n=============\n \nMotivation\n---------\n Disk run out of space while running a build , We do use Disk Usage plugin , but it checks for disk usage every hour also mark the slave offline without any notification which is not appropriate\n\nSolution :\n--------\n The plugin checks for disk available before starting a job and fail the build is the disk is below the Threshold ( You define the Threshold in a global parameter) , \n\n-------------\nAlso there is a Global Configuration Enable Disk Recycler if it's checked  and the disk space is low for a job , then it will delete everything in the current job workspace directory, \n (Distance: 1.3945)",
    "rank_1_distance": 1.3945,
    "rank_2_name": "# Jenkins Logs Sanitizer Plugin",
    "rank_2_content": "# Jenkins Logs Sanitizer Plugin\n\n[![Build Status](https://travis-ci.org/jenkinsci/ansicolor-plugin.svg)](https://travis-ci.org/jenkinsci/ansicolor-plugin)\n\nThis plugin allows users to suppress output of enclosing pipelines steps to Console Output.\n\n## Using in pipeline workflows\n\nAlso, the following pipeline syntax can be used without allocating a node. \n\n```groovy\nsanitizer(true) {\n   echo 'Hello World'\n   bat \"dir\"\n}\n```\n\nNote: A boolean is passed in sanitizer step, it is to allow user to sanitize logs based on any condition/flag. \n (Distance: 1.4132)",
    "rank_2_distance": 1.4132,
    "rank_3_name": "Chroot-plugin",
    "rank_3_content": "Chroot-plugin\n=============\n\nThe aim of this jenkins plugin is to provide support for some chroot\nenvironment technologies.  The first two environments to implement are pbuilder\nand mock. This way a jenkins job can use it's own isolated chroot environment,\ncan install custom repositories and dependencies, and when the job is done, the\nchroot environment ist thrown away. This feature makes jenkins much more\nattractive as a build server for C and C++ projects.\n\nPbuilder works quite nice already. Mock is not useable at the moment.\n\nInstallation from Jenkins\n-------------------------\n\nJust install it like any other plugin: Chroot-plugin is available in the Jenkins Update Center.\nAn extensive plugin documentation can be found in the [Jenkins Wiki](https://wiki.jenkins-ci.org/display/JENKINS/chroot+Plugin).\n\n\nInstallation from source\n------------------------\n\n```bash\ngit clone https://github.com/rmohr/chroot-plugin\ncd chroot-plugin\nmvn install\n```\nYou will find the resulting hpi file here: \n```\n./target/chroot.hpi\n```\n\nUsing pbuilder\n--------------\n\nTo allow jenkins to use pbuilder it is necessary to that the jenkins user can\nrun /usr/sbin/pbuilder via sudo. Make sure to protect your jenkins installation\nproperly, because pbuilder is NOT a secure  and fully isolated\nenvironment.\n\nAn appropriate /etc/sudoers entry might look like this:\n\n```\njenkins ALL=(ALL) NOPASSWD: /usr/sbin/pbuilder\n```\n\nUsing the plugin\n----------------\n\nFirst Create chroot environments in _Manage Jenkins_ > _Chroot Environments_:\n![chroot configuration](minimal_configuration.png)\n\n**Make sure that the autoinstall option is enabled.**\n\nA buildstep _chroot builder_ is now available where you can select a preconfigured builder:\n![buildstep configuration](buildstep.png)\n\nFuture Plans\n------------\nAs the prove of concept phase is over, the next step is to clean the code and\ncreate a clean interface for long term stability. \n (Distance: 1.4304)",
    "rank_3_distance": 1.4304
  },
  {
    "step": "{'content': \"sh 'mkdir temp/dev/examples';\"}",
    "rank_1_name": "# hugo-plugin",
    "rank_1_content": "# hugo-plugin\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/hugo-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/hugo-plugin/job/master/)\n\n# Features\n\n* Auto release via git submodule\n\n# Docker Agent\n\nIf you have a Docker environment, you can use [hugo-jnlp-agent](https://github.com/LinuxSuRen/hugo-jnlp-agent) to build your Hugo site.\n\n# Pipeline\n\n```\nhugo baseUrl: '', destination: '', hugoHome: '/usr/local/bin/'\nhugo baseUrl: 'https://surenpi.gitee.io/blog', destination: 'gitee', hugoHome: '/usr/local/bin/'\n\n```\n\n# Users\n\nHere are part of who're using this plugin to build their Hugo site.\n\n* [LinuxSuRen' blog](https://github.com/linuxsuren/surenpi)\n* [Jenkins Community website](https://github.com/jenkins-zh/jenkins-zh) \n (Distance: 1.3687)",
    "rank_1_distance": 1.3687,
    "rank_2_name": "Chroot-plugin",
    "rank_2_content": "Chroot-plugin\n=============\n\nThe aim of this jenkins plugin is to provide support for some chroot\nenvironment technologies.  The first two environments to implement are pbuilder\nand mock. This way a jenkins job can use it's own isolated chroot environment,\ncan install custom repositories and dependencies, and when the job is done, the\nchroot environment ist thrown away. This feature makes jenkins much more\nattractive as a build server for C and C++ projects.\n\nPbuilder works quite nice already. Mock is not useable at the moment.\n\nInstallation from Jenkins\n-------------------------\n\nJust install it like any other plugin: Chroot-plugin is available in the Jenkins Update Center.\nAn extensive plugin documentation can be found in the [Jenkins Wiki](https://wiki.jenkins-ci.org/display/JENKINS/chroot+Plugin).\n\n\nInstallation from source\n------------------------\n\n```bash\ngit clone https://github.com/rmohr/chroot-plugin\ncd chroot-plugin\nmvn install\n```\nYou will find the resulting hpi file here: \n```\n./target/chroot.hpi\n```\n\nUsing pbuilder\n--------------\n\nTo allow jenkins to use pbuilder it is necessary to that the jenkins user can\nrun /usr/sbin/pbuilder via sudo. Make sure to protect your jenkins installation\nproperly, because pbuilder is NOT a secure  and fully isolated\nenvironment.\n\nAn appropriate /etc/sudoers entry might look like this:\n\n```\njenkins ALL=(ALL) NOPASSWD: /usr/sbin/pbuilder\n```\n\nUsing the plugin\n----------------\n\nFirst Create chroot environments in _Manage Jenkins_ > _Chroot Environments_:\n![chroot configuration](minimal_configuration.png)\n\n**Make sure that the autoinstall option is enabled.**\n\nA buildstep _chroot builder_ is now available where you can select a preconfigured builder:\n![buildstep configuration](buildstep.png)\n\nFuture Plans\n------------\nAs the prove of concept phase is over, the next step is to clean the code and\ncreate a clean interface for long term stability. \n (Distance: 1.4050)",
    "rank_2_distance": 1.405,
    "rank_3_name": "# Jenkins Pull-Request Tester Docker Image",
    "rank_3_content": "# Jenkins Pull-Request Tester Docker Image\n\nLets you test a pull-request on the Jenkins project in a clean environment.\n\n## How to use\n\n* Have a look at the [pull requests on the Jenkins project](https://github.com/jenkinsci/jenkins/pulls)\n* Select one, and copy its number (see on the URL)\n* Pass that number to the Docker container:\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 jenkins/core-pr-tester\n```\n\n### How to change the Jenkins home directory\n\nThe Jenkins home directory can be set with `JENKINS_HOME` as an environment variable.\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e JENKINS_HOME=/custom/directory/path jenkins/core-pr-tester\n```\n\n### How to merge with `master` branch\n\nAn additional environment variable `MERGE_WITH=` can be passed to merge the PR with any existing branch from the repository, before starting the build.\n\nNOTE: the merge **must** not have conflict, or the whole execution will fail and stop.\n\nExample:\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e MERGE_WITH=master jenkins/core-pr-tester\n```\n\n\n* Open your browser on http://localhost:8080 and test\n\n## Misc\n### WTF: that image is very big, and one layer is 500+ MB!\n\nTo accelerate testing at __run__time, the Docker image has been _built_ trying to cache\nas much as possible things required to build Jenkins.\nLike, for example, the Jenkins Maven dependencies both for 1.x and 2.x.\nThat results in a *very* big layer especially for that part.\n\nThe goal is that Maven has ideally to download no new dependency to build the requested\npull request. \n (Distance: 1.4097)",
    "rank_3_distance": 1.4097
  },
  {
    "step": "{'content': \"sh 'cp -r cloudnet-examples/src/main/java/de/dytanic/cloudnet/examples/* temp/dev/examples';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 1.1088)",
    "rank_1_distance": 1.1088,
    "rank_2_name": "# OES Template Plugin",
    "rank_2_content": "# OES Template Plugin\n\nA simple implementation of the CloudBees Pipeline Template, But more flexible and simpler.\n\n## A short set up guide\n\n### Console Mode\n\n* create `Pipeline Job` and select `From Console`, For example, the console mode here,\n\n![pipeline-oes-console-ui.png](.media/pipeline-oes-from-console-ui.png)\n\n### SCM Mode\n\n* create a [template.yaml](templates/sample/Template.md) file that describes the meaning and type of the parameter variable\n* write [Jenkinsfile](templates/sample/Jenkinsfile), using variables defined by template.yml\n* create `Pipeline Job` and select `From SCM`, For example, the SCM mode here,\n\n![pipeline-oes-from-scm-ui.png](.media/pipeline-oes-from-scm-ui.png)\n\n**Tips**: console mode is generally used for debugging mode, and SCM mode is recommended for daily use. \n (Distance: 1.2104)",
    "rank_2_distance": 1.2104,
    "rank_3_name": "# README #",
    "rank_3_content": "# README #\n\n## This plugin is archived as of March 2024\n## Visit https://www.qualityclouds.com for alternatives\n\nThis plugin allows Quality Clouds customers to run Quality Clouds scans against their ServiceNow and Salesforce\ninstances from a Jenkins build.\n\nDifferent parameters can be set to fail the build.\n*   Maximum number of Issues\n*   Maximun amount of Technical Debt (in minutes)\n*   Maximum number of High Severity Issues\n*   Minimum value for the Quality of Cloud Indicator (between 0 and 100)\n\nAt least one valid parameter must be specified.\n\n\n### Prerequisites for local installation ###\n\n* Need Jenkins to be installed.\n* Credentials plugin required.\n* Need Maven to be installed.\n\n### Installation Steps are: ###\n\n* run mvn package to Generating hpi in {projectdirectory}/snowjenkinsplugin/target/qcscan.hpi\n\n* Login to jenkins, go to Manage Jenkins -> Manage Plugins -> advanced tab -> upload plugin (upload qcscan.hpi)\n\n\n### Build configuration Steps are: ###\n\n* Create a freestyle project.\n\n* Create a credential of type Secret File and store the the Quality Clouds API token on this file\n  (you will receive this token during your onboarding as a Quality Clouds customer)\n\n* The credential can be defined in the Global domain. If you want to use a specific Domain for the Quality Clouds credentials,\nyou will need to create a specific domain and configure a hostname specification of \"qualityclouds.com\". See\nhttps://docs.qualityclouds.com/display/QCD/Quality+Clouds+Jenkins+Plugin for details\n\n* Add build step QCScan.\n\n* The configuration parameters for this build step are:\n\n\tString \"Instance URL\" : Instance URL to scan.\n\n\tString \"API Token Secret File\" : Select the credential you created to hold the API key.\n\n\tInteger \"Issues Count Threshold\" : Maximum issues count to have a success build.\n\n\tInteger \"Technical Debt Threshold\"  : Maximum technical debt count to have a success build.\n\n\tInteger \"Quality of Cloud Threshold\" : Minimum Quality of Cloud to have a success build.\n\n\tInteger \"High Severity Issues Threshold\" : Maximum High Severity issues count to have a success build.\n\n* Please refer to https://docs.qualityclouds.com/display/QCD/Quality+Clouds+Jenkins+Plugin or contact help@qualityclouds.com in case of issues configuring your\nbuild. \n (Distance: 1.2117)",
    "rank_3_distance": 1.2117
  },
  {
    "step": "{'content': \"sh 'mkdir temp/plugins';\"}",
    "rank_1_name": "Jenkins plugin for building RPM packages in Copr.",
    "rank_1_content": "Jenkins plugin for building RPM packages in Copr. \n (Distance: 1.2046)",
    "rank_1_distance": 1.2046,
    "rank_2_name": "Optional Plugins Helper Module",
    "rank_2_content": "Optional Plugins Helper Module\n==============================\n\nA Jenkins module to help extracting optional plugins bundled in custom Jenkins installations using the `hpi:bundle` goal.\n\nDevelopment\n===========\n\nHow to install\n--------------\n\nRun\n\n\tmvn clean package\n\nto create the module .jar file.\n\n\nPlugin releases\n---------------\n\n\tmvn release:prepare release:perform -B\n\n\nLicense\n-------\n\n\t(The MIT License)\n\n    Copyright ¬© 2015, CloudBees, Inc., Stephen Connolly.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE. \n (Distance: 1.2129)",
    "rank_2_distance": 1.2129,
    "rank_3_name": "# hugo-plugin",
    "rank_3_content": "# hugo-plugin\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/hugo-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/hugo-plugin/job/master/)\n\n# Features\n\n* Auto release via git submodule\n\n# Docker Agent\n\nIf you have a Docker environment, you can use [hugo-jnlp-agent](https://github.com/LinuxSuRen/hugo-jnlp-agent) to build your Hugo site.\n\n# Pipeline\n\n```\nhugo baseUrl: '', destination: '', hugoHome: '/usr/local/bin/'\nhugo baseUrl: 'https://surenpi.gitee.io/blog', destination: 'gitee', hugoHome: '/usr/local/bin/'\n\n```\n\n# Users\n\nHere are part of who're using this plugin to build their Hugo site.\n\n* [LinuxSuRen' blog](https://github.com/linuxsuren/surenpi)\n* [Jenkins Community website](https://github.com/jenkins-zh/jenkins-zh) \n (Distance: 1.2253)",
    "rank_3_distance": 1.2253
  },
  {
    "step": "{'content': \"sh 'cp cloudnet-plugins/**/build/libs/*.jar temp/plugins/';\"}",
    "rank_1_name": "# Kubernetes Client API Plugin",
    "rank_1_content": "# Kubernetes Client API Plugin\n\nThis plugin exposes the [Kubernetes Client](https://github.com/fabric8io/kubernetes-client) API to Jenkins plugins.\n\n# Known usage\n\n* [kubernetes-credentials-plugin](https://github.com/jenkinsci/kubernetes-credentials-plugin)\n* [kubernetes-credentials-provider-plugin](https://github.com/jenkinsci/kubernetes-credentials-provider-plugin)\n* [kubernetes-plugin](https://github.com/jenkinsci/kubernetes-plugin)\n\n# Environment\n\nThe following build environment is required to build this plugin\n\n* `java-1.8` and `maven-3.3.9`\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Release\n\n[See the release page](https://github.com/jenkinsci/kubernetes-client-api-plugin/releases)\n\nTo release the plugin, just ask a maintainer to merge the PR on master branch.\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 0.9899)",
    "rank_1_distance": 0.9899,
    "rank_2_name": "# Literate CLI",
    "rank_2_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 1.0043)",
    "rank_2_distance": 1.0043,
    "rank_3_name": "Optional Plugins Helper Module",
    "rank_3_content": "Optional Plugins Helper Module\n==============================\n\nA Jenkins module to help extracting optional plugins bundled in custom Jenkins installations using the `hpi:bundle` goal.\n\nDevelopment\n===========\n\nHow to install\n--------------\n\nRun\n\n\tmvn clean package\n\nto create the module .jar file.\n\n\nPlugin releases\n---------------\n\n\tmvn release:prepare release:perform -B\n\n\nLicense\n-------\n\n\t(The MIT License)\n\n    Copyright ¬© 2015, CloudBees, Inc., Stephen Connolly.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE. \n (Distance: 1.0567)",
    "rank_3_distance": 1.0567
  },
  {
    "step": "{'content': \"sh 'cp cloudnet-launcher/build/libs/launcher.jar temp/launcher.jar';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 0.9578)",
    "rank_1_distance": 0.9578,
    "rank_2_name": "# CloudBees Docker Build and Publish",
    "rank_2_content": "# CloudBees Docker Build and Publish\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/docker-build-publish.svg)](https://plugins.jenkins.io/docker-build-publish)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/docker-build-publish-plugin.svg?label=changelog)](https://github.com/jenkinsci/docker-build-publish-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/docker-build-publish.svg?color=blue)](https://plugins.jenkins.io/docker-build-publish)\n\nBuild and push your Docker based project to the docker registry, including private repos.\n\nFeatures:\n\n   * Only a Dockerfile needed to build your project\n   * Publish to docker index/registry\n   * nocache option (for rebuild of all Dockerfile steps)\n   * publish option\n   * manage registry credentials for private and public repos\n   * tag the image built - use any Jenkins env. variables.\n\n## Upgrading\n\nIn versions 1.0+ the plugin uses [docker-commons-plugin](https://wiki.jenkins-ci.org/display/JENKINS/Docker+Commons+Plugin)\nand the credentials plugin.\nWhen upgrading you need to add the credentials to each job that uses the plugin,\nthe global fields are no longer used.\n\n\n## Dockerfile as buildfile\nA Dockerfile is a convenient way to express build instructions. \nThis plugin will use the Dockerfile in the workspace (possibly previously checked out from git) and will invoke docker build to create the Docker image. \nThe result can be automatically uploaded to the Docker Registry or a private registry.\n\nAs the Beatles song, all you need is Dockerfile, and love. \nIf you have a Dockerfile in the root of your project, then no further configuration is needed.\n\n\n\n## Usage\n\nFirstly, ensure you have docker running (if you are running with a agent, ensure the agent can run docker) - and that Jenkins can run docker commands.\n\nSetup a build of any type - with a _CloudBees Docker Build and Publish_ build step.\nYou can use the example under [`src/test/example`](https://github.com/jenkinsci/docker-build-publish-plugin/tree/master/src/test/example) to build a very simple busybox based image,\nand push it to `acme/test`.\n\n![build instructions](https://raw.githubusercontent.com/jenkinsci/docker-build-publish-plugin/master/build-config.png)\n\nA remote Docker server can be configured providing its Docker server URI and creating a _Docker Server Certificate Authentication_ credential containing the server certificates.\n\n![server credentials](https://raw.githubusercontent.com/jenkinsci/docker-build-publish-plugin/master/credentials_server.png)\n\n\nIn order to push to a registry, set the _Docker Registry URL_ and your credentials (username, password).\nBy default these are used to access the Docker Registry at `index.docker.io`, but you can use private repositories.\nCredentials are needed in order to push (to public or private repos) - or need to build based on a private repo.\n\nThe usual Docker build caching mechanism applies - and you can choose to publish, or not, the resultant image, configured under Advanced options.\n\nBuilds will be decorated with the repository name (and tag) of the build images unless _Skip Decorate_ is checked:\n\n![build decoration](https://raw.githubusercontent.com/jenkinsci/docker-build-publish-plugin/master/build-label.png)\n\nYou can supply multiple tags for an image separated by commas. The latest tag is automatically applied to image - if you do not want this check the _Do not tag this build as latest_ checkbox. \n\n### Why use a Dockerfile\n\nDefining your build as a Dockerfile means that it will run in a consistent linux environment, no matter where the build is run.\nYou also end up with an image (in a repository, possibly pushed to a registry) that can then be deployed - the exact same image you built.\n\nDockerfiles can also help speed up builds. If there has been no change relative to a build instruction in the Dockerfile - then a cached version of that portion of the build can be used (this is a fundamental feature of docker)\n\n\n### Terminology\n\nDocker has some confusing terminology - quick refresher:\n\n * Repository - collection of docker images and tags. You \"push\" a repository to a registry, and when you build an image, it gets added to a repository.\n By default this is the \"latest\" version (tag)\n * Registry - a place you push docker images/repos to\n * Push - deploy a docker repo (presumably with a new image) to a remote registry\n * Image - a docker image is what you build from a Dockerfile - it gets added to a repo \n (Distance: 1.1899)",
    "rank_2_distance": 1.1899,
    "rank_3_name": "# Juseppe - Jenkins Update Site Embedded for Plugin Publishing",
    "rank_3_content": "# Juseppe - Jenkins Update Site Embedded for Plugin Publishing\n\n## How to launch with help of docker\n[![](https://badge.imagelayers.io/lanwen/juseppe:latest.svg)](https://imagelayers.io/?images=lanwen/juseppe:latest 'imagelayers.io')\n\nRun it with mounted plugins folder as volume. Remember to set `JUSEPPE_BASE_URI` env var\n\n```\ndocker run --name juseppe -v /your/plugins/dir/:/juseppe/plugins/ -e JUSEPPE_BASE_URI=http://my.company.com -e JUSEPPE_BIND_HOST=0.0.0.0 -p 80:8080 lanwen/juseppe\n```\n\nThen it will be available on `http://dockerhost:80/update-center.json`\n\n### Built-in self-signed certificate\n\nCertificate can be copied from json in format:\n\n```\n-----BEGIN CERTIFICATE-----\n{json value of signature.certificates[0] (without quotes)}\n-----END CERTIFICATE-----\n```\n\n**WARN!** Certificate regenerates in every new docker image!\n\n### Specify own certificate\n\nMount as volumes private key and cert:\n\n```\ndocker run --name juseppe -v /your/private/key:/juseppe/cert/uc.key -v /your/cert/file:/juseppe/cert/uc.crt ... lanwen/juseppe\n```\n\n### Just generate json\n\n```\ndocker run --rm ... lanwen/juseppe generate\n```\n\n## Build new image  \n\n`docker build -t juseppe:source .`\n\n# Without docker\n\n## 1. Checkout & Build \n\nWith maven just run `mvn package`, and you will find jar in `target/juseppe.jar`\n\n## 2. Generate self-signed cert with private key\n\nand point juseppe to use it with help of `-Djuseppe.certificate=path/to/cert.crt` and `-Djuseppe.private.key=path/to/priv.key` \n\n```\nopenssl genrsa -out uc.key 2048 \\\n&& openssl req -nodes -x509 -new \\\n    -key uc.key \\\n    -out uc.crt \\\n    -days 1056 \\\n    -subj \"/C=EN/ST=Update-Center/L=Juseppe/O=Juseppe\"\n```\n \n## 3. Run help to see all available commands\n\n`java -jar juseppe.jar help`\n\n#### 3.1 Generate new json\n\n`java -jar juseppe.jar generate`\n\n#### 3.2 Serve json and plugins with help of jetty server\n\nTo run server with file watching in current directory (not the dir where jar located!)\n\n`java -jar juseppe.jar serve`\n\n### 3.3 Watch for changes automatically\n\nJust add `-w` (or `--watch`) flag to update jsons on any plugin list changes\n\n`java -jar juseppe.jar -w serve` or `java -jar juseppe.jar -w generate`\n\nYou can also change plugin dir location by specifying `-p` (or `--plugins-directory`) flag with location of directory where the plugins are\n\n`java -jar juseppe.jar -w -p /tmp/plugins serve`\n\n\n## 4. Configure \n\nYou can define system properties or environment vars to override default behaviour. \nComplete list of vars can be found after `juseppe env` command.\n\n- `JUSEPPE_CERT_PATH` (`juseppe.certificate`)   \n  path of certificate (must be used in pair with private key prop). Defaults to *uc.crt* \n\n- `JUSEPPE_PRIVATE_KEY_PATH` (`juseppe.private.key`)   \n  path of private key (must be used in pair with cert). Defaults to *uc.key*\n\n- `JUSEPPE_PLUGINS_DIR` (`juseppe.plugins.dir`)   \n  where the plugins are. Searches only `*.hpi` and `*.jpi`. Defaults to *current working dir*\n\n- `JUSEPPE_SAVE_TO_DIR` (`juseppe.saveto.dir`)   \n  where to save generated json file. Defaults to *current working dir*\n\n- `JUSEPPE_UC_JSON_NAME` (`juseppe.uc.json.name`)   \n  name of generated update center json file. Defaults to `update-center.json`\n\n- `JUSEPPE_RELEASE_HISTORY_JSON_NAME` (`juseppe.release.history.json.name`)   \n  name of generated release-history json file. Defaults to `release-history.json`\n\n- `JUSEPPE_BASE_URI` (`juseppe.baseurl`)   \n  url to prepend for plugins download link in json. Defaults to `http://localhost:8080`\n\n- `JUSEPPE_UPDATE_CENTER_ID` (`juseppe.update.center.id`)   \n  id of the update center. Must be unique inside of jenkins. Defaults to `juseppe`\n\n- `JUSEPPE_BIND_PORT` (`juseppe.jetty.port`)   \n  port for juseppe file server. Defaults to `8080`\n\n- `JUSEPPE_BIND_HOST` (`juseppe.jetty.host`)   \n  hostname or address for juseppe file server. Defaults to `localhost`\n\n- `JUSEPPE_RECURSIVE_WATCH` (`juseppe.recursive.watch`)\n  watch for file changes recursively Defaults to `true`\n\nExample: \n\n`java -jar -Djuseppe.saveto.dir=/tmp/update/ juseppe.jar -w serve` or `JUSEPPE_SAVE_TO_DIR=/tmp/update/ java -jar juseppe.jar -w serve`\n\nProperties are overridden in order: *default value* -> *env vars* -> *system properties* -> *direct cli arguments* \n\n## How to connect Jenkins\n\nSite can be added with help of: \n    \n- [UpdateSites Manager plugin](https://wiki.jenkins-ci.org/display/JENKINS/UpdateSites+Manager+plugin) \n (Distance: 1.2156)",
    "rank_3_distance": 1.2156
  },
  {
    "step": "{'name': 'zip', 'raw_args': {'archive': 'true', 'dir': 'temp', 'glob': None, 'zipFile': 'CloudNet.zip'}}",
    "rank_1_name": "# Commons Compress API Plugin",
    "rank_1_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2345)",
    "rank_1_distance": 1.2345,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.3389)",
    "rank_2_distance": 1.3389,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5114)",
    "rank_3_distance": 1.5114
  },
  {
    "step": "{'content': \"sh 'rm -r temp/';\"}",
    "rank_1_name": "Jenkins DiskCheck Plugin",
    "rank_1_content": "Jenkins DiskCheck Plugin\n=============\n \nMotivation\n---------\n Disk run out of space while running a build , We do use Disk Usage plugin , but it checks for disk usage every hour also mark the slave offline without any notification which is not appropriate\n\nSolution :\n--------\n The plugin checks for disk available before starting a job and fail the build is the disk is below the Threshold ( You define the Threshold in a global parameter) , \n\n-------------\nAlso there is a Global Configuration Enable Disk Recycler if it's checked  and the disk space is low for a job , then it will delete everything in the current job workspace directory, \n (Distance: 1.4083)",
    "rank_1_distance": 1.4083,
    "rank_2_name": "# Comments Remover Jenkins plugin",
    "rank_2_content": "# Comments Remover Jenkins plugin\n\nThis plugin removes comments from source files for a number of programming languages. Required Python 3.6 on Jenkins server.\nA new build step is added: 'Invoke Comments Remover' which accepts files to process as input and creates uncommented\nversion of them. \n\nUser can specify Python path in global settings for the plugin (otherwise the one on the system PATH is used).\n\n### Contributors  \n\nDaniel DylƒÖg\n\n\n## For users\n\n### Global settings\n\nGo to Manage Jenkins -> Configure System to access them\n\n![settings](https://user-images.githubusercontent.com/9072987/30342487-630f98ce-97fa-11e7-8076-e7c02ad494f2.png \"Settings\")\n\n![settings](https://user-images.githubusercontent.com/9072987/30342530-814deb06-97fa-11e7-996f-a5020d6870aa.png \"Settings\")\n\n![settings](https://user-images.githubusercontent.com/9072987/30513656-199cf8fc-9b07-11e7-99e7-5a8cf530e763.png \"Settings\")\n\nThere is help section to provide examples:\n\n![settings](https://user-images.githubusercontent.com/9072987/30513578-1f1a5d5c-9b06-11e7-89c3-4297cec3147d.png \"Settings\")\n\n\n### Usage\n\nThe plugin can be used wherever build steps can be defined, e.g. Freestyle project\n\n![job](https://user-images.githubusercontent.com/9072987/30342535-8179a28c-97fa-11e7-8540-25d04aad24a9.png \"Job\")\n\nAdding build step:\n\n![build](https://user-images.githubusercontent.com/9072987/30342534-817803f0-97fa-11e7-98a0-da4f43bbcf30.png \"Build\")\n\n![build step](https://user-images.githubusercontent.com/9072987/30342536-817a7f86-97fa-11e7-99a5-37e9f255f0b6.png \"Build step\")\n\nThis part also has \"help\" section:\n\n![build step help](https://user-images.githubusercontent.com/9072987/30342537-81878802-97fa-11e7-8c8c-b64f20f2fb3e.png \"Build step help\")\n\n##### Example of build output and result:\n\n![build output](https://user-images.githubusercontent.com/9072987/30342538-81903aec-97fa-11e7-92dd-e5ad839d2a4c.png \"Build output\")\n\n![build result](https://user-images.githubusercontent.com/9072987/30342539-819254c6-97fa-11e7-8a65-998198cc2657.png \"Build result\")\n\n![build result](https://user-images.githubusercontent.com/9072987/30342540-81930aa6-97fa-11e7-85fa-7f934169025b.png \"Build result\")\n\n### Using as a shell/batch command script\nAlternatively, user can create plain script build step (`Execute shell` or `Execute Windows batch command`) and run `comments_remover.py` Python script\nmanually.\n\n![shell step](https://user-images.githubusercontent.com/9072987/30379725-bf93011a-9897-11e7-992a-874f7880d5c5.jpg \"Run shell build step\")\n\nComments Remover script is unpacked to JENKINS_HOME directory (which is available in script as environmental variable)\n\n![shell step output](https://user-images.githubusercontent.com/9072987/30379735-c522fc02-9897-11e7-9286-c3363f1c4a2b.jpg \"Execute shell build step output\")\n\nIf you use Jenkins Struct Plugin, this plugin has a shorthand defined: `commentsremover`.\n\n\n## For contributors\n\n### Updating plugin with a new version of Comments Remover\nCreate ZIP archive of all files required to run Comments Remover - in particular, `comments_remover.py` and `requirements.txt`. Put it in `src/main/resources`.\nThe plugin expects to find `comment_remover.py`  and `requirement.txt` on the top lever of the archive.\n\n### Debug\n`mvnDebug hpi:run`\n\nYou can attach Java Debugger to a local Java process of Jenkins.\n\n### Prepare plugin for distribution\n`mvn package`\n\nThe *.hpi file will be created in target/ directory.\nTo install manually on local Jenkins, copy it to $JENKINS_HOME/plugins directory.\n\n### Releasing new version to Jenkins Update Center\n`mvn release:prepare release:perform`\n\nFollow the instructions to assign new version number.\n\nYou must have an account on jenkins-ci.org with commit rights, and its credentials configured in maven settings:\n\n    <server>\n      <id>maven.jenkins-ci.org</id>\n      <username>...</username>\n      <password>...</password>\n    </server>\n\nMore info here:\n\nhttps://wiki.jenkins.io/display/JENKINS/Hosting+Plugins \n (Distance: 1.4394)",
    "rank_2_distance": 1.4394,
    "rank_3_name": "Jenkins Purge Job History Plugin",
    "rank_3_content": "Jenkins Purge Job History Plugin\n=====================\n\nThis plugin provides ability to purge all build history of;\n- Job\n- Pipeline\n- MultiBranch Job (Recursive Flag is Needed)\n- Jobs under a Folder (Recursive Flag is Needed)\n- All Job under Jenkins Instance (Recursive Flag is Needed)\n\nUsage\n=====================\nGo to a Job (Any type of) or a Folder and click on the \"Purge Build History\" link on the left menu.\n\nSelect none or all of the options.\n- Reset build number to 1: Resets the next build number 1 if all the builds are deleted.\n- Delete builds marked to be kept forever: Als delete any builds even they are marked to keep forever.\n- Recurse into sub-folders/sub-jobs: Recurse into all Jobs/Folders under the selected Job/Folder\n\nNote: If you click \"Purge Build History\" link on the main page of the Jenkins. Plugin will recurse into\nall Jobs/Folder and delete the builds depending on your selection.\n\nExample Screenshots;\n\n![](images/pjh1.png)\n\n![](images/pjh2.png)\n\nLogs\n=====================\nDepending on the Job/Folder and the selections, purge action can take long time. \nYou can follow the process from the Jenkins Logs \n (Distance: 1.4422)",
    "rank_3_distance": 1.4422
  },
  {
    "step": "{'content': \"echo 'Creating AutoUpdater.zip file...';\"}",
    "rank_1_name": "# text-file-operations-plugin",
    "rank_1_content": "# text-file-operations-plugin\nJenkins plugin which creates or updates text file with specified contents. \n (Distance: 1.2772)",
    "rank_1_distance": 1.2772,
    "rank_2_name": "crittercism-dsym-plugin",
    "rank_2_content": "crittercism-dsym-plugin\n=======================\n\nThis Jenkins CI plugin allows for a post build step that uploads dSYM files via Crittercism's API. The dSYM files are\nused for symbolication of iOS binaries in Crittercism crash logs. As such, this plugin is only helpful for Mac OSX\nhosts.\n\n**USING THE CRITTERCISM-DSYM-PLUGIN:**\n\n1. After installation, add a post-build step with the option 'Upload dSYM to Crittercism'.\n2. The plugin requires three fields:\n    a. **API Key** - Retrieve this from Crittercism's app dashboard, under 'Settings'.\n    b. **App ID** - Also available from the Crittercism app 'Settings'.\n    c. **dSYM zip** file - Path to the dSYM zip file to be uploaded. You may use environment variables. Ex: '${WORKSPACE}/build/MyApp-dSYM.zip'.\n\nThe plugin may encounter the following errors while uploading the dSYM file:\n\n**Error 400**: There was a problem with the dSYM file.\n**Error 404**: App was not found or the given tokens are incorrect.\n\n**Note:** Depending on your configuration, the dSYM zip file generated in your build steps may be named something like\n'MyApp-1.0-dSYM.zip', where 1.0 is your version number and may change with each build. To make things easier for the\npost-build steps, you can rename your dSYM zip file to something static, such as 'MyApp-dsym.zip'. To accomplish this,\nadd a build step that executes shell commands, such as:\n\n      mv ${WORKSPACE}/build/*dSYM.zip ${WORKSPACE}/build/MyApp-dSYM.zip\n\n\n**BUILDING THE CRITTERCISM-DSYM-PLUGIN:**\n\n1. Ensure you have maven 2 installed.\n1. Check out the code with git.\n2. In a console, cd to the checkout directory.\n3. To build, run 'mvn package'.\n4. To generate the *.hpi file, run 'mvn install'. The *.hpi file will be placed under the 'target' directory.\n\n**EXTENDING THE CRITTERCISM-DSYM-PLUGIN:**\n\nIf you'd like to contribute changes to the plugin, feel free to contact me via GitHub or message me on Twitter @mmh02.\n\n**REFERENCES:**\n\n1. **Critter Compendium**: http://support.crittercism.com/customer/portal/articles/699971-uploading-dsym-files-via-api \n (Distance: 1.3579)",
    "rank_2_distance": 1.3579,
    "rank_3_name": "# Commons Compress API Plugin",
    "rank_3_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.3737)",
    "rank_3_distance": 1.3737
  },
  {
    "step": "{'content': \"sh 'mkdir -p temp';\"}",
    "rank_1_name": "# Jenkins Pull-Request Tester Docker Image",
    "rank_1_content": "# Jenkins Pull-Request Tester Docker Image\n\nLets you test a pull-request on the Jenkins project in a clean environment.\n\n## How to use\n\n* Have a look at the [pull requests on the Jenkins project](https://github.com/jenkinsci/jenkins/pulls)\n* Select one, and copy its number (see on the URL)\n* Pass that number to the Docker container:\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 jenkins/core-pr-tester\n```\n\n### How to change the Jenkins home directory\n\nThe Jenkins home directory can be set with `JENKINS_HOME` as an environment variable.\n\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e JENKINS_HOME=/custom/directory/path jenkins/core-pr-tester\n```\n\n### How to merge with `master` branch\n\nAn additional environment variable `MERGE_WITH=` can be passed to merge the PR with any existing branch from the repository, before starting the build.\n\nNOTE: the merge **must** not have conflict, or the whole execution will fail and stop.\n\nExample:\n```shell\n$ docker run --rm -ti -p 8080:8080 -e ID=2200 -e MERGE_WITH=master jenkins/core-pr-tester\n```\n\n\n* Open your browser on http://localhost:8080 and test\n\n## Misc\n### WTF: that image is very big, and one layer is 500+ MB!\n\nTo accelerate testing at __run__time, the Docker image has been _built_ trying to cache\nas much as possible things required to build Jenkins.\nLike, for example, the Jenkins Maven dependencies both for 1.x and 2.x.\nThat results in a *very* big layer especially for that part.\n\nThe goal is that Maven has ideally to download no new dependency to build the requested\npull request. \n (Distance: 1.4209)",
    "rank_1_distance": 1.4209,
    "rank_2_name": "# Cross-platform shell",
    "rank_2_content": "# Cross-platform shell\n\nThis plugin defines a new build type to execute a shell command in a\ncross-platform environment.\n\n## Description\n\nCross platform shell executor.\n\nUsing Jenkins built-in \"Execute Windows batch command\" you can run\ncommands using the windows shell.\n\nUsing Jenkins built-in \"Execute shell\" you can run commands using unix\nshell.\n\nIf you need to run a job cross platform you cannot use the two standard\nexecutors provided by Jenkins. You need a \"build step\" that can be\nexecuted both in Windows and in Unix.\n\nThis plugin does exactly this: it takes a command, as the two standard\nbuild steps do, and executes it calling the correct shell depending on\nthe operating system running on the current job executor.\n\n## What it does...\n\n-   It runs any executable (with complete command line) available in the\n    system from current working dir (command must be in Path or in job's\n    workspace directory or subdirectory).\n-   Automatic conversion of file separator is done according to the\n    executing operating system.\n-   Variable style is converted according to the executing operating\n    system. E.g. `$JOBPARAM1` is converted to `%JOBPARAM1%` in the\n    command if the executing operating system is Windows.\n\nConstraints:\n\n-   the current working directory of the command execution is always the\n    job's workspace root.\n-   ./ must not be included in command line (use the configuration\n    switch provided to specify that command is in current working dir or\n    subdir).\n\nExamples:\n\n**Example 1: run executable + script with parameter**\n\nWrite your command in the \\*nix style:\n\n``` syntaxhighlighter-pre\nphp scripts/build.php $JOBPARAM1\n```\n\nIf the command runs on a \\*nix node, the command runs un-altered. If it\nruns on a Windows node, it is changed to:\n\n``` syntaxhighlighter-pre\nphp scripts\\build.php %JOBPARAM1%\n```\n\nNote that the file separator and variable naming convention have\nchanged.\n\n## ... and what it does not!\n\n### Command translation problem\n\n#### Description\n\nIt cannot translate any command! So you cannot write\n\n``` syntaxhighlighter-pre\nrm -rf bin\n```\n\nbecause on windows `rm` command is not available.\n\n#### Solution\n\nYou can wrap your commands in two scripts, one for windows and one for\nunix, each one calling the right command for the operating system:\n\n**clean**\n\n``` syntaxhighlighter-pre\nrm -rf bin\n```\n\n**clean.bat**\n\n``` syntaxhighlighter-pre\ndel /F /S bin\n```\n\nand then call `clean` using an XShell build step.\nThis will execute `clean` in unix and `clean.bat` in windows.\n\n## Notes\n\n-   in windows you can call clean and get clean.bat called, in unix you\n    can't (so the solutions above work);\n-   in unix you have to specify if the command is in the current working\n    dir (and if it is not available it will not be searched in PATH), in\n    windows you haven't to.\n\n## Build step configuration\n\nTo add a XShell build step\n\n-   click on the `Add build step` button and choose\n    `Invoke XShell script`;\n-   fill in the command line text;\n-   choose if the executable is in global Path or in workspace.\n\n![](docs/images/xshell-config.png)\n\n## Release Notes\n\n* For recent versions, see [GitHub Releases](https://github.com/jenkinsci/xshell-plugin/releases)\n* For versions 0.10 and older, see the [changelog archive](https://github.com/jenkinsci/xshell-plugin/blob/120.v1307d168def8/CHANGELOG.md) \n (Distance: 1.4676)",
    "rank_2_distance": 1.4676,
    "rank_3_name": "Jenkins plugin for building RPM packages in Copr.",
    "rank_3_content": "Jenkins plugin for building RPM packages in Copr. \n (Distance: 1.5013)",
    "rank_3_distance": 1.5013
  },
  {
    "step": "{'content': \"sh 'cp -r cloudnet/build/libs/*.jar temp/';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 0.9454)",
    "rank_1_distance": 0.9454,
    "rank_2_name": "# Node.js binary packaging for Maven",
    "rank_2_content": "# Node.js binary packaging for Maven\n\nSome of our builds require a functioning node.js environment. To make build portable,\nwe package required binaries as Maven artifact. This repository hosts the definitions\nto do that.\n\nThis repository does not use Maven release plugin. See sub-directories for how to deploy. \n (Distance: 1.1955)",
    "rank_2_distance": 1.1955,
    "rank_3_name": "Copyright 2002,2004 The Apache Software Foundation.",
    "rank_3_content": "Copyright 2002,2004 The Apache Software Foundation.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n       http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\nJelly\n=====\n\nThe primary build tool for this project is Maven. \nSo all you should need to do is install Maven and just type\n\n\tmaven\n\nSome common maven goals for building and testing this project are\n\n\tclean    : cleans up the build so new builds will start from fresh\n\ttest     : just run the unit tests\n\tjar      : compiles, runs unit tests and if they work build the jar\n\tjavadoc  : creates the javadoc\n\tsite     : build the complete documentation with reports, javadoc etc\n\tdist     : creates a distribution\n\n\nJelly contains a number of individual tag libraries which can be built \nby themselves by changing to the directory jelly-tags/foo and performing the\nabove commands to build the library you're interested in.\n\n\t\t\t\nFor more help using Maven please go to\n\n  http://maven.apache.org\n\nMaven also supports the auto-generation of Ant build files so\nyou may also be able to use Ant to build the code.\n\nEnjoy! \n (Distance: 1.2440)",
    "rank_3_distance": 1.244
  },
  {
    "step": "{'content': \"sh 'cp -r cloudnet-driver/build/libs/*.jar temp/';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 0.9616)",
    "rank_1_distance": 0.9616,
    "rank_2_name": "# Node.js binary packaging for Maven",
    "rank_2_content": "# Node.js binary packaging for Maven\n\nSome of our builds require a functioning node.js environment. To make build portable,\nwe package required binaries as Maven artifact. This repository hosts the definitions\nto do that.\n\nThis repository does not use Maven release plugin. See sub-directories for how to deploy. \n (Distance: 1.2212)",
    "rank_2_distance": 1.2212,
    "rank_3_name": "# SOASTA CloudTest Plugin for Jenkins",
    "rank_3_content": "# SOASTA CloudTest Plugin for Jenkins\n\nThe CloudTest Jenkins plugin provides the ability to:\n\n* easily run the MakeAppTouchTestable utility on an iOS or Android project\n* silently install an iOS app on a connected device\n* play CloudTest compositions and include the output in the build's test results\n\n### Pre-requisites\nThe CloudTest plug-in requires Jenkins 1.580.1 or later.\n\n### Future development on the plugin\n* mvn hpi:run -Djetty.port=8081\n* To debug from eclipse: Select debug configs, create a new maven debug config. Add the goal clean hpi:run, and jetty.port=8081 under param values. \n\n### Global Configuration Options\n\nBefore using the plug-in, you will need to provide the CloudTest server information, in the \"Manage Jenkins\" -&gt; \"Configure System\" page.\nThis includes the CloudTest URL and a set of credentials.  _We recommend creating a dedicated CloudTest account for Jenkins to use._\n\nIf you wish to deploy CloudTest test environments we also suggest you setup a CloudTest Server that points to CloudTest Manager, at https://cloudtestmanager.soasta.com/concerto/ . You will not need to create a dedicated CTM account, the Jenkins plugin will not log you out. \n\nThe CloudTest password is encrypted before saving it to disk.  It is also masked (e.g. \"\\*\\*\\*\\*\") in all output generated during builds.\n\n### Build Steps\n\nThe plug-in adds the following new build steps:\n\n##### Make App TouchTestable\nAdds the TouchTest Driver library to your app's source code or to your iOS ipa, app, or apk file.  For adding the TouchTest Driver library to the source, typically this build step is inserted right before the build step that compiles the app's code (e.g. before the Xcode build step for iOS, or before the \"Invoke Ant\" build step for Android).  If you are using an ipa or app file instead, an TouchTestable ipa will be created.  If you are using an apk file, an apk file will be created and returned.  You must provide the necessary provisioning profile and signing key so the resulting ipa can be properly installed onto an Apple device.\n\n##### Install iOS App on Device\nSilently installs an IPA file on one or more attached iOS devices.  This ensures that your tests run against the latest version of your app.  _NOTE: there is no Android version of this build step, because the Android SDK already provides this functionality (\"adb install\")._\n\n##### Play Composition\nExecutes a CloudTest composition, and saves the output in the build's test results.  You can include this build step multiple times if there are multiple compositions in your test suite.\n\n##### Start Grid\nStarts the grid with the specified CloudTest server, and name, and ensures that the object reaches a ready status. In the event that the grid fails to reach a ready status, it will be torn down and the build step will fail. \n\n##### Stop Grid\nTerminates the grid, and ensures that the grid reaches a terminated status. In the event that the grid fails to reach a terminated status, the build step will fail.\n\n##### Start RSDB\nStarts the RSDB with the specified CloudTest server, and name, and ensures that the RSDB reaches a ready status. In the event that the RSDB fails to reach a ready status, it will be torn down and the build step will fail. \n\n##### Stop RSDB\nTerminates the RSDB, and ensures that the RSDB reaches a terminated status. In the event that the grid fails to reach a terminated status, the build step will fail.  \n\n##### Test Environments \nNote that for test environments you will need to set up a CloudTest Server to point to CloudTest Manager https://cloudtestmanager.soasta.com/concerto/.  \n\n##### Start Test Environment\nStarts the test environment with the specified CloudTest server (Note this MUST be CTM), and name, and ensures that the object reaches a ready status. In the event that the test environment fails to reach a ready status, it will be torn down and the build step will fail. \n\n##### Stop Test Environment\nTerminates the test environment, and ensures that the test environment reaches a terminated status. In the event that the test environment fails to reach a terminated status, the build step will fail.\n\n\n##### Wake Up iOS Device\nWakes up one or more attached iOS devices, and opens Mobile Safari to the most recently-viewed page (e.g. TouchTest Agent).  This can optionally be used at the beginning of a build, to \"prep\" the devices for testing.  _NOTE: there is no Android version of this build step, because the Android SDK already provides this functionality._\n\n##### Reboot iOS Device\nReboots one or more attached iOS devices.  This can optionally be used at the end of a build, to \"reset\" for the next one.  _NOTE: there is no Android version of this build step, because the Android SDK already provides this functionality (\"adb reboot\")._ \n (Distance: 1.2382)",
    "rank_3_distance": 1.2382
  },
  {
    "step": "{'content': \"sh 'cp -r cloudnet-modules/**/build/libs/*.jar temp/';\"}",
    "rank_1_name": "# Literate CLI",
    "rank_1_content": "# Literate CLI\n\n This is a utility to check and validate your literate config (.cloudbees.md and README.md)\n\n\n# Build\n\nTo build the api locally:\n\n    mvn clean verify\n\nNow make the jar executable directly:\n\n    cat stub.sh  target/literate-api.jar > target/literate && chmod +x target/literate\n    \n# Usage\n\n\nput `target/literate` on your path and then:\n\n    literate\n\nwill show help.\n\nAn example:\n\n\nTo build this using literate: \n\n    literate . build | sh\n\nThis will validate the literate build (look for a .cloudbees.md and a README.md, this file, in this case) and then run the build section.\nYou can also put content in the .cloudbees.md - in which case, it will read it form there. \n (Distance: 0.9694)",
    "rank_1_distance": 0.9694,
    "rank_2_name": "# Node.js binary packaging for Maven",
    "rank_2_content": "# Node.js binary packaging for Maven\n\nSome of our builds require a functioning node.js environment. To make build portable,\nwe package required binaries as Maven artifact. This repository hosts the definitions\nto do that.\n\nThis repository does not use Maven release plugin. See sub-directories for how to deploy. \n (Distance: 1.1975)",
    "rank_2_distance": 1.1975,
    "rank_3_name": "jna-posix is a lightweight cross-platform POSIX emulation layer for Java, written in Java and leveraging the JNA library (https://jna.dev.java.net/).",
    "rank_3_content": "jna-posix is a lightweight cross-platform POSIX emulation layer for Java, written in Java and leveraging the JNA library (https://jna.dev.java.net/).\n\n= Building\n\nJNA should build fine from within NetBeans. Otherwise, copy the file nbproject/private/private.properties.tmpl to nbproject/private/private.properties and edit it to point at a local junit.jar. The one mentioned in the template file is in the default location on Mac OS X with Xcode installed. \n (Distance: 1.2462)",
    "rank_3_distance": 1.2462
  },
  {
    "step": "{'content': \"sh 'cp -r **/build/libs/*.cnl temp/';\"}",
    "rank_1_name": "# ‰∏ÉÁâõ‰∫ë Jenkins Êèí‰ª∂",
    "rank_1_content": "# ‰∏ÉÁâõ‰∫ë Jenkins Êèí‰ª∂\n\n## ÂÆâË£Ö\n\n‰ªé Jenkins Êèí‰ª∂ÂàóË°®‰∏≠ÊâæÂà∞ Qiniu Êèí‰ª∂ÔºåÂÆâË£Ö\n\n![‰∏ÉÁâõÊèí‰ª∂ÂÆâË£Ö](https://user-images.githubusercontent.com/321962/73899773-96ddd180-48c8-11ea-8395-4acf746e2817.png)\n\n## ÊûÑÂª∫\n\nÂÖãÈöÜ‰ª£Á†Å‰ªìÂ∫ì\n\n```bash\ngit clone git@github.com:jenkinsci/qiniu-plugin.git\n```\n\nËøõÂÖ•Êèí‰ª∂ÁõÆÂΩïÂπ∂ÊûÑÂª∫Êèí‰ª∂\n\n```bash\ncd qiniu-plugin\nmvn -Djenkins.version=2.217 -Duse-jenkins-bom package\n```\n\n## ÂÆâË£Ö‰æùËµñ\n\n- OpenJDK 1.8\n- Jenkins 2.217+\n\n## ‰ΩøÁî®Êèí‰ª∂\n\n### ÂÖ®Â±ÄÈÖçÁΩÆ\n\n- ÁÇπÂáª `Manage Jenkins` ËøõÂÖ•ÁÆ°ÁêÜÁïåÈù¢„ÄÇ\n- ÁÇπÂáª `Configure System` ËøõÂÖ•ÈÖçÁΩÆÁïåÈù¢„ÄÇ\n- ÁÇπÂáª `Artifact Management for Builds` ÊåâÈíÆÔºåÈÄâÊã© `Qiniu Artifact Manager`„ÄÇ\n- Âú®Âá∫Áé∞ÁöÑ `Qiniu Artifact Manager` ÈÖçÁΩÆÊ†è‰∏≠Ôºå‰æùÊ¨°Â°´ÂÜô `Access Key`Ôºå`Secret Key` Âíå `Bucket Name`ÔºåÊ≥®ÊÑè `Bucket Name` ÂøÖÈ°ªÊòØ‰∏ÉÁâõË¥¶Êà∑‰∏≠Â∑≤ÊúâÁöÑÂ≠òÂÇ®Á©∫Èó¥ÂêçÁß∞„ÄÇ\n- ÂèØ‰ª•ÁÇπÂáªÊóÅËæπÁöÑ `Advanced` ÊåâÈíÆÔºåÂ∞ÜÂá∫Áé∞Êõ¥Â§öÈÖçÁΩÆÈ°πÔºåËøôÈáåÁöÑÈÖçÁΩÆÈ°πÈÉΩÊòØÂèØÈÄâÁöÑ„ÄÇ\n\t- `Archive as infrequent storage object` Ë°®Á§∫‰ª•‰ΩéÈ¢ëÂ≠òÂÇ®ÁöÑÊñπÂºèÂ≠òÂÇ®ÂΩíÊ°£Êñá‰ª∂ÔºåÊé®ËçêÊâìÂºÄ„ÄÇ\n\t- `Object Name Prefix` Ë°®Á§∫Âú®Â≠òÂÇ®Á©∫Èó¥‰∏≠ÁöÑÂØπË±°ÂêçÁß∞ÂâçÁºÄ„ÄÇ\n\t- `Bucket Download Domain` Ë°®Á§∫Â≠òÂÇ®Á©∫Èó¥ÁªëÂÆöÁöÑ‰∏ãËΩΩÂüüÂêçÔºåÂ¶ÇÊûú‰∏çÂ°´ÔºåÂàô‰ªéÂ≠òÂÇ®Á©∫Èó¥‰∏≠ÈÄâÊã©‰∏Ä‰∏™‰∏ãËΩΩÂüüÂêç„ÄÇ‰ΩÜÂ¶ÇÊûúÂú®Â≠òÂÇ®Á©∫Èó¥‰∏≠Ê≤°ÊúâÁªëÂÆö‰ªª‰Ωï‰∏ãËΩΩÂüüÂêçÔºåÂàôËØ•È°πÂøÖÂ°´„ÄÇ\n\t- `Use HTTPs Protocol` Ë°®Á§∫ÊòØÂê¶‰ΩøÁî® HTTPS ‰º†ËæìÂçèËÆÆÔºåÈªòËÆ§‰ΩøÁî® HTTP ‰º†ËæìÂçèËÆÆ„ÄÇ\n\t- `Qiniu Uc Domain`Ôºå`Qiniu Rs Domain`Ôºå`Qiniu API Domain` ÈÉΩ‰ªÖÂú®‰ΩøÁî®‰∏ÉÁâõÁßÅÊúâ‰∫ëÊó∂ÊâçÊúâÂøÖË¶Å‰øÆÊîπÈÖçÁΩÆÔºåÈªòËÆ§‰ΩøÁî®ÂÖ¨Êúâ‰∫ëÁöÑÈÖçÁΩÆ„ÄÇ\n\t- `Apply for all jobs` Ë°®Á§∫ÂØπÊâÄÊúâ Job ÂÖ®ÈÉ®ÂêØÁî®‰∏ÉÁâõÂΩíÊ°£Â≠òÂÇ®„ÄÇ\n- ÁÇπÂáª `Save` ÊåâÈíÆ‰øùÂ≠ò„ÄÇ\n\n### ÈÖçÁΩÆ‰ªªÂä°\n\n- Â¶ÇÊûúÂú®ÂÖ®Â±ÄÈÖçÁΩÆ‰∏≠Ê≤°ÊúâÂãæÈÄâ `Apply for all jobs`ÔºåÂàôÈúÄË¶Å‰∏∫ÊØè‰∏™ÈúÄË¶ÅÁöÑ Job ÂêØÁî®‰∏ÉÁâõÂΩíÊ°£Â≠òÂÇ®ÔºåÈÖçÁΩÆÊñπÊ≥ïÂ¶Ç‰∏ãÔºö\n  - Âú® Job ÁöÑÈÖçÁΩÆÁïåÈù¢ÔºåÁÇπÂáª `Post-build Actions` ‰∏ãÊãâÊ°ÜÈáåÁöÑ `Archive the artifacts to Qiniu` ÈÄâÈ°πÔºåÂ∞ÜÊ∑ªÂä†‰∏Ä‰∏™ÈÖçÁΩÆÊ°Ü„ÄÇ\n  - Âú® `Files to archive` ÈáåËæìÂÖ•Ë¶ÅÂΩíÊ°£ÁöÑÊûÑÂª∫ÁªìÊûúË∑ØÂæÑÔºåÂèØ‰ª•‰ΩøÁî®ÈÄöÈÖçÁ¨¶„ÄÇ\n  - ÂèØ‰ª•ÁÇπÂáªÊóÅËæπÁöÑ `Advanced` ÊåâÈíÆÔºåÂ∞ÜÂá∫Áé∞Êõ¥Â§öÈÖçÁΩÆÈ°πÔºåËøôÈáåÁöÑÈÖçÁΩÆÈ°πÈÉΩÊòØÂèØÈÄâÁöÑ„ÄÇ\n    - `Excludes` Ë°®Á§∫Ë¶Å‰ªéÊûÑÂª∫ÁªìÊûú‰∏≠ÊéíÈô§‰∏ÄÈÉ®ÂàÜÊñá‰ª∂Ôºå‰æùÁÑ∂ÂèØ‰ª•‰ΩøÁî®ÈÄöÈÖçÁ¨¶„ÄÇ\n    - `Do not fail build if archiving returns nothing` Ë°®Á§∫ÂÖÅËÆ∏Á©∫ÁöÑÂΩíÊ°£Êñá‰ª∂„ÄÇ\n    - `Archive artifacts only if build is successful` Ë°®Á§∫‰ªÖÂΩìÊûÑÂª∫ÊàêÂäüÊâç‰ºöÂΩíÊ°£„ÄÇ\n    - `Use default excludes` Ë°®Á§∫Ëá™Âä®Â∞Ü SCM ËΩØ‰ª∂Áî®ÁöÑÈÖçÁΩÆÊñá‰ª∂ÊàñÊï∞ÊçÆÊñá‰ª∂ÊéíÈô§Ôºå‰∏ç‰∫àÂΩíÊ°£„ÄÇ\n    - `Treat include and exclude patterns as case sensitive` Ë°®Á§∫ÂΩíÊ°£ÁªìÊûúË∑ØÂæÑ‰∏∫Â§ßÂ∞èÂÜôÊïèÊÑü„ÄÇ\n  - ÁÇπÂáª `Save` ÊåâÈíÆ‰øùÂ≠ò„ÄÇ\n\n### ÊµÅÊ∞¥Á∫ø\n\n- Â¶ÇÊûúÂú®ÂÖ®Â±ÄÈÖçÁΩÆ‰∏≠Ê≤°ÊúâÂãæÈÄâ `Apply for all jobs`ÔºåÂàôÂú® Pipeline ÈÖçÁΩÆÁïåÈù¢‰∏≠ÔºåÂèØ‰ª•‰ΩøÁî® `archiveArtifactsToQiniu` Êåá‰ª§Â∞ÜÊñá‰ª∂ÂΩíÊ°£Âà∞‰∏ÉÁâõ‰∫ëÂ≠òÂÇ®„ÄÇ\n\n#### ËÑöÊú¨Ê°à‰æã\n\n```groovy\nnode {\n   stage('Build') {\n      sh '''\nrm -rf **\nmkdir -p {aa,bb,cc}/{dd,ee,ff}\nfor file in {aa,bb,cc}/{dd,ee,ff}/{gg,hh,ii}\ndo\n  dd if=/dev/urandom of=\"$file\" count=1024 bs=1\ndone\n      '''\n   }\n   stage('Results') {\n      archiveArtifactsToQiniu allowEmptyArchive: false, caseSensitive: false, excludeFilesGlob: '', includeFilesGlob: '**', onlyIfSuccessful: false, useDefaultExcludes: false\n   }\n}\n```\n\n#### ÂèÇÊï∞ÂàóË°®\n\n| ÂèÇÊï∞ÂêçÁß∞         | ÂèÇÊï∞Á±ªÂûã | ÊèèËø∞ | Â§áÊ≥®                                      |\n| ---------------- | -------- | -------- | ----------------------------------------- |\n| includeFilesGlob | Â≠óÁ¨¶‰∏≤   | Ë¶ÅÂΩíÊ°£ÁöÑÊûÑÂª∫ÁªìÊûúË∑ØÂæÑÔºåÂèØ‰ª•‰ΩøÁî®ÈÄöÈÖçÁ¨¶ |ÂøÖÂ°´ÔºåÂ¶ÇÊûúÂ∏åÊúõÂΩíÊ°£ÊâÄÊúâÊñá‰ª∂ÔºåÂàôÂ°´ÂÜô `'**`|\n| excludeFilesGlob | Â≠óÁ¨¶‰∏≤   | Ë¶Å‰ªéÊûÑÂª∫ÁªìÊûú‰∏≠ÊéíÈô§‰∏ÄÈÉ®ÂàÜÊñá‰ª∂Ôºå‰æùÁÑ∂ÂèØ‰ª•‰ΩøÁî®ÈÄöÈÖçÁ¨¶ | ÂøÖÂ°´ÔºåÂ¶ÇÊûú‰∏çÂ∏åÊúõÊéíÈô§‰ªª‰ΩïÊñá‰ª∂ÔºåÂàôÂ°´ÂÜô `''` |\n| allowEmptyArchive  | Â∏ÉÂ∞îÂÄº   | ÂÖÅËÆ∏Á©∫ÁöÑÂΩíÊ°£Êñá‰ª∂ | ÂøÖÂ°´ |\n| onlyIfSuccessful | Â∏ÉÂ∞îÂÄº | ‰ªÖÂΩìÊûÑÂª∫ÊàêÂäüÊâç‰ºöÂΩíÊ°£ | ÂøÖÂ°´ |\n| useDefaultExcludes | Â∏ÉÂ∞îÂÄº | Ëá™Âä®Â∞Ü SCM ËΩØ‰ª∂Áî®ÁöÑÈÖçÁΩÆÊñá‰ª∂ÊàñÊï∞ÊçÆÊñá‰ª∂ÊéíÈô§Ôºå‰∏ç‰∫àÂΩíÊ°£ |                                      |\n| caseSensitive | Â∏ÉÂ∞îÂÄº | ÂΩíÊ°£ÁªìÊûúË∑ØÂæÑ‰∏∫Â§ßÂ∞èÂÜôÊïèÊÑü |                                     | \n (Distance: 1.3098)",
    "rank_1_distance": 1.3098,
    "rank_2_name": "Cppcheck Plugin",
    "rank_2_content": "Cppcheck Plugin\n===============\n\nThis plugin generates the trend report for [CppCheck](https://sourceforge.net/p/cppcheck/wiki/Home/), a tool for static C/C++ code analysis.\n\n# Description\n\nThe Cppcheck plug-in scans for Cppcheck report files in the build workspace and reports the issues detected during static C/C++ code analysis.\n\nThe following features are provided by this plug-in:\n\n- Configuration of the files to scan after a build, build status evaluation and graph.\n- Trend reports showing the number of detected issues per type.\n- Results summary and results details including new issues and solved issues.\n- Listing of source code with highlighted issues.\n- Show all violations highlighted on a single page.\n- [Dashboard View](https://plugins.jenkins.io/dashboard-view/) portlet showing number of issues per job.\n- Remote access API ([REST API](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API)).\n- Works with most project/job types.\n\nPlease use the [Mailing Lists](https://www.jenkins.io/mailing-lists/) or [issue tracker](http://issues.jenkins.io/) to ask questions, create feature request or bug reports.\n\n# Usage\n\n- Install [Cppcheck](https://cppcheck.sourceforge.io/) tool to the system. If you use master Jenkins server and several build slaves, install it to all slaves that will run the analysis.\n- For each job configuration page:\n    - Add **Execute shell** build step to generate Cppcheck report or create the report file in your build scripts (Ant, Maven, Make, ...).\n    - Activate **Publish Cppcheck results** in **Post-build Actions** and provide at least the path to the generated Cppcheck report (`cppcheck.xml`).\n    - Optionally configure build status evaluation (**Advanced** button).\n    - Optionally configure graph (second level **Advanced** button).\n- **Always prefer new XML version 2 for the output format.** XML version 1 is supported in the plugin too, but Cppcheck doesn't report some issues with the legacy format.\n\n```sh\n# Minimal set of arguments\ncppcheck --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n\n# Enable all checks\ncppcheck --enable=all --inconclusive --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n\n# Analysis in multiple parallel threads\ncppcheck -j 4 --enable=all --inconclusive --xml --xml-version=2 SOURCE_DIRECTORY 2> cppcheck.xml\n```\n\n![](docs/images/1.15_config.png)\n\n## Report in a sub-directory of the workspace (advanced)\n\n**The plugin expects that all paths in the input report file (`cppcheck.xml`) are relative to the workspace root directory.** If the Cppcheck tool is executed from a sub-directory, the plugin will be unable to pair the paths in the report with the files on disk and **the source codes with the highlighted errors won't be available in the details**.\n\n```sh\n# In the workspace root directory\ncd SUBDIRECTORY\ncppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\n```\n\nSee the warning in the Console Output below. The invalid absolute path is missing `SUBDIRECTORY` between `workspace` and `INPUT_DIRECTORY` directories.\n\n```sh\n[Cppcheck] Starting the cppcheck analysis.\n[Cppcheck] Processing 1 files with the pattern '**/cppcheck.xml'.\n[Cppcheck] [WARNING] - The source file 'file:/SHORTENED/work/jobs/JOB_NAME/workspace/INPUT_DIRECTORY/mainwindow.cpp'\ndoesn't exist on the slave. The ability to display its source code has been removed.\n...\n```\n\nThere are basically two solutions for this issue. The first one is to execute the Cppcheck analysis directly from the workspace root directory to make `SUBDIRECTORY` part of the path.\n\n```sh\n# In the workspace root directory\n# cd SUBDIRECTORY\n# cppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\n\ncppcheck --enable=all --inconclusive --xml --xml-version=2 SUBDIRECTORY/INPUT_DIRECTORY 2> SUBDIRECTORY/cppcheck.xml\n```\n\nBut the above solution is not much suitable for larger projects that are using for example recursive GNU/Make based build scripts where the Cppcheck analysis is executed for each sub-project (sub-directory). It is better to modify the paths in the report files after they are created.\n\n```sh\n# In the workspace root directory\ncd SUBDIRECTORY\ncppcheck --enable=all --inconclusive --xml --xml-version=2 INPUT_DIRECTORY 2> cppcheck.xml\nsed -i 's%\\(<location file=\"\\)%\\1SUBDIRECTORY/%' cppcheck.xml\n```\n\nThe `sed` command above adds `SUBDIRECTORY/` to the beginning of the paths in the `location` elements. Note this method is not limited only to `sed`, you can use whatever tool that is able to replace string in a file.\n\n```xml\n<location file=\"INPUT_DIRECTORY/mainwindow.cpp\" line=\"1134\"/>\n<location file=\"SUBDIRECTORY/INPUT_DIRECTORY/mainwindow.cpp\" line=\"1134\"/>\n```\n\n# Remote access API ([REST API](https://wiki.jenkins-ci.org/display/JENKINS/Remote+access+API))\n\nUse the URLs below to access the Cppcheck specific data.\n\nDescription of possibilities\n\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api)\n\nData\n\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api/xml](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api/xml)\n- [http://SERVER/job/JOB\\_NAME/BUILD\\_NUMBER/cppcheckResult/api/json](http://server/job/JOB_NAME/BUILD_NUMBER/cppcheckResult/api/json)\n- etc.\n\nExample of XML data:\n\n```xml\n<cppcheckStatistics>\n    <numberErrorSeverity>0</numberErrorSeverity>\n    <numberInformationSeverity>7</numberInformationSeverity>\n    <numberNoCategorySeverity>0</numberNoCategorySeverity>\n    <numberPerformanceSeverity>20</numberPerformanceSeverity>\n    <numberPortabilitySeverity>0</numberPortabilitySeverity>\n    <numberStyleSeverity>22</numberStyleSeverity>\n    <numberTotal>54</numberTotal>\n    <numberWarningSeverity>5</numberWarningSeverity>\n</cppcheckStatistics>\n```\n\nExample of JSON data:\n\n```json\n{\n    \"numberErrorSeverity\" : 0,\n    \"numberInformationSeverity\" : 7,\n    \"numberNoCategorySeverity\" : 0,\n    \"numberPerformanceSeverity\" : 20,\n    \"numberPortabilitySeverity\" : 0,\n    \"numberStyleSeverity\" : 22,\n    \"numberTotal\" : 54,\n    \"numberWarningSeverity\" : 5\n}\n```\n\n# Known Issues\n\n[View these issues in Jira](https://issues.jenkins.io/browse/?jql=project+%3D+JENKINS+AND+status+in+%28Open%2C+%22In+Progress%22%2C+Reopened%29+AND+component+%3D+%27cppcheck-plugin%27) \n (Distance: 1.3105)",
    "rank_2_distance": 1.3105,
    "rank_3_name": "[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fcmakebuilder-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/cmakebuilder-plugin/job/master/)",
    "rank_3_content": "[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fcmakebuilder-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/cmakebuilder-plugin/job/master/)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/cmakebuilder.svg?color=blue)](https://plugins.jenkins.io/cmakebuilder)\n[Changelog](CHANGELOG.md)\n\n## About this plugin\n\nThis plugin can be used to build [cmake](https://cmake.org/) based projects\nwithin Jenkins with free-style or pipeline jobs.  \nIt provides\n\n-   a build-step that generates the build scripts from a *CMakeLists.txt* file\n and allows to run these with the appropriate build tool,\n-   a build-step to invoke some tools of the CMake suite\n (CMake/CPack/CTest) with arbitrary arguments plus\n-   automatic installation of the CMake tool suite,\n-   compatibility with Jenkins pipeline,\n\n------------------------------------------------------------------------\n\n### Screenshots (for the impatient)\n\nScreenshots showing the configuration can be viewed here [CMake Build\nConfiguration](https://wiki.jenkins.io/display/JENKINS/CMake+Build+Configuration),\nhere [Tool\nConfiguration](https://wiki.jenkins.io/display/JENKINS/Tool+Configuration)\nand here [Global\nConfiguration](https://wiki.jenkins.io/display/JENKINS/Global+Configuration).\n\n### Global configuration\n\nTo ease the pain of provisioning Jenkins worker nodes, the plugin can\ndownload a recent version of cmake on demand from\n[cmake.org](https://cmake.org/files/) and use that\nexclusively for a build. (Thanks to cmake.org for constantly providing\nportable/relocatable binaries for public download.)  \nJenkins admins may configure the available CMake versions on the [global\nconfiguration page](https://wiki.jenkins.io/display/JENKINS/Global+Configuration).\n\n### Build-script generator build step\n\nThis build step generates the build scripts from a CMakeLists.txt file\nand is able to run the scripts. It accepts the [following\nparameters](https://wiki.jenkins.io/display/JENKINS/CMake+Build+Configuration):\n\n1.  CMake version to use ‚Äî downloaded on demand, selectable versions get\n    configured on the [global configuration\n    page](https://wiki.jenkins.io/display/JENKINS/Global+Configuration)\n2.  CMake Buildscript Generator\n3.  Source directory\n4.  Build directory\n5.  CMake Build Type ‚Äî Debug/Release/...\n6.  Cache file ‚Äî to pre-populate cmake cache variables\n7.  Clean/Incremental build ‚Äî to clean the build directory prior to\n    buildscript generation\n8.  Pass arbitrary command-line arguments to cmake.\n\nTo perform the actual build, this build step tries to detect the actual\nbuild tool corresponding to the chosen CMake Buildscript Generator and\n\n-   Can run the actual build tool as a sub-build step\n    -   with arbitrary (but tool dependent) arguments\n    -   with extra system environment variables.\n-   Supports to run the build tool by an extra `execute-shell` or\n    `execute-batch` build step (in case auto detection fails).\n\n### CMake/CPack/CTest execution step\n\nThis build step allows to invoke the corresponding tool of the CMake\nsuite with arbitrary command-line arguments.  \nIt accepts the following [configuration parameters](https://wiki.jenkins.io/display/JENKINS/Tool+Configuration):\n\n1.  CMake version to use\n2.  Working directory\n3.  Command-line arguments.\n\n### Known Issues ([go to Tracker](https://issues.jenkins-ci.org/issues/?jql=project%20%3D%20JENKINS%20AND%20status%20%3D%20Open%20AND%20component%20%3D%20cmakebuilder-plugin))\n\nIssues are tracked at the [Jenkins issue Tracker](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20cmakebuilder-plugin).\n\n### Localizations\n1. Chinese localization is maintained in /jenkinsci/localization-zh-cn-plugin. \n (Distance: 1.3288)",
    "rank_3_distance": 1.3288
  },
  {
    "step": "{'name': 'zip', 'raw_args': {'archive': 'true', 'dir': 'temp', 'glob': None, 'zipFile': 'AutoUpdater.zip'}}",
    "rank_1_name": "# Commons Compress API Plugin",
    "rank_1_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2345)",
    "rank_1_distance": 1.2345,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.3389)",
    "rank_2_distance": 1.3389,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5114)",
    "rank_3_distance": 1.5114
  },
  {
    "step": "{'content': \"sh 'rm -r temp/';\"}",
    "rank_1_name": "Jenkins DiskCheck Plugin",
    "rank_1_content": "Jenkins DiskCheck Plugin\n=============\n \nMotivation\n---------\n Disk run out of space while running a build , We do use Disk Usage plugin , but it checks for disk usage every hour also mark the slave offline without any notification which is not appropriate\n\nSolution :\n--------\n The plugin checks for disk available before starting a job and fail the build is the disk is below the Threshold ( You define the Threshold in a global parameter) , \n\n-------------\nAlso there is a Global Configuration Enable Disk Recycler if it's checked  and the disk space is low for a job , then it will delete everything in the current job workspace directory, \n (Distance: 1.4083)",
    "rank_1_distance": 1.4083,
    "rank_2_name": "# Comments Remover Jenkins plugin",
    "rank_2_content": "# Comments Remover Jenkins plugin\n\nThis plugin removes comments from source files for a number of programming languages. Required Python 3.6 on Jenkins server.\nA new build step is added: 'Invoke Comments Remover' which accepts files to process as input and creates uncommented\nversion of them. \n\nUser can specify Python path in global settings for the plugin (otherwise the one on the system PATH is used).\n\n### Contributors  \n\nDaniel DylƒÖg\n\n\n## For users\n\n### Global settings\n\nGo to Manage Jenkins -> Configure System to access them\n\n![settings](https://user-images.githubusercontent.com/9072987/30342487-630f98ce-97fa-11e7-8076-e7c02ad494f2.png \"Settings\")\n\n![settings](https://user-images.githubusercontent.com/9072987/30342530-814deb06-97fa-11e7-996f-a5020d6870aa.png \"Settings\")\n\n![settings](https://user-images.githubusercontent.com/9072987/30513656-199cf8fc-9b07-11e7-99e7-5a8cf530e763.png \"Settings\")\n\nThere is help section to provide examples:\n\n![settings](https://user-images.githubusercontent.com/9072987/30513578-1f1a5d5c-9b06-11e7-89c3-4297cec3147d.png \"Settings\")\n\n\n### Usage\n\nThe plugin can be used wherever build steps can be defined, e.g. Freestyle project\n\n![job](https://user-images.githubusercontent.com/9072987/30342535-8179a28c-97fa-11e7-8540-25d04aad24a9.png \"Job\")\n\nAdding build step:\n\n![build](https://user-images.githubusercontent.com/9072987/30342534-817803f0-97fa-11e7-98a0-da4f43bbcf30.png \"Build\")\n\n![build step](https://user-images.githubusercontent.com/9072987/30342536-817a7f86-97fa-11e7-99a5-37e9f255f0b6.png \"Build step\")\n\nThis part also has \"help\" section:\n\n![build step help](https://user-images.githubusercontent.com/9072987/30342537-81878802-97fa-11e7-8c8c-b64f20f2fb3e.png \"Build step help\")\n\n##### Example of build output and result:\n\n![build output](https://user-images.githubusercontent.com/9072987/30342538-81903aec-97fa-11e7-92dd-e5ad839d2a4c.png \"Build output\")\n\n![build result](https://user-images.githubusercontent.com/9072987/30342539-819254c6-97fa-11e7-8a65-998198cc2657.png \"Build result\")\n\n![build result](https://user-images.githubusercontent.com/9072987/30342540-81930aa6-97fa-11e7-85fa-7f934169025b.png \"Build result\")\n\n### Using as a shell/batch command script\nAlternatively, user can create plain script build step (`Execute shell` or `Execute Windows batch command`) and run `comments_remover.py` Python script\nmanually.\n\n![shell step](https://user-images.githubusercontent.com/9072987/30379725-bf93011a-9897-11e7-992a-874f7880d5c5.jpg \"Run shell build step\")\n\nComments Remover script is unpacked to JENKINS_HOME directory (which is available in script as environmental variable)\n\n![shell step output](https://user-images.githubusercontent.com/9072987/30379735-c522fc02-9897-11e7-9286-c3363f1c4a2b.jpg \"Execute shell build step output\")\n\nIf you use Jenkins Struct Plugin, this plugin has a shorthand defined: `commentsremover`.\n\n\n## For contributors\n\n### Updating plugin with a new version of Comments Remover\nCreate ZIP archive of all files required to run Comments Remover - in particular, `comments_remover.py` and `requirements.txt`. Put it in `src/main/resources`.\nThe plugin expects to find `comment_remover.py`  and `requirement.txt` on the top lever of the archive.\n\n### Debug\n`mvnDebug hpi:run`\n\nYou can attach Java Debugger to a local Java process of Jenkins.\n\n### Prepare plugin for distribution\n`mvn package`\n\nThe *.hpi file will be created in target/ directory.\nTo install manually on local Jenkins, copy it to $JENKINS_HOME/plugins directory.\n\n### Releasing new version to Jenkins Update Center\n`mvn release:prepare release:perform`\n\nFollow the instructions to assign new version number.\n\nYou must have an account on jenkins-ci.org with commit rights, and its credentials configured in maven settings:\n\n    <server>\n      <id>maven.jenkins-ci.org</id>\n      <username>...</username>\n      <password>...</password>\n    </server>\n\nMore info here:\n\nhttps://wiki.jenkins.io/display/JENKINS/Hosting+Plugins \n (Distance: 1.4394)",
    "rank_2_distance": 1.4394,
    "rank_3_name": "Jenkins Purge Job History Plugin",
    "rank_3_content": "Jenkins Purge Job History Plugin\n=====================\n\nThis plugin provides ability to purge all build history of;\n- Job\n- Pipeline\n- MultiBranch Job (Recursive Flag is Needed)\n- Jobs under a Folder (Recursive Flag is Needed)\n- All Job under Jenkins Instance (Recursive Flag is Needed)\n\nUsage\n=====================\nGo to a Job (Any type of) or a Folder and click on the \"Purge Build History\" link on the left menu.\n\nSelect none or all of the options.\n- Reset build number to 1: Resets the next build number 1 if all the builds are deleted.\n- Delete builds marked to be kept forever: Als delete any builds even they are marked to keep forever.\n- Recurse into sub-folders/sub-jobs: Recurse into all Jobs/Folders under the selected Job/Folder\n\nNote: If you click \"Purge Build History\" link on the main page of the Jenkins. Plugin will recurse into\nall Jobs/Folder and delete the builds depending on your selection.\n\nExample Screenshots;\n\n![](images/pjh1.png)\n\n![](images/pjh2.png)\n\nLogs\n=====================\nDepending on the Job/Folder and the selections, purge action can take long time. \nYou can follow the process from the Jenkins Logs \n (Distance: 1.4422)",
    "rank_3_distance": 1.4422
  },
  {
    "step": "{'content': \"echo 'Publishing artifacts to Apache Archiva...';\"}",
    "rank_1_name": "# Artifact Promotion Plugin",
    "rank_1_content": "# Artifact Promotion Plugin\n\nThis is a simple plugin to *promote* artifacts. This is done on the artifact repository server and due to this the promotion process is specific to the used repository server.\n\nIn the first step, this plugin will support Sonatype Nexus OSS.\n\n## Artifact Promotion in Sonatype Nexus OSS\nNexus OSS doesn't support staging repositories like Nexus Pro. And, in addition, it does't support custom metadata.\nDue to this, an artifact promotion could only be handled by moving or copying an artifact from a staging repository into a 'release' repository (... or however you want to call your stage).\n\nSome guys say this is an anti pattern like in [this blog](https://www.stevesmith.tech/blog/pipeline-antipattern-artifact-promotion/) but there is no chance to do it the right way with Nexus OSS.\n\n# Usage\nThe plugin is in development and you should consider that some parts are subject to change. Future changes can effect the GUI, pipeline code, the Job DSL interface and the configuration file, resulting in breaking changes while upgrading. We'll try to ensure to mark such changes, but you'll use the plugin at your own risk.\n\n## Defining a Promotion Job using Job DSL\nThe plugin adds an extension to the Job DSL plugin to allow defining Artifact Promotion build steps in Job DSL scripts. The extension can be used with the Job DSL plugin version 1.69 or higher.\n\n```\njob {\n\tsteps {\n\t    artifactPromotion {\n\t      groupId(String groupId)\n\t      artifactId(String artifactId)\n\t      classifier(String classifier)\n\t      version(String version)\n\t      extension(String extension = \"jar\")\n\t      stagingRepository(String url, String user, String password, boolean skipDeletion = true)\n\t      releaseRepository(String url, String user, String password)\n\t      debug(boolean debug)\n\t    }\n\t}\n}\n```\n\nCreates a build step to promote an artifact from a staging to a release repository, unchecking *skipDeletion* which causes the deletion of the **whole** version with all files from the staging repository (this is disabled by default).\n\n```\njob('example') {\n\tsteps {\n\t\t// assumes default repo system (NexusOSS)\n\t    artifactPromotion {\n\t      groupId(\"com.example.test\")\n\t      artifactId(\"my-artifact\")\n\t      version(\"1.0.0\")\n\t      extension(\"zip\")\n\t      stagingRepository(\"http://nexus.myorg.com:8080/content/repositories/release-candidates\", \"foo\", \"s3cr3t\", false)\n\t      releaseRepository(\"http://nexus.myorg.com:8080/content/repositories/releases\", \"foo\", \"s3cr3t\")\n\t    }\n\t}\n}\n```\n\n## Pipeline\nFor usage within Pipeline scripts use the snippet generator or see the example below:\n\n### Scripted pipeline\n\n```\nstage('example') {\n    artifactPromotion (\n        promoterClass: 'org.jenkinsci.plugins.artifactpromotion.NexusOSSPromotor',\n        groupId: 'com.example.test',\n        artifactId: 'my-artifact',\n        version: '1.0.0',\n        extension: 'zip',\n        stagingRepository: 'http://nexus.myorg.com:8080/content/repositories/release-candidates',\n        stagingUser: 'foo',\n        stagingPW: 's3cr3t',\n        skipDeletion: true,\n        releaseRepository: 'http://nexus.myorg.com:8080/content/repositories/releases',\n        releaseUser: 'foo',\n        releasePW: 's3cr3t'\n    )\n}\n```\n\n### Declarative pipeline\n\n```\nstage('example') {\n    steps {\n        artifactPromotion (\n            promoterClass: 'org.jenkinsci.plugins.artifactpromotion.NexusOSSPromotor',\n\t    debug: false,\n            groupId: 'com.example.test',\n            artifactId: 'my-artifact',\n            version: '1.0.0',\n            extension: 'zip',\n            stagingRepository: 'http://nexus.myorg.com:8080/content/repositories/release-candidates',\n            stagingUser: 'foo',\n            stagingPW: 's3cr3t',\n            skipDeletion: true,\n            releaseRepository: 'http://nexus.myorg.com:8080/content/repositories/releases',\n            releaseUser: 'foo',\n            releasePW: 's3cr3t'\n        )\n    }\n}\n```\n\n## Artifact deletion\nWhen you promote artifacts from the staging to the release repository you may want to remove the artifact from staging. If your artifact only has one associated file, the plugin works as expected.\nAlthough if you're using classifiers, deletion removes all files associated with the artifact. The *Skip deletion* option preserves the files in the staging repository.\nUntick 'Skip deletion' only after you've promoted all the relevant files in previous steps. Use a promotion step for each classifier.\n\n**ATTENTION:** Use the possibility to delete files very carefully!\n\nBy default, the option *Skip deletion* is enabled.\n\n## Promoting POM artifacts\n\nStarting with version 0.5.2 it is possible to promote POM artifacts, like parent POM or multi module project descriptions, specifying the POM to be promoted and indicating the extension `pom`.\n\n```\nstage('example') {\n    artifactPromotion (\n        promoterClass: 'org.jenkinsci.plugins.artifactpromotion.NexusOSSPromotor',\n        groupId: 'com.example.test',\n        artifactId: 'my-pom-artifact',\n        version: '1.0.0',\n        extension: 'pom',\n        stagingRepository: 'http://nexus.myorg.com:8080/content/repositories/release-candidates',\n        stagingUser: 'foo',\n        stagingPW: 's3cr3t',\n        skipDeletion: true,\n        releaseRepository: 'http://nexus.myorg.com:8080/content/repositories/releases',\n        releaseUser: 'foo',\n        releasePW: 's3cr3t'\n    )\n}\n```\n\n# Contributions\nPlease feel free to contribute for other repository servers like\n\n* Nexus Pro\n* Artifactory and Artifactory Pro\n* Apache Archiva\n\nAdditionally, we've don't yet support the Jenkins Credentials Plugin.\n\nDon't hesitate to come up with your suggestions. Pull requests are preferred to speed up releases.\n\nChecking compatibility with new Jenkins versions is also greatly appreciated, reporting any problems and/or proposing any fixes.\n\n# History\n\n* 0.5.2 - Allow promoting POM artifacts. Fix debug functionality in the delete function.\n* 0.5.1 - Support for Jenkins Pipelines and minor bug fixes; upgrade dependency to Job DSL 1.69, Upgrade used Aether version, fixes some FindBugs findings\n* 0.4.0 - Support for Maven Classifiers\n* 0.3.6 - Support for Job DSL Plugin\n\n# Known Issues\n[ ] The plugin doesn't supports Jenkins Credentials plugin. Due to this, credentials are written and saved in plain text then using Job DSL oder Pipeline DSL. (Hint: I would very appreciate a pull request implementing this).\n\n# Useful links\n* Plugin Wiki page: [https://wiki.jenkins-ci.org/display/JENKINS/ArtifactPromotionPlugin](https://wiki.jenkins-ci.org/display/JENKINS/ArtifactPromotionPlugin) \n (Distance: 1.1747)",
    "rank_1_distance": 1.1747,
    "rank_2_name": "# Artifactz.io plugin for Jenkins",
    "rank_2_content": "# Artifactz.io plugin for Jenkins\n\nJenkins plugin to submit or retrieve artifact details to and from Artifactz.io server.\n\nThe Artifactz.io helps to track versions of the artifacts such as Jar(War/Ear) files or Docker Images through various stages of the SDLC.\n\n## Usage\nIn order to call the plugin method add the following to the pipeline:\n```\n   publishArtifact name: '<artifact name>',\n                   token: '<optional API token>',\n                   description: '<artifact description>',\n                   type: '<artifact type>',\n                   flow: '<flow name>',\n                   stage: '<stage>',\n                   stageDescription: '<stage description>',\n                   groupId: '<java artifact group Id>',\n                   artifactId: '<java artifact name, i.e. artifact Id>',\n                   version: \"<version>\"\n                    \n// or                     \n   step([$class: 'PublishArtifactVersionBuildStep',\n                        token: '<optional API token>',\n                        name: '<artifact name>',\n                        description: '<artifact description>',\n                        type: '<artifact type>',\n                        flow: '<flow name>',\n                        stage: '<stage>',\n                        stageDescription: '<stage description>',\n                        groupId: '<java artifact group Id>',\n                        artifactId: '<java artifact name, i.e. artifact Id>',\n                        version: \"<version>\"])\n```\n\n| Parameter        | Description                | Notes                                                                                                                                                                                                      |\n|------------------|----------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| token            | Artifactz.io API token     | The optional token with 'urn:artifactor:write' scope                                                                                                                                                       |\n| stage            | The SDLC stage             | The stage in the process where the version in question is being deployed                                                                                                                                   |\n| stageDescription | The SDLC stage description | The above stage description (optional)                                                                                                                                                                     |\n| name             | Artifact Name              | A unique name that identifies an artifact, e.g. artifactor-plugin                                                                                                                                          |\n| description      | Artifact Description       | An artifact description (optional)                                                                                                                                                                         |\n| type             | An artifact type           | Allowed values 'JAR', 'WAR', 'EAR', 'DockerImage'                                                                                                                                                          |\n| flow             | The Flow name              | The name of the flow if any, which the above stage is associated with. Bear in mind that stage can be associated with the number of flows or it could be used without association with the flow (optional) |\n| groupId          | Java Group Id              | The maven group Id (mandatory for Java artifacts, optional for the others)                                                                                                                                 |\n| artifactId       | Java Artifact Id           | The maven artifact name (mandatory for Java artifacts, optional for the others)                                                                                                                            |\n| version          | A version                  | The version of the artifact                                                                                                                                                                                |\n\nAny parameters can include variables.\n\nFor example:\n```\n   step([$class: 'PublishArtifactVersionBuildStep',\n                        token: \"${ARTIFACTZ_TOKEN}\",\n                        name: 'document-manager-ui',\n                        type: 'DockerImage',\n                        stage: 'uat',\n                        flow: 'standard',\n                        version: \"1.0.0.${BUILD_NUMBER}\"])\n// or\n   publishArtifact name: 'document-manager-ui',\n                    type: 'DockerImage',\n                    stage: 'uat',\n                    flow: 'standard',\n                    version: \"1.0.0.${BUILD_NUMBER}\"\n```\nTo push artifact through the flow use the following step. If successful, the step will store the pushed version in the \nspecified variable.\n```\n   step([$class: 'PushArtifactVersionBuildStep',\n                        token: '<optional API token>', \n                        name: '<artifact name>',\n                        stage: '<stage>',\n                        version: \"<version>\",\n                        variableName: '<name of the variable to store pushed version>'])\n// or\n   def version = pushArtifact token: '<optional API token>', \n                              name: '<artifact name>',\n                              stage: '<stage>',\n                              version: \"<version>\"\n```\n\n| Parameter    | Description            | Notes                                                                                               |\n|--------------|------------------------|-----------------------------------------------------------------------------------------------------|\n| token        | Artifactz.io API token | The optional token with 'urn:artifactor:write' scope                                                |\n| name         | Artifact name          | The name of the artifact to push, e.g. artifactor-plugin                                            |\n| stage        | The SDLC stage         | The stage in the process from where the version will be pushed                                      |\n| version      | Artifact version       | The artifact version to push (optional, if omitted the current version at the stage will be pushed) |\n| variableName | Variable Name          | The variable name where the pushed version will be stored, default ARTIFACTZ_VERSION                |\n\nFor example:\n```\n   step([$class: 'PushArtifactVersionBuildStep',\n                        token: \"${ARTIFACTZ_TOKEN}\",                   \n                        name: 'document-manager-ui',\n                        stage: 'uat',\n                        version: \"1.0.0.${BUILD_NUMBER}\"])\n// or\n   def version = pushVersion name: 'document-manager-ui',\n                            stage: 'uat',\n                            version: \"1.0.0.${BUILD_NUMBER}\"               \n```\n\nIn order to use the artifact retrieval function of the plugin the following step can be used:\n```\n    def result = retrieveArtifacts token: '<optional API token>', stage: '<stage>', names: ['<artifact name>']\n```\n| Parameter | Description                     | Notes                                                                    |\n|-----------|---------------------------------|--------------------------------------------------------------------------|\n| token     | Artifactz.io API token          | The optional token with 'urn:artifactor:read' scope                      |\n| stage     | The SDLC stage                  | The stage in the process where the version in question is being deployed |\n| names     | The array of the artifact names | e.g. artifactor-plugin                                                   |\n\nFor example:\n```\n    def result = retrieveArtifacts token: \"${ARTIFACTZ_TOKEN}\", stage: 'uat', names: ['document-manager-ui']\n```\n\n## Testing\nTo start test Jenkins environment run the following command `mvn hpi:run`.\nOnce Jenkins is up and running it can be accessed at http://localhost:8080/jenkins \n (Distance: 1.1998)",
    "rank_2_distance": 1.1998,
    "rank_3_name": "archived-artifact-url-viewer",
    "rank_3_content": "archived-artifact-url-viewer\n============================\n\nJenkins plugin to view contents of a file inside a zip or jar file under a subdirectory of artifacts directory of a build\nThe url to access a file inside a zip or jar archive within the artifact folder of a build is as follows\n\n/archivedArtifacts/artifact/&lt;job_name&gt;/&lt;build_number/&lt;relative location of zip or jarfile within artifact folder&gt;/&lt;location of file within archive&gt;\nEx: \n\nhttp://&lt;jenkins_url&gt;/archivedArtifacts/artifact/Build%20-%20Dev/10526/junit-logs.zip/junit.log \n (Distance: 1.2165)",
    "rank_3_distance": 1.2165
  },
  {
    "step": "{'name': 'configFileProvider', 'raw_args': '[configFile(fileId: \"e94f788c-1d9c-48d4-b9a9-8286ff68275e\", targetLocation: \\'gradle.properties\\')]', 'raw_block': \"sh './gradlew publish';\"}",
    "rank_1_name": "# DEPRECATED, don't use!!!!!",
    "rank_1_content": "# DEPRECATED, don't use!!!!!\n\n\nConfig Provider Model for Configfile Provider Plugin\n---\n\nThis library ***used to be*** the model for the [config-file-provider-plugin](https://wiki.jenkins-ci.org/display/JENKINS/Config+File+Provider+Plugin) \n\n***The two repos got merged into one and this repo is not used anymore!!!*** \n (Distance: 1.1405)",
    "rank_1_distance": 1.1405,
    "rank_2_name": "Config File Provider plugin for Jenkins",
    "rank_2_content": "Config File Provider plugin for Jenkins\n=======================================\n\nimage:https://img.shields.io/jenkins/plugin/v/config-file-provider.svg[link=\"https://plugins.jenkins.io/config-file-provider\"]\nimage:https://img.shields.io/github/release/jenkinsci/config-file-provider-plugin.svg?label=changelog[link=\"https://github.com/jenkinsci/config-file-provider-plugin/releases/latest\"]\nimage:https://img.shields.io/jenkins/plugin/i/config-file-provider.svg?color=blue[link=\"https://plugins.jenkins.io/config-file-provider\"]\n\nAdds the ability to provide configuration files (i.e., settings.xml for maven, XML, groovy, custom files, etc.)\nloaded through the Jenkins UI which will be copied to the job's workspace.\n\n== How it works\n\nIt will allow you to copy various similar configuration files to all\nyour nodes. It also adds the ability to edit those files through the\nJenkins UI.\n\n=== File Types\n\nIn general, you can manage whatever file format you like with this\nplugin (except binary), but the UI provides some advanced editing\nsupport for the following file types:\n\n* Maven settings.xml (user and global)\n* Plain XML\n* Groovy\n* JSON\n* Custom (plain text)\n\n=== Load your configuration file content.\n\nChoose the \"Managed files\" in the administration home:\n\nimage:docs/images/managed-files.png[image]\n\nEdit an existing file or add a new file:\n\nimage:docs/images/cfg-files.png[image]\n\nChoose the configuration type:\n\nimage:docs/images/new_file.jpg[image]\n\nEdit the content:\n\nimage:docs/images/edit.png.jpg[image]\n\nConfigure the Maven plugin to use it:\n\nimage:docs/images/maven-plugin.png.jpg[image]\n\nProvide any config file to a project\n\nimage:docs/images/add_file.jpg[image]\n\n=== Maven Server Credentials (since 2.7)\n\nThe file types '_Global Maven settings.xml_' and '_Maven settings.xml_'\nhave built-in support for the\nhttps://plugins.jenkins.io/credentials/[Credentials\nPlugin]. When the plugin serves the _settings.xml_ to the maven\nexecution, the credentials get injected. *This functionality is only\navailable in the maven builder (e.g. for freestyle projects) and maven\nproject type*. +\nAfter installation of the\nhttps://plugins.jenkins.io/config-file-provider/[Config\nFile Provider Plugin], a new Credentials Specification is available and\ncan be used to mark credentials domain to contain credentials valid for\nmaven server ids. The \"Maven serverId\" Specification allows you to\ndefine serverId patterns - this will make it easier to select the\ncorrect credential when configuring the _settings.xml_. +\nimage:docs/images/Screen_Shot_2013-11-03_at_18.30.48.png[image,height=300]\n\nThe current implementation supports \"Username with\npassword\"-credentials. If your passwords are\nhttps://maven.apache.org/guides/mini/guide-encryption.html[encrypted by\nmaven], you can store the encrypted passwords in the same configuration\n- but you have to make sure the _settings-security.xml_ is available to\nthe job, unfortunately maven does not yet provide a way to pass this\nfile as well, so this file has to be located at the original location\nrequired by maven (<user.home>/.m2)\n\nWhen configuring the _settings.xml_ (user or global), you can add as\nmany credential mappings as you wish, as soon as you add at least one\nserverId-credentials mapping to a config file all server configs in the\nsame file will be removed and replaced by the ones you have explicitly\nadded - this way you are sure which credentials finally end up in the\nfile used by the jobs.\n\nThis example will add two server configurations to your _settings.xml,_\none called 'artifactory.prod' (using 'release_user' with password) and\nthe other 'artifactory.dev' (using 'snapshot_user' with password). +\nimage:docs/images/Screen_Shot_2013-11-03_at_18.33.56.png[image,height=300]\n\nNow provided _settings.xml_ with credentials can be used in the project\nand builder configuration. A common practice would be to define a global\n_settings.xml_ to provide credentials and repository definitions and\nhave local (default) _settings.xml_ define the location of the local\nrepo.\n\nimage:docs/images/Screen_Shot_2013-07-28_at_16.23.32.png[image]\n\n== Using the configuration files in Jenkins Pipelines\n\nThe configuration files can be used in Jenkins pipeline.\n\nThe configuration file can either be stored in a desired file path or\ncan be stored in a temporary file identified by the given\n\"`+variable+`\".\n\nSample for a Maven build:\n\n[source,groovy]\n----\nnode {\n\n    git url: 'https://github.com/spring-projects/spring-petclinic.git'\n\n    // install Maven and add it to the path\n    env.PATH = \"${tool 'M3'}/bin:${env.PATH}\"\n\n    configFileProvider(\n        [configFile(fileId: 'maven-settings', variable: 'MAVEN_SETTINGS')]) {\n        sh 'mvn -s $MAVEN_SETTINGS clean package'\n    }\n\n}\n----\n\nThe \"Pipeline Syntax\" page helps to write the proper syntax.\n\nimage:docs/images/pipeline-syntax-screenshot.png[image]\n\n== Plugins adding support for new file types\n\n* link:https://plugins.jenkins.io/managed-scripts/[Managed\nScript Plugin] ‚Äî Managed scripts are shell scripts which\nare managed centrally by an administrator and can be referenced as a\nbuild step within jobs.\n\n== Extension Point\n\nThis plugin makes use of the\n`org.jenkinsci.lib.configprovider.ConfigProvider` ExtensionPoint. If you\nneed to have easy administration of a new file type, just implement this\nExtensionPoint and you're ready to go.\n\nThe easiest way to do so is to extend\n`org.jenkinsci.lib.configprovider.AbstractConfigProviderImpl` - have a\nlook at\n`org.jenkinsci.plugins.managedscripts.ScriptConfig.ScriptConfigProvider`\n\n\n#### builds are currently executed on:\n\n* link:https://ci.jenkins.io/blue/organizations/jenkins/Plugins%2Fconfig-file-provider-plugin/[jenkins ci] \n (Distance: 1.1790)",
    "rank_2_distance": 1.179,
    "rank_3_name": "# CONS3RT Plugin",
    "rank_3_content": "# CONS3RT Plugin\n\nThe CONS3RT jenkins plugin provides users with the ability to create CONS3RT software assets as part of the jenkins build. The plugin also allows for users to upload their asset, created as a function of their build, to a CONS3RT site. This allows for the creation of new assets or the update of existing assets as part of a CI pipeline. In addition to asset creation or update, users can also leverage the deployment run option in the post-build action section of the plugin to launch new deployment runs that leverage their newly updated asset(s). The CONS3RT plugin allows for the full customization and configuration of deployment runs.\n\n# Post-Build Step:\nIt is here that a user can define an asset for creation. The asset to be created must have a name defined (this name will be reflected in the CONS3RT site following upload). In addition, a user can specify a description and versioning information about their asset. The resource requirements of an asset can also be defined, denoting what things are required on the underlying system for the asset to run, including platform, architecture, bits, cpu, ram, and finally storage. Each of these fields can either be set or omitted and will serve to determine what systems the asset can run on once it has been imported into the CONS3RT site. Lastly, the contents of the asset are defined.\n\n# Post-Build Action:\nIn order to use this portion of the CONS3RT plugin, a site configiration must first be added. This site configuration defines a user account and CONS3RT site to connect to. A site url and ReST Token must be provided. The ReST Token must taken the form of a \"secret text\" jenkins credential. Based on the site being connected to, either a username or certificate must be provided. A certificate must be provided as a \"certificate\" jenkins credential where as a username can be provided as plain test. Once all of the above items have been provided, connection to the site can be tested via the \"Check Connection\" button. \n (Distance: 1.2701)",
    "rank_3_distance": 1.2701
  },
  {
    "step": "{'content': \"echo 'Creating javadoc...';\"}",
    "rank_1_name": "Copyright 2002,2004 The Apache Software Foundation.",
    "rank_1_content": "Copyright 2002,2004 The Apache Software Foundation.\n  \n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n  \n       http://www.apache.org/licenses/LICENSE-2.0\n  \n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\nJelly\n=====\n\nThe primary build tool for this project is Maven. \nSo all you should need to do is install Maven and just type\n\n\tmaven\n\nSome common maven goals for building and testing this project are\n\n\tclean    : cleans up the build so new builds will start from fresh\n\ttest     : just run the unit tests\n\tjar      : compiles, runs unit tests and if they work build the jar\n\tjavadoc  : creates the javadoc\n\tsite     : build the complete documentation with reports, javadoc etc\n\tdist     : creates a distribution\n\n\nJelly contains a number of individual tag libraries which can be built \nby themselves by changing to the directory jelly-tags/foo and performing the\nabove commands to build the library you're interested in.\n\n\t\t\t\nFor more help using Maven please go to\n\n  http://maven.apache.org\n\nMaven also supports the auto-generation of Ant build files so\nyou may also be able to use Ant to build the code.\n\nEnjoy! \n (Distance: 1.0979)",
    "rank_1_distance": 1.0979,
    "rank_2_name": "JDCloud CodeDeploy Plugin",
    "rank_2_content": "JDCloud CodeDeploy Plugin\n========================= \n\n\nIntroduction\n------------\n\nThis plugin provides a \"post-build\" step for JDCloud CodeDeploy.\n\nDevelopment\n-----------\n\nStart the local Jenkins instance:\n\n    mvn hpi:run\n\n\t\nHow to install\n--------------\n\nRun \n\n\tmvn hpi:hpi\n\t\nto create the plugin .hpi file.\n\n\nTo install:\n\n1. copy the resulting ./target/jd-codedeploy.hpi file to the $JENKINS_HOME/plugins directory. Don't forget to restart Jenkins afterwards.\n\t\n2. or use the plugin management console (http://example.com:8080/pluginManager/advanced) to upload the hpi file. You have to restart Jenkins in order to find the plugin in the installed plugins list.\n\nLicense\n-------\n\nThis plugin is licensed under [Apache 2.0](LICENSE). \n (Distance: 1.1520)",
    "rank_2_distance": 1.152,
    "rank_3_name": "This is a very small but somewhat real Ant project.",
    "rank_3_content": "This is a very small but somewhat real Ant project.\nIt can produce a jar, generate a javadoc, executes unit tests, and so on.\n\nThis is useful for demoing basics of Hudson. \n (Distance: 1.2215)",
    "rank_3_distance": 1.2215
  },
  {
    "step": "{'content': \"sh './gradlew allJavadoc';\"}",
    "rank_1_name": "# hello-world-scala-plugin",
    "rank_1_content": "# hello-world-scala-plugin\n\nA straight forward reimplementation of the Java/Maven Jenkins Hello Worl Plugin in Scala/Gradle\n\n\nSimply clone and run\n```\n./gradlew server\n``` \n (Distance: 1.2602)",
    "rank_1_distance": 1.2602,
    "rank_2_name": "# Gradle JTE Plugin",
    "rank_2_content": "# Gradle JTE Plugin\n\nThis gradle plugin packages a library source for the [Jenkins Templating Engine](https://github.com/jenkinsci/templating-engine-plugin) into a Jenkins Plugin.\n\n## Configuration\n\nThis plugin relies on the [Gradle JPI Plugin](https://github.com/jenkinsci/gradle-jpi-plugin) to do a lot of the heavy lifting. As such, you'll need to configure both a `jte{}` block and a `jenkinsPlugin{}` block.\n\n```groovy\njte{\n    // the directory where the libraries are located\n    // default value: a directory called libraries\n    baseDirectory = file(\"libraries\")\n\n    // the identifier for this plugin when configuring its use\n    // via Job DSL or JCasC. If left empty, no `@Symbol` will \n    // be configured. \n    // default value: null \n    pluginSymbol = \"myCustomSymbol\"\n    \n    // the directory where this plugin will place the generated\n    // Jenkins Plugin's source code. This should only be used\n    // for testing and debugging. The default behavior is to \n    // create a temporary directory.\n    // default value: null\n    pluginGenerationDirectory = file(\"${project.buildDir}/generated-plugin\")\n    \n    // the minimum version of JTE the generated plugin requires\n    // must be greater than version 2.0\n    jteVersion = '2.0'\n}\n\n// for a full list of configuration options, check out the\n// gradle-jpi-plugin repository. \njenkinsPlugin{\n    // version of Jenkins core this plugin depends on, must be 1.420 or later\n    jenkinsVersion = '1.420'\n\n    // ID of the plugin, defaults to the project name without trailing '-plugin'\n    shortName = 'hello-world'\n\n    // human-readable name of plugin\n    // JTE note: this will be what populates the drop down for selecting\n    //           this plugin as a library source.\n    displayName = 'Hello World plugin built with Gradle'\n}\n``` \n (Distance: 1.2925)",
    "rank_2_distance": 1.2925,
    "rank_3_name": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon.",
    "rank_3_content": "This plugin prevents the [ProcessTreeKiller](https://wiki.jenkins.io/display/JENKINS/ProcessTreeKiller) from killing the Gradle daemon. \n (Distance: 1.3228)",
    "rank_3_distance": 1.3228
  },
  {
    "step": "{'name': 'zip', 'raw_args': {'archive': 'true', 'dir': 'build/javadoc', 'glob': None, 'zipFile': 'Javadoc.zip'}}",
    "rank_1_name": "# Commons Compress API Plugin",
    "rank_1_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2345)",
    "rank_1_distance": 1.2345,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.3389)",
    "rank_2_distance": 1.3389,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5114)",
    "rank_3_distance": 1.5114
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': '**/build/libs/*.jar'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': '**/build/libs/*.cnl'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean checkstyle:check -Dcheckstyle.failOnViolation=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean license:check-file-header -Dlicence-check.failOnMissingHeader=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(\\n                   credentialsId: 'artifact-signing-key-password',\\n                   variable: 'SIGN_KEY')]) {\\n                        configFileProvider(\\n                            [configFile(fileId: '10647dc3-5621-463b-a290-85290f0ad119', variable: 'MAVEN_SETTINGS')]\", 'raw_block': \"sh 'mvn -s $MAVEN_SETTINGS clean deploy -P deploy -DskipTests -Dcheckstyle.failOnViolation=true -Dgpg.passphrase=$SIGN_KEY'\\n                        }\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.description = \"${env.COMMIT_HASH}-${params.CHANNEL}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"docker.build('autoconsent/build')\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'sh \"\"\"\\n                        aws s3 cp rules/rules.min.json.br s3://cdn.cliqz.com/autoconsent/rules/${env.COMMIT_HASH}.json.br \\\\\\n                            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers \\\\\\n                            --content-encoding br \\\\\\n                            --content-type application/json \\\\\\n                            --cache-control \"immutable\"\\n\\n                        aws s3 cp rules/rules.min.json.gz s3://cdn.cliqz.com/autoconsent/rules/${env.COMMIT_HASH}.json.gz \\\\\\n                            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers \\\\\\n                            --content-encoding gzip \\\\\\n                            --content-type application/json \\\\\\n                            --cache-control \"immutable\"\\n                    \"\"\"\\n\\n                    def fileName = params.CHANNEL == \\'staging\\' ? \\'staging-config.json\\' : \\'config.json\\'\\n                    sh \"\"\"\\n                        echo \\'{\"ruleVersion\":\"${env.COMMIT_HASH}\",\"disabled\":[]}\\' > ${fileName}\\n                        aws s3 cp ${fileName} s3://cdn.cliqz.com/autoconsent/${fileName} \\\\\\n                            --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers \\\\\\n                            --content-type application/json \\\\\\n                            --cache-control \"max-age=3600\"\\n                    \"\"\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'junit', 'raw_args': '**/target/surefire-reports/*.xml'}",
    "rank_1_name": "This plugin publishes test results of an execution of a testing tool in Jenkins.",
    "rank_1_content": "This plugin publishes test results of an execution of a testing tool in Jenkins.\n\n![](docs/images/xunit_features.JPG)\n\n# Features\n\n-   Records xUnit tests\n-   Mark the build unstable or fail according to threshold values\n\n# Supported tools\n\n## Embedded tools\n\n* JUnit (supported schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd) and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd))\n* [AUnit](http://libre.adacore.com/libre/tools/aunit/)\n* [MSTest](http://en.wikipedia.org/wiki/MSTest) (imported from [MSTest Plugin](https://github.com/jenkinsci/mstest-plugin))\n* [NUnit](http://www.nunit.org/index.php) (imported from [NUnit Plugin](https://github.com/jenkinsci/nunit-plugin))\n* [UnitTest++](http://unittest-cpp.sourceforge.net/)\n* [Boost Test Library](http://www.boost.org/doc/libs/1_39_0/libs/test/doc/html/index.html)\n* [PHPUnit](http://www.phpunit.de/)\n* [Free Pascal Unit](http://www.freepascal.org/units.html)\n* [CppUnit](https://sourceforge.net/projects/cppunit/)\n* [MbUnit](http://www.mbunit.com/)\n* [Googletest](http://code.google.com/p/googletest/)\n* [EmbUnit](http://embunit.sourceforge.net/embunit/index.html)\n* [gtester/glib](https://developer.gnome.org/glib/stable/gtester.html)\n* [QTestLib](http://doc.qt.io/qt-5/qtest-overview.html)\n\n## Other plugins as an extension of the xUnit plugin:\n\n* [Gallio](http://www.gallio.org/) ([Gallio plugin](https://github.com/jenkinsci/gallio-plugin))\n* [Parasoft C++Test tool](http://www.parasoft.com/jsp/products/cpptest.jsp) ([Cpptest Plugin](https://github.com/jenkinsci/parasoft-findings-plugin))\n* [JSUnit](http://www.jsunit.net/) ([JSUnit Plugin](https://github.com/jenkinsci/jsunit-plugin))\n* [JBehave](http://jbehave.org/reference/stable/hudson-plugin.html)\n* [TestComplete](http://smartbear.com/product/testcomplete/overview/) ([TestComplete xUnit Plugin](https://github.com/jenkinsci/testcomplete-xunit-plugin))\n\n## External contributions\n\nFor each xUnit tool, an embedded style sheet is used.\nHowever, the plugin also enables you to use a custom style sheet for your own tool such as :\n\n* [WebUI](http://github.com/versionone/webui-plugin)\n* [Ranorex](http://github.com/ranorex/ranorex-to-xunit)\n\n# Configuration\n\n## Job Configuration\n\n* Execute your testing tools manually or as a step of your build chain\n* Give a pattern that specifies your test results\n\n![](docs/images/xunit-conf-0.2.png)\n\n##  Provide User XSL\n\nIf you want to customise how a input report is transformed to a JUnit report of an existing tool type; xUnit provides a way to use your own XSL if placed at specific path.\nSpecify your XSLs in the `JENKINS_HOME/userContent` directory with the following convention:\n\n```\n$JENKINS_HOME/userContent/xunit/[toolName]/[version]/[any_name].xsl\n```\n\nFor example:\n\n```\n$JENKINS_HOME/userContent/xunit/AUnit/3.x/aunit-to-junit.xsl\n```\n\n**Note**: The tool name and the version are taken from the label in the combo box from the UI.\nIf the tool doesn't have a version (N/A), do not create a version directory.\n\n##  Custom Tool for unsupported formats\n\nXUnit supports a large number of report format, but not all.\nFor unsupported report type an user could provide an own stylesheet that convert the original report into a supported JUnit report.\n\nWhen choose the \"Custom Tool\" as tool type a path to the user XSL must be provided.\nThe path is relative and the plugin lookup the provided relative path using the following priority:\n\n1.  on Jenkins controller\n2.  on Jenkins agent\n3.  relative to workspace\n\nYou could also provide an URL to the stylesheet.\nIf the XSL file is placed in the `$JENKINS_HOME/userContent` folder, the file will be available under the URL\n`http(s)://$JENKINS_URL/userContent/<xsl file>`\n\n### Publish test result checks\n\nThis feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nWhen enabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\nIn the *Details* view of each check, test results will be displayed.\n\nIn order to enable the checks feature, set the property `skipPublishingChecks` to `false`\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  xunit (tools: [ BoostTest(pattern: 'integration/*.xml') ], skipPublishingChecks: false)\n}\n// no stage at all\nxunit (tools: [ BoostTest(pattern: 'boost/*.xml') ], skipPublishingChecks: false)\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    xunit (tools: [ MSTest(pattern: '**/*.trx') ], skipPublishingChecks: false)\n  }\n}\n```\n\n# xUnit Architecture\n\n## Global Architecture\n\nWhen this plugin is installed and configured, Jenkins can transform test result reports produced by different testing tools into JUnit test result format.\nThe JUnit tests can then be recorded by Jenkins.\nJenkins can provide useful information about test results, such as the historical test result trend, web UI for viewing test reports, tracking failures, and so on.\n\nUnder the hood, xUnit Jenkins plugin delegates processing to [DTKit](https://plugins.jenkins.io/dtkit/).\n\n![](docs/images/xunit_architecture.JPG)\n\n## DTKit Activities for XUnit\n\n![](docs/images/xunit_dtkit_activities.JPG)\n\n## DTKit Packaging\n\n## ![](docs/images/xunit_packaging.JPG)\n\n## Working with Pipelines\n\nIt is also possible to set an xUnit configuration in a pipeline job, but is somewhat more verbose.\n\nFor example, creating a boost pipeline (declarative) with the same\nconfiguration as above would be:\n\n**Example of pipeline**\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Test'){\n            steps {\n                sh \"run_tests.bash\"\n            }\n        }\n    }\n    post {\n        always{\n            xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ BoostTest(pattern: 'boost/*.xml') ]\n            )\n        }\n    }\n }\n```\n\n# Releases\n\n**Moved to [GitHub repository page](https://github.com/jenkinsci/xunit-plugin/releases/)**\n\n## Version 2.2.5\n\n#### Improvements\n\n-   [JENKINS-51645](https://issues.jenkins-ci.org/browse/JENKINS-51645) Add\n    support for claims plugin in xUnit (nfalco79 to Arnaud)\n-   [JENKINS-24224](https://issues.jenkins-ci.org/browse/JENKINS-24224) improve\n    xunit plugin with test-stability plugin (nfalco79 to Arnaud)\n\n#### Bugfixes\n\n-   [JENKINS-53186](https://issues.jenkins-ci.org/browse/JENKINS-53186) NUnit\n    2.x test cases with result Error are reported as Success (nfalco79)\n-   Fix lookup strategy when user provides a custom stylesheets file to\n    override the embedded one (nfalco79)\n-   [JENKINS-53034](https://issues.jenkins-ci.org/browse/JENKINS-53034) Failure\n    when validate NUnit 2.x reports generated by NUnit 3.x console\n    (nfalco79)\n-   [JENKINS-53036](https://issues.jenkins-ci.org/browse/JENKINS-53036) NPE\n    after upgrade to 2.2.1 when run publisher (nfalco79)\n-   [JENKINS-52908](https://issues.jenkins-ci.org/browse/JENKINS-52908) Newlines\n    get ignored in failure message and possibly stack trace when\n    uploading xUnitDotNet xml results (nfalco79)\n\n## Version 2.1.0\n\n#### Improvements\n\n-   [JENKINS-32920](https://issues.jenkins-ci.org/browse/JENKINS-32920)\n    Support for URL for stylesheet in Custom Tool (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-52512](https://issues.jenkins-ci.org/browse/JENKINS-52512)\n    Builds on agent fails when there is no report file even if set\n    to do not fail (nfalco79)\n-   [JENKINS-52400](https://issues.jenkins-ci.org/browse/JENKINS-52400)\n    xUnit miss to add required attributes when converts Valgrind reports\n    (nfalco79)\n\n## Version 2.0.4\n\n#### Improvements\n\n-   Improved GoogleTest, FPCUnit, CppTest XSLT to produce a report more\n    compliant with surefire XSD\n\n#### Bugfixes\n\n-   [JENKINS-52327](https://issues.jenkins-ci.org/browse/JENKINS-52327) java.nio.file.AccessDeniedException\n    on Publish xunit Custom tool test report (nfalco79 to greghoeppner)\n-   [JENKINS-52202](https://issues.jenkins-ci.org/browse/JENKINS-52202)\n    xUnit reports \"All test reports are empty\" in case of parallel steps\n    but reports are not empty (nfalco79)\n-   [JENKINS-52253](https://issues.jenkins-ci.org/browse/JENKINS-52253)\n    xUnit in case of multiple tool type processes only the first one\n    (nfalco79)\n-   [JENKINS-52173](https://issues.jenkins-ci.org/browse/JENKINS-52173)\n    xUnit fails when converting gtester/glib2 input to junit format\n    (nfalco79)\n-   [JENKINS-51604](https://issues.jenkins-ci.org/browse/JENKINS-51604) XPathExeption\n    when parsing QtTestLib Reports when a Test contains multiple\n    Incidents (nfalco79)\n-   [JENKINS-27860](https://issues.jenkins-ci.org/browse/JENKINS-27860) Build\n    does not stop if it is marked as Failure when the opportune option\n    is enabled (nfalco79)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194) xUnit\n    should not consider report generated by other xUnit step (nfalco79)\n-   [JENKINS-52107](https://issues.jenkins-ci.org/browse/JENKINS-52107) Convertion\n    exception for NUnit 2.1 reports because nunit-version attribute not\n    contains only digits (nfalco79)\n-   [JENKINS-41093](https://issues.jenkins-ci.org/browse/JENKINS-41093)\n    For Unittest++ xml, only the first failure of each test case is\n    recognized (nfalco79)\n-   [JENKINS-51767](https://issues.jenkins-ci.org/browse/JENKINS-51767)\n    xUnit 2.x XSD does not validate NUnit 2.x XML report file (nfalco79)\n-   [JENKINS-51797](https://issues.jenkins-ci.org/browse/JENKINS-51797)\n    xUnit.Net v2 parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51798](https://issues.jenkins-ci.org/browse/JENKINS-51798) GoogleTest\n    parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51561](https://issues.jenkins-ci.org/browse/JENKINS-51561)\n    xUnit plugin fails to parse NUnit 2 report format generated by NUnit\n    3.6.0.0 (nfalco79)\n-   [JENKINS-51465](https://issues.jenkins-ci.org/browse/JENKINS-51465)\n    Exception in XSL Transformation cause JEP-200 (nfalco79)\n-   [JENKINS-51481](https://issues.jenkins-ci.org/browse/JENKINS-51481)\n    Parse error occur when NUnit report have categories (nfalco79)\n-   [JENKINS-26227](https://issues.jenkins-ci.org/browse/JENKINS-26227)\n    xUnit plugin doesn't use OS culture when reads time values in\n    [xUnit.net](http://xunit.net/) output (nfalco79)\n-   [JENKINS-12417](https://issues.jenkins-ci.org/browse/JENKINS-12417)\n    xUnit problems with CppTest reports generated with default options\n    (nfalco79)\n-   [JENKINS-28871](https://issues.jenkins-ci.org/browse/JENKINS-28871)\n    CppTest 9.5 report file seems not valid for xUnit when no tests was\n    executed (nfalco79)\n\n## Version 2.0.0\n\n#### Breaking Changes\n\nI have introduce some schemas validation becase the large number of\nissues opened to xUnit plugin. Those issues are caused by custom\nattributes or XML DOM in the report generated by some user/tools report\nlogger also if they declare to produce a valid report file. This cause\nme to spend a lot of time to investigate what is right and what is wrong\nand how to implement the XSL without it goes in error during\ntransformation. \n\n-   **Official supported JUnit schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\n    and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd)).**\n\nIn case you are using a non java tools that declares to produce a JUnit\ncompatible report, ensure the report respects one of the widely used\nsupported schemas. If not than select as test type the build step\n\"Custom Tool\" and\nuse [this](https://github.com/jenkinsci/xunit-plugin/blob/master/docs/files/input.xsl)\nXSL as\ndescribed [here](#provide-user-xsl). The XSL is provided AS IS without any support.\n\n-   **NUnit 2.x (2.0 - 2.6) schema validation from official\n    distribution.**\n\nIn case you are using a tools that declares to produce a NUnit 2\ncompatible report, ensure the report respects the official schemas. If\nnot than select as test type the build step \"Custom Tool\" and provide a\nXSL as\ndescribed [here](#provide-user-xsl).\n\n#### Improvements\n\n-   Improved MSTest, MbUnit, AUnit, NUnit, QtTest XSLT to produce a\n    report more compliant with surefire XSD\n-   Change UI rendering of the report tool and clarify the pattern\n    description\n-   [JENKINS-37611](https://issues.jenkins-ci.org/browse/JENKINS-37611)\n    Add support for pipeline using @Symbol annotation to xunit and its\n    parameters (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-42715](https://issues.jenkins-ci.org/browse/JENKINS-42715)\n    xUnit does not support PHPUnit 5.x skipped attribute (nfalco79 to\n    ray)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194)\n    xUnit should not consider report generated by other xUnit step\n    (nfalco79)\n-   [JENKINS-10911](https://issues.jenkins-ci.org/browse/JENKINS-10911)\n    xUnit not detecting Ignored MSTest and NUnit Tests (nfalco79)\n-   [JENKINS-51347](https://issues.jenkins-ci.org/browse/JENKINS-51347)\n    Test Status \"notrun\" being reported as \"failed\" test (nfalco79)\n-   [JENKINS-13113](https://issues.jenkins-ci.org/browse/JENKINS-13113)\n    xUnit plugins detects MSTEST \"NotExecuted\" as successed instead of\n    skipped (nfalco79)\n\n## Version 1.104\n\n#### Improvements\n\n-   [JENKINS-33450](https://issues.jenkins-ci.org/browse/JENKINS-33450)\n    Support for NUnit3 which uses a different XML format by NUnit2\n    (nfalco79 to alexschwantes)\n\n-   [JENKINS-50658](https://issues.jenkins-ci.org/browse/JENKINS-50658)\n    Fix xsd to be compliant with surefire report and rerun option\n    (nfalco79 to alemorato)\n-   Move plugin to pipeline so that commits and pull request could be\n    checked for test failure\n\n#### Bugfixes\n\n-   [JENKINS-48945](https://issues.jenkins-ci.org/browse/JENKINS-48945)\n    Testreport lacks of those test in which the hashcode of two\n    different testsuite name coincide (nfalco79)\n-   [JENKINS-33385](https://issues.jenkins-ci.org/browse/JENKINS-33385)\n    Testresult doesn't show test name in case the package is empty\n    (nfalco79 to Zenger Alexander)\n\n-   [JENKINS-51056](https://issues.jenkins-ci.org/browse/JENKINS-51056)\n    xUnit throws NPE when no threshold was specified (nfalco79)\n-   [JENKINS-35660](https://issues.jenkins-ci.org/browse/JENKINS-35660)\n    QTestLib time information is lost (nfalco79 to kpop)\n-   [JENKINS-28471](https://issues.jenkins-ci.org/browse/JENKINS-28471)\n    xUnit should compare test results to last build where tests was\n    recorded to calculate correctly thresholds (nfalco79 to Jimilian)\n-   [JENKINS-50378](https://issues.jenkins-ci.org/browse/JENKINS-50378)\n    Skipped count percentage is affected by integer rounding (nfalco79\n    to pauljohnston2009)\n-   [JENKINS-42031](https://issues.jenkins-ci.org/browse/JENKINS-42031)\n    xUnit Plugin Does Not Parse Some Boost 1.63 Test Reports (nfalco79\n    to aschet)\n-   Relax BoostTest code line validation (nfalco79 to penberg)\n-   Ensure testuite time attribute is valid for NUnit\n-   [JENKINS-24382](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)\n    Add basic support for Unit\n\n## Version 1.100\n\n-   Fix\n    [JENKINS-30812](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    added parsing for gtest errors so that a failure to run a test is\n    considered a test failure\n-   Fix\n    [JENKINS-27240](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    Workflow integration XUnit as a SimpleBuildSte \n (Distance: 1.0227)",
    "rank_1_distance": 1.0227,
    "rank_2_name": "# JUnit Plugin for Jenkins",
    "rank_2_content": "# JUnit Plugin for Jenkins\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/junit.svg)](https://plugins.jenkins.io/junit)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/junit-plugin.svg?label=release)](https://github.com/jenkinsci/junit-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/junit.svg?color=blue)](https://plugins.jenkins.io/junit)\n\nThe JUnit plugin provides a publisher that consumes XML test reports generated during the builds and provides some graphical visualization of the historical test results \n(see [JUnit graph](https://wiki.jenkins.io/display/JENKINS/JUnit+graph) for a sample) \nas well as a web UI for viewing test reports, tracking failures, and so on. \nJenkins understands the JUnit test report XML format (which is also used by TestNG). \nWhen this option is configured, Jenkins can provide useful information about test results, such as trends.\n\nThe plugin also provides a generic API for other unit-test publisher plugins in Jenkins. This functionality was part of the Jenkins Core until it was split out to this plugin in version in 1.577.\n\n## Configuration\n\nThe JUnit publisher is configured at the job level by adding a Publish JUnit test result report post build action. The configuration parameters include:\n\n* **Test report XMLs:** Specify the path to JUnit XML files in the Ant glob syntax, such as `**/build/test-reports/*.xml`. \n  Be sure not to include any non-report files into this pattern. \n  You can specify multiple patterns of files separated by commas. \n  The base directory of the fileset is the workspace root.\n* **Retain long standard output/error:** If checked, any standard output or error from a test suite will be retained in the test results after the build completes. \n  (This refers only to additional messages printed to console, not to a failure stack trace). \n  Such output is always kept if the test failed, but by default lengthy output from passing tests is truncated to save space. \n  Check this option if you need to see every log message from even passing tests, but beware that Jenkins's memory consumption can substantially increase as a result, even if you never look at the test results!\n* **Health report amplification factor:** The amplification factor to apply to test failures when computing the test result contribution to the build health score. \n  The default factor is 1.0. A factor of 0.0 will disable the test result contribution to build health score, and, as an example, a factor of 0.5 means that 10% of tests failing will score 95% health. \n  The factor is persisted with the build results, so changes will only be reflected in new builds.\n* **Allow empty results:** If checked, the default behavior of failing a build on missing test result files or empty test results is changed to not affect the status of the build. \n  Please note that this setting make it harder to spot misconfigured jobs or build failures where the test tool does not exit with an error code when not producing test report files.\n* **Skip publishing checks:** If this option is unchecked, then the plugin automatically publishes the test results to corresponding SCM hosting platforms.\n  For example, if you are using this feature for a GitHub organization project, the warnings will be published to\n  GitHub through the Checks API. If this operation slows down your build, or you don't want to publish the warnings to\n  SCM platforms, you can use this option to deactivate this feature.\n* **Checks name:** If provided, and publishing checks enabled, the plugin will use this name when publishing\n  results to corresponding SCM hosting platforms. If not, a default of \"Test\" will be used.\n* **Skip marking build unstable:**  If this option is unchecked, then the plugin will mark the build as unstable when it finds at least 1 test failure.\n    If this option is checked, then the build will still be successful even if there are test failures reported.\n    In any case, the corresponding pipeline node (and stage) will be marked as unstable in case of test failure.\n    In order to enable this, set the property: \n    `skipMarkingBuildUnstable` to `true`:\n    \n      junit skipMarkingBuildUnstable: true, testResults: 'test-results.xml'\n      \n### Test result checks (for GitHub projects)\n\n:warning: This feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nIf not disabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\n\nIn the *Details* view of each check ([example](https://github.com/timja-org/junit-attachments-test/pull/4/checks?check_run_id=1237630805)), test results will be displayed.\n\n![checks](images/checks.png)\n\nIn order to disable the checks feature, set the property `skipPublishingChecks` to `true`:\n```groovy\njunit skipPublishingChecks: true, testResults: 'test-results.xml'\n```\n\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  junit 'test-results.xml'\n}\n\njunit 'more-test-results.xml'\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    junit 'yet-more-test-results.xml'\n  }\n}\n```\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md) \n (Distance: 1.0300)",
    "rank_2_distance": 1.03,
    "rank_3_name": "This project hosts a sample project that runs Selenium as an unit test.",
    "rank_3_content": "This project hosts a sample project that runs Selenium as an unit test.\n\nIt works with junit-attachment plugin as well. \n (Distance: 1.0360)",
    "rank_3_distance": 1.036
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': '**/target/work/data/.metadata/.log, **/hs_err_pid*.log', 'allowEmptyArchive': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (params.TRIGGER_DOWNSTREAM) {\\n                    def downstreamJobs = \\'xtext-umbrella\\'.split(\\',\\')\\n                    downstreamJobs.each { jobName ->\\n                        def jobUrl = \"${env.JENKINS_URL}/job/${jobName}/job/${env.BRANCH_NAME}\"\\n                        def responseCode = sh(\\n                            script: \"curl -s -o /dev/null -w \\'%{http_code}\\' ${jobUrl}\",\\n                            returnStdout: true\\n                        ).trim()\\n\\n                        if (responseCode == \"200\") {\\n                            build job: \"${jobName}/${env.BRANCH_NAME}\",\\n                                  wait: false,\\n                                  parameters: [\\n                                      booleanParam(name: \\'TRIGGER_DOWNSTREAM\\', value: \"${params.TRIGGER_DOWNSTREAM}\"),\\n                                      string(name: \\'JDK_VERSION\\', value: \"${params.JDK_VERSION}\")\\n                                  ]\\n                        }\\n                    }\\n                }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'def currentResult = currentBuild.currentResult\\n                def previousResult = currentBuild.previousBuild?.result ?: \\'NEW\\'\\n\\n                if (currentResult != previousResult) {\\n                    def colorMap = [\\n                        \\'SUCCESS\\': \\'#00FF00\\',\\n                        \\'UNSTABLE\\': \\'#FFFF00\\',\\n                        \\'FAILURE\\': \\'#FF0000\\',\\n                        \\'ABORTED\\': \\'#666666\\'\\n                    ]\\n\\n                    slackSend(\\n                        botUser: true,\\n                        channel: \\'#xtext-builds\\',\\n                        color: colorMap[currentResult] ?: \\'#666666\\',\\n                        message: \"${previousResult} => ${currentResult}: <${env.BUILD_URL}|${env.JOB_NAME}#${env.BUILD_NUMBER}>\"\\n                    )\\n                }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.displayName = \"#${BUILD_NUMBER}(JDK${javaVersion()},Eclipse${env.TARGET_PLATFORM})\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'wrap', 'raw_args': \"[$class: 'Xvnc', takeScreenshot: false, useXauthority: true]\", 'raw_block': 'sh \"\"\"\\n                                ./tycho-test.sh -s ${env.HOME}/.m2/settings.xml \\\\\\n                                    --tp=${env.TARGET_PLATFORM} \\\\\\n                                    --local-repository=${env.HOME}/.m2/repository\\n                            \"\"\"'}",
    "rank_1_name": "# Icedq",
    "rank_1_content": "# Icedq\nMy Plugin \n (Distance: 1.4287)",
    "rank_1_distance": 1.4287,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.4981)",
    "rank_2_distance": 1.4981,
    "rank_3_name": "# label-test",
    "rank_3_content": "# label-test \n (Distance: 1.5281)",
    "rank_3_distance": 1.5281
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'publishHTML', 'raw_args': \"\\n                            allowMissing: false,\\n                            alwaysLinkToLastBuild: false,\\n                            keepAll: false,\\n                            reportDir: 'reports',\\n                            reportFiles: 'coverage.html',\\n                            reportName: 'Coverage Report',\\n                            reportTitles: ''\\n                        \"}",
    "rank_1_name": "# Rich Text Publisher Plugin",
    "rank_1_content": "# Rich Text Publisher Plugin\n\n\n\nNow featuring pipeline plugin support\n\n\n\nA plugin adds a configurable post-build step which publishes arbitrary rich text at the Project and Build pages.\n\nThe following markup languages are supported: HTML, WikiText, Confluence. Build parameters or whole files from workspace may be embedded into text.\n\n\n\nCopyright (c) 2013 Dmitry Korotkov. See LICENSE for further details. \n (Distance: 1.1355)",
    "rank_1_distance": 1.1355,
    "rank_2_name": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">",
    "rank_2_content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html>\n<head>\n<title>&lt;dom4j&gt; the flexible XML framework for Java</title>\n</head>\n<body>\n<table border=\"0\" width=\"100%\">\n<tr>\n<td><a href=\"http://dom4j.org\"><img border=\"0\" src=\"src/doc/style/images/logo.gif\" alt=\"&lt;dom4j&gt;\"></a></td>\n<td><font size=\"5\">The flexible XML framework for Java</font></td>\n</tr>\n\n<tr>\n<td>&nbsp;</td>\n</tr>\n</table>\n\n<table width=\"100%\">\n<tr>\n<td bgcolor=\"#0066FF\" bordercolor=\"#FFFFFF\">\n<h2>Introduction</h2>\n</td>\n</tr>\n\n<tr>\n<td>\n<p>Thank you for downloading DOM4J we hope you find it useful.</p>\n\n<p>DOM4J is an open source framework for processing XML which is integrated with XPath and fully supports DOM, SAX, JAXP and the Java platform such as Java 2 Collections.</p>\n\n<p>&nbsp;</p>\n</td>\n</tr>\n\n<tr>\n<td bgcolor=\"#0066FF\">\n<h2>Building instructions</h2>\n</td>\n</tr>\n\n<tr>\n<td>\n<p>The build process in DOM4J uses <a href=\"http://jakarta.apache.org/ant/index.html\">Ant</a>. The prerequisites for running the Ant build system included with this release are that:-</p>\n\n<ul>\n<li>\n<p>You have a JDK installed on your machine such that the <i>java</i> executable is in your PATH</p>\n</li>\n\n<li>\n<p>You have the <b>JAVA_HOME</b> environment variable defined to point to the directory in which the JDK is installed. For example on Windows this might be <a href=\"file:///C:/jdk1.3\">C:\\jdk1.3</a>\nor on Unix it might be /usr/local/jdk1.3.</p>\n</li>\n</ul>\n\n<p>In the root directory of this distribution there should be a script which runs on most popular operating systems to build a supplied target using Ant.&nbsp;</p>\n\n<p>Choose the most suitable script for your platform from the scripts below and typing in the command line expression on the right hand side should display a list of available targets in the Ant\nbuild system.</p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Script</b></td>\n<td><b>Command line</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>build.bat</td>\n<td>build usage</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>build.sh</td>\n<td>./build.sh usage</td>\n</tr>\n</table>\n\n<p>&nbsp;</p>\n</td>\n</tr>\n\n<tr>\n<td bgcolor=\"#0066FF\">\n<h2>Running the example programs</h2>\n</td>\n</tr>\n</table>\n\n<p><font face=\"Verdana\">There are a collection of sample programs that come with the DOM4J distribution. To run any of them you should first build the examples using Ant.</font></p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Command line</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>build samples</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>./build.sh samples</td>\n</tr>\n</table>\n\n<p><font face=\"Verdana\">Once that is done there is a run script to run a sample program which sets up the CLASSPATH correctly.</font></p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Command line</b></td>\n<td><b>Example</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>run &lt;className&gt; &lt;arguments&gt;</td>\n<td>run SAXDemo xml\\web.xml</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>./run.sh &lt;className&gt; &lt;arguments&gt;</td>\n<td>./run.sh SAXDemo xml/web.xml</td>\n</tr>\n</table>\n</body>\n</html> \n (Distance: 1.2286)",
    "rank_2_distance": 1.2286,
    "rank_3_name": "# seleniumhtmlreport",
    "rank_3_content": "# seleniumhtmlreport\n\nThis plugin visualizes the results of selenium tests.\n\n# Description\n\nThe seleniumhtmlreport plugin scans the selenium test results directory\nfor html files created by selenium tests and creates an overview of the\nexecuted tests.\n\nAll html result files will be copied into the subdirectory\n\"seleniumReports\" of the build root directory.\n\nAll results will be read from the html result files. In the overview is\nfor each html result file a link to it.\n\n![seleniumhtmlreport_overview](docs/images/seleniumhtmlreport_overview.jpg)\n\n## Configuration\n\nIf you activate the Post-Build-Action \"Publish Selenium Html Report\" you\ncan insert the location of your selenium test results into the text\ninput box with the label \"Selenium tests results location\". Insert a\nlocation relative to your workspace.\n\n![seleniumhtmlreport_config](docs/images/seleniumhtmlreport_config.jpg)\n\n# Feedback\n\nThis plugin is developed and maintained by Marco Machmer with kind\nsupport from [Abas Software AG](http://www.abas.de/). Please feel free\nto contact me for feedback. If you have suggestions for new features or\nyou've found a bug, please use the [issue\ntracker](https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20seleniumhtmlreport-plugin). \n (Distance: 1.2712)",
    "rank_3_distance": 1.2712
  },
  {
    "step": "{'name': 'script', 'raw_args': \"dir('be') {\\n                       echo 'Test'\\n                        sh './gradlew clean test'\\n                    }\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"dir('be') {\\n                        echo 'build'\\n                        sh 'docker build -t jshop.kr.ncr.ntruss.com/jshop:v1.0.0 .'\\n                    }\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"echo 'push'\\n                    sh 'echo $NCLOUD_SECRET_KEY | docker login jshop.kr.ncr.ntruss.com -u ${NCLOUD_ACCESS_KEY_ID} --password-stdin'\\n                    sh 'docker push jshop.kr.ncr.ntruss.com/jshop:v1.0.0'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean checkstyle:check -Dcheckstyle.failOnViolation=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean license:check-file-header -Dlicence-check.failOnMissingHeader=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(\\n                   credentialsId: 'artifact-signing-key-password',\\n                   variable: 'SIGN_KEY')]) {\\n                        configFileProvider(\\n                            [configFile(fileId: '10647dc3-5621-463b-a290-85290f0ad119', variable: 'MAVEN_SETTINGS')]\", 'raw_block': \"sh 'mvn -s $MAVEN_SETTINGS clean deploy -P deploy -DskipTests -Dcheckstyle.failOnViolation=true -Dgpg.passphrase=$SIGN_KEY'\\n                        }\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': 'govuk.initialize()'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'build/native/nativeCompile/*', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'cleanWs', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.3155)",
    "rank_1_distance": 1.3155,
    "rank_2_name": "gssh",
    "rank_2_content": "gssh\n==== \n (Distance: 1.4091)",
    "rank_2_distance": 1.4091,
    "rank_3_name": "# Distributed Workspace Clean plugin",
    "rank_3_content": "# Distributed Workspace Clean plugin\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/hudson-wsclean-plugin.svg)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/hudson-wsclean-plugin.svg?color=blue)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/wsclean-plugin/master)](https://ci.jenkins.io/job/Plugins/job/wsclean-plugin/job/master/)\n\n## Overview\n\nThe\nDistributed Workspace Clean plugin\nis used to remove unnecessary old build workspaces from nodes used by previous builds.\nThis allows us to keep the overall disk usage down on long-lifetime nodes that do lots of different builds.\nThe \"Workspace\" link for a job only ever points to the most recently used node,\nso that means that all nodes except one could safely delete their unused workspaces\n... but Jenkins does not do that by default.\n\nThis plugin is designed to clean the build's workspace in all nodes _except_ the one(s) where it is currently running.\n\ne.g. if you have 100 jobs that typically uses 1gig of disk to build,\nand you have 100 nodes that can build those jobs,\nthen _without this plugin_ you will eventually end up with a copy of every workspace on every node,\n10000gigs total.\nHowever, with this plugin active on every build,\nyou'd only keep one workspace for each job across all the nodes,\n100gigs total, which is a lot less data to back up etc.\n\n* If you have a lot of static nodes then you may find this useful.\n* If you only have dynamic cloud-provided disposable nodes then you probably won't.\n\n**Note:** This plugin was originally developed before pipeline builds existed.\nIt's intended for use with \"classic\" builds.\n\n## Usage\n\n### How to use it\n\nThis functionality can be enabled by ticking the box in the \"Build Environment\" section of a job's configuration.\n\n![](docs/images/job-configuration-unexpanded.png)\n\n... and optionally expanding the \"Advanced\" box and ticking the \"clean before\" checkbox\nif you would prefer the clean to happen at the start of the build instead of at the end (the default).\n\n![](docs/images/job-configuration-expanded.png)\n\n### How to avoid it\n\nIf you have nodes that should never have their workspaces cleaned\n(by this plugin)\nthen you can add a Node Property specifying\n(in the node's configuration page)\nthat this plugin should always skip them:\n\n![](docs/images/node-properties.png)\n\nFor example,\nnodes that are dynamically created\n(and deleted)\nby a cloud plugin are unlikely to require cleaning\n(as they'll be destroyed before they have a chance to build up much mess),\nso it's useful to add this Node Property to the template(s) from which such nodes are created.\n\nNote:\nIf you can't add a node property due to limitations on the type of node\n(e.g. not all cloud plugins support node properties),\nyou can achieve the same effect using the \"Nodes to ignore\" field in the global configuration.\n\n### How to control it\n\nFurther options to control which nodes are selected for cleanup can be found in the global configuration page\n(Manage Jenkins -> Configure System):\n\n![](docs/images/global-configuration.png)\n\nThe default setting is to \"clean nodes that could be used\"\n(for the build),\nwhich preserves the behavior of plugin version 1.0.5 and earlier\n(where the plugin looks at what other nodes could have been used to run the build,\nand cleans the workspace that would've been used on each of those).\nAs of version 1.0.6 onwards, you can choose to clean only where previous completed builds had run, or both.\n\nFor further details, see the help text associated with each configuration option.\n\n## See also\n* [Software licence](LICENSE)\n* Support and [contribution guide](CONTRIBUTING.md)\n* [Changelog](CHANGELOG.md) \n (Distance: 1.4115)",
    "rank_3_distance": 1.4115
  },
  {
    "step": "{'name': 'readTrusted', 'raw_args': 'bin/whitelist'}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.0316)",
    "rank_1_distance": 1.0316,
    "rank_2_name": "////",
    "rank_2_content": "////\n ~ The MIT License\n\n  ~ Copyright 2020 Loghi Perinpanayagam.\n\n  ~ Permission is hereby granted, free of charge, to any person obtaining a copy\n  ~ of this software and associated documentation files (the \"Software\"), to deal\n  ~ in the Software without restriction, including without limitation the rights\n  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  ~ copies of the Software, and to permit persons to whom the Software is\n  ~ furnished to do so, subject to the following conditions:\n\n  ~ The above copyright notice and this permission notice shall be included in\n  ~ all copies or substantial portions of the Software.\n\n  ~ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  ~ THE SOFTWARE.\n////\n\n\n[[machine-learning-plugin]]\n= Machine Learning Plugin\n:toc: macro\n\nlink:https://ci.jenkins.io/job/Plugins/job/machine-learning-plugin/job/master/[image:https://ci.jenkins.io/job/Plugins/job/machine-learning-plugin/job/master/badge/icon[Build]]\nlink:https://github.com/jenkinsci/machine-learning-plugin/graphs/contributors[image:https://img.shields.io/github/contributors/jenkinsci/machine-learning-plugin.svg?color=blue[Contributors]]\nlink:https://gitter.im/jenkinsci/gsoc-machine-learning-project[image:https://badges.gitter.im/jenkinsci/machine-learning-plugin.svg[Gitter]]\n\nimage:docs/images/jenkins-machine-learning-logo.png[]\n\n== Overview\n\nThe main goal of this project is integrating Machine Learning workflow including Data preprocessing, Model Training, Evaluation and Prediction with Jenkins build tasks. This plugin is capable of executing code fragments via IPython kernel as currently supported by Jupyter.\n\n=== Usage\n\n==== Prerequisites\n\n- Following python libraries are required. If not -> install using,\n\n[source,bash]\n----\npip install jupyter\npip install protobuf\npip install grpcio\n----\n\n- For **Anaconda** environment need to install grpcio as Jupyter is already included in anaconda. For grpcio version >= 1.12 and need to install protobuf separately.\n\n[source,bash]\n----\npip install protobuf\npip install grpcio\n----\n\n> DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained.\n\n==== Configure IPython kernel\n\n* Kernel language name (Eg: python, ir, javascript etc)\n* Language should be alphanumeric and contains only `_` as a special character (Optional)\n* Connection establishing timeout in seconds\n* Max number of data frames in rows\n\nimage:docs/images/global_config.png[configuration]\n\n\n==== Add Jupyter Notebooks\n\n* Copy Jupyter Notebook to the workspace\n\n* Convert Jupyter Notebooks to `Python / JSON` files and save in the workspace\n\n\nimage:docs/images/file_parser.png[notebook]\n\n==== Build Notebook\n\n* Choose a name for the Machine Leaning task folder (Eg: Training)\n* Choose the language kernel\n* Use text editor to run code directly\n* Use file path to run Jupyter Notebook or script file\n\nimage:docs/images/file_builder.png[builder]\n\n* Tips for smooth interpretation\n\n** Install link:https://github.com/jenkinsci/ansicolor-plugin[ANSI-Color plugin] for rich formatted output\n** Aware of permissions for accessing I/O in the python code\n** Make sure about `import` libraries used in the code installed properly\n** If there is any HTML/Images as outputs, all will be saved in the workspace under the Machine Leaning task folder\n\n==== Images and HTMLs\n\nImages and HTMLs in the notebook will be saved in the workspace.\nThose artifacts can be viewed using the action in the left side panel.\n\nimage:docs/images/image_view.png[image_and_htmls]\n\n=== Troubleshooting\n\nIf you are having trouble viewing the HTML files saved, check your browser console to see if there are any errors about Content Security Policy.\nThis is often the problem.\nIf you see the error above, then follow the link link:https://wiki.jenkins.io/display/JENKINS/Configuring+Content+Security+Policy[Resolve issues on CSP] for instructions on how to resolve.\n\n=== Contributing to the Plugin\n\nPlease refer to the following link for more details. See link:CONTRIBUTING.adoc[here] . \n (Distance: 1.4215)",
    "rank_2_distance": 1.4215,
    "rank_3_name": "readonly-parameter-plugin",
    "rank_3_content": "readonly-parameter-plugin\n=======================\n\n##Characteristics\n\t\t1. Some key parameters, once modified in the build execution, can lead to the risk.these parameters,only administrator can modify,to reduce the risk.\n\t\t2. Readonly parameter,readonly in the build execution, in job configuration's page can modify.\n\t\t3. Readonly parameter,readonly in the rebuild excution also.\n\t\t4. This plugin contains string and text two readonly style.\n\n##Use case\nAfter the plugin is installed,in job configuration's page,you can see readonly Parameter:<br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/add_para.jpg)\n\nfor example,you add two readonly parameter,respectively called readonly_para_str and readonly_para_text.<br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/edit_para.jpg)\n\nclick 'Build With Parameters' link ,the parameter readonly_para_str and readonly_para_text of the set before ,display readonly,and can not be edited in this page. <br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/build_para.jpg) \n (Distance: 1.4303)",
    "rank_3_distance": 1.4303
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (env.CHANGE_URL) {\\n                        sh \\'\\'\\'#!/bin/bash -l\\n                            temp_url=$(sed -e \\'s#github.com/#api.github.com/repos/#\\' <<< \"$CHANGE_URL\")/commits\\n                            pull_url=$(sed -e \\'s#pull#pulls#\\' <<< \"$temp_url\")\\n                            if ! curl -s \"$pull_url\" | jq -r \\'.[].commit.message\\' | grep -qi \"Signed-off-by:\"; then\\n                                echo \"FAIL: Missing Signed-Off Field\"\\n                                exit 1\\n                            fi\\n                        \\'\\'\\'\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': '[usernamePassword(\\n                    credentialsId: \"464911a1-007a-4910-90c8-78ff16ba165e\",\\n                    usernameVariable: \"DOCKER_USER\",\\n                    passwordVariable: \"DOCKER_PASS\"\\n                )]', 'raw_block': \"sh '''\\n                        docker login -u $DOCKER_USER -p $DOCKER_PASS\\n                        docker push hyperledger/grid-website\\n                    '''\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'cleanWs', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.3155)",
    "rank_1_distance": 1.3155,
    "rank_2_name": "gssh",
    "rank_2_content": "gssh\n==== \n (Distance: 1.4091)",
    "rank_2_distance": 1.4091,
    "rank_3_name": "# Distributed Workspace Clean plugin",
    "rank_3_content": "# Distributed Workspace Clean plugin\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/hudson-wsclean-plugin.svg)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/hudson-wsclean-plugin.svg?color=blue)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/wsclean-plugin/master)](https://ci.jenkins.io/job/Plugins/job/wsclean-plugin/job/master/)\n\n## Overview\n\nThe\nDistributed Workspace Clean plugin\nis used to remove unnecessary old build workspaces from nodes used by previous builds.\nThis allows us to keep the overall disk usage down on long-lifetime nodes that do lots of different builds.\nThe \"Workspace\" link for a job only ever points to the most recently used node,\nso that means that all nodes except one could safely delete their unused workspaces\n... but Jenkins does not do that by default.\n\nThis plugin is designed to clean the build's workspace in all nodes _except_ the one(s) where it is currently running.\n\ne.g. if you have 100 jobs that typically uses 1gig of disk to build,\nand you have 100 nodes that can build those jobs,\nthen _without this plugin_ you will eventually end up with a copy of every workspace on every node,\n10000gigs total.\nHowever, with this plugin active on every build,\nyou'd only keep one workspace for each job across all the nodes,\n100gigs total, which is a lot less data to back up etc.\n\n* If you have a lot of static nodes then you may find this useful.\n* If you only have dynamic cloud-provided disposable nodes then you probably won't.\n\n**Note:** This plugin was originally developed before pipeline builds existed.\nIt's intended for use with \"classic\" builds.\n\n## Usage\n\n### How to use it\n\nThis functionality can be enabled by ticking the box in the \"Build Environment\" section of a job's configuration.\n\n![](docs/images/job-configuration-unexpanded.png)\n\n... and optionally expanding the \"Advanced\" box and ticking the \"clean before\" checkbox\nif you would prefer the clean to happen at the start of the build instead of at the end (the default).\n\n![](docs/images/job-configuration-expanded.png)\n\n### How to avoid it\n\nIf you have nodes that should never have their workspaces cleaned\n(by this plugin)\nthen you can add a Node Property specifying\n(in the node's configuration page)\nthat this plugin should always skip them:\n\n![](docs/images/node-properties.png)\n\nFor example,\nnodes that are dynamically created\n(and deleted)\nby a cloud plugin are unlikely to require cleaning\n(as they'll be destroyed before they have a chance to build up much mess),\nso it's useful to add this Node Property to the template(s) from which such nodes are created.\n\nNote:\nIf you can't add a node property due to limitations on the type of node\n(e.g. not all cloud plugins support node properties),\nyou can achieve the same effect using the \"Nodes to ignore\" field in the global configuration.\n\n### How to control it\n\nFurther options to control which nodes are selected for cleanup can be found in the global configuration page\n(Manage Jenkins -> Configure System):\n\n![](docs/images/global-configuration.png)\n\nThe default setting is to \"clean nodes that could be used\"\n(for the build),\nwhich preserves the behavior of plugin version 1.0.5 and earlier\n(where the plugin looks at what other nodes could have been used to run the build,\nand cleans the workspace that would've been used on each of those).\nAs of version 1.0.6 onwards, you can choose to clean only where previous completed builds had run, or both.\n\nFor further details, see the help text associated with each configuration option.\n\n## See also\n* [Software licence](LICENSE)\n* Support and [contribution guide](CONTRIBUTING.md)\n* [Changelog](CHANGELOG.md) \n (Distance: 1.4115)",
    "rank_3_distance": 1.4115
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Jenkins', 'status': 'SUCCESS'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Jenkins', 'status': 'FAILURE'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Apply Inventory', 'status': 'SUCCESS'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Apply Inventory', 'status': 'FAILURE'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Apply Inventory', 'status': 'SUCCESS'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Apply Inventory', 'status': 'FAILURE'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Builds', 'status': 'SUCCESS'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Builds', 'status': 'FAILURE'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Deploys', 'status': 'SUCCESS'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Deploys', 'status': 'FAILURE'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'script', 'raw_args': 'timeout(time: 1, unit: \\'HOURS\\') {\\n                        env.PR_ID = input(\\n                            message: \\'Which PR # do you want to test?\\',\\n                            parameters: [string(name: \\'pr\\', description: \\'PR Number\\')]\\n                        )\\n                    }\\n\\n                    \\n                    if (!env.PR_ID?.trim()) {\\n                        error(\"PR_ID cannot be empty\")\\n                    }\\n\\n                    \\n                    env.PR_CI_CD_PROJECT_NAME = \"labs-ci-cd-pr-${env.PR_ID}\"\\n                    env.PR_DEV_PROJECT_NAME = \"labs-dev-pr-${env.PR_ID}\"\\n                    env.PR_TEST_PROJECT_NAME = \"labs-test-pr-${env.PR_ID}\"\\n                    env.USER_PASS = \"${PR_GITHUB_USERNAME}:${PR_GITHUB_TOKEN}\"\\n                    env.PR_BRANCH = \"pull/${env.PR_ID}/head\"\\n                    env.PR_URI = \"https://api.github.com/repos/rht-labs/labs-ci-cd/pulls/${env.PR_ID}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'openshift.withCluster(env.OCP_API_SERVER, env.OCP_TOKEN) {\\n                        [env.PR_CI_CD_PROJECT_NAME, env.PR_DEV_PROJECT_NAME, env.PR_TEST_PROJECT_NAME].each { project ->\\n                            if (openshift.projectExists(project)) {\\n                                openshift.deleteProject(project)\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'Jenkins', 'description': 'ALL CI jobs are running...', 'status': 'PENDING'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Builds', 'description': 'job is running...', 'status': 'PENDING'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'script', 'raw_args': 'openshift.withCluster(env.OCP_API_SERVER, env.OCP_TOKEN) {\\n                        openshift.withProject(env.PR_CI_CD_PROJECT_NAME) {\\n                            timeout(time: 5, unit: \\'MINUTES\\') {\\n                                def builds = openshift.selector(\\'bc\\').objects\\n                                builds.each { bc ->\\n                                    if (bc.spec.strategy.type != \"Pipeline\") {\\n                                        def latestBuild = openshift.selector(\"bc/${bc.metadata.name}\").related(\\'builds\\').max()\\n                                        latestBuild.untilEach { return it.object().status.phase == \"Complete\" }\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'githubNotify', 'raw_args': {'context': 'CI Deploys', 'description': 'job is running...', 'status': 'PENDING'}}",
    "rank_1_name": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD",
    "rank_1_content": "# PLEASE DO NOT USE THIS PLUGIN, USE https://github.com/jenkinsci/github-checks-plugin INSTEAD\n\n# Pipeline GitHub Notify Step Plugin\n\nThis step allows a pipeline job to notify a status for any GitHub commit.\n\nIntended for jobs that want to notify GitHub of any desired event with complete control over the\nnotification content. Including context, status or target url.\n\nThe available parameters are:\n\n* _credentialsId_: The id of the github's credentials to use, must be of type UsernameAndPassword\nand contain the password or a personal access token. Which one of them depends on the server configuration\n* _status_: The status to send, one of SUCCESS, FAILURE, ERROR or PENDING\n* _description_: The description that will appear at the notification\n* _context_: The notifications context, GH uses the context to diferentiate notifications (optional, jenkins/githubnotify is used by default)\n* _sha_: The sha that identifies the commit to notify status\n* _repo_: The repo that ows the commit we want to notify\n* _account_: The account that owns the repository;\n* _gitApiUrl_: GitHub Enterprise instance API URL (optional, https://api.github.com is used by default)\n* _targetUrl_: The targetUrl for the notification\n\n# Inferring parameter values\n\nIt may be cumbersome to specify all parameters, so this step will try to infer some of them if and only if\nare not provided. The parameters that can be inferred are:\n\n* _credentialsId_ Is inferred from the SCM used on the parent project\n* _repo_ is inferred from the Git Build Data of the current build\n* _sha_ is inferred from the Git Build Data of the current build\n* _account_ is inferred from the Git Build Data of the current build\n\n*Please note that infer will only work if you have Git Build Data and the parent of the Build has one and only one SCM, for example you created a Multibranch Pipeline\nproject and you are using a Jenkinsfile build mode. If you find problems when inferring please specify the\nrequired data explicitly. (You can access this data on your Jenkinsfile by using the appropriate env variables)*\n\n# Example\n\n```\ngithubNotify account: 'raul-arabaolaza', context: 'Final Test', credentialsId: 'raul-github',\n    description: 'This is an example', repo: 'acceptance-test-harness', sha: '0b5936eb903d439ac0c0bf84940d73128d5e9487'\n    , status: 'SUCCESS', targetUrl: 'https://my-jenkins-instance.com'\n```\n\n# Example with data inference and default values\n\n```\ngithubNotify description: 'This is a shorted example',  status: 'SUCCESS'\n``` \n (Distance: 0.7904)",
    "rank_1_distance": 0.7904,
    "rank_2_name": "moved to github",
    "rank_2_content": "moved to github \n (Distance: 0.8026)",
    "rank_2_distance": 0.8026,
    "rank_3_name": "Moved to Github.",
    "rank_3_content": "Moved to Github. \n (Distance: 0.8271)",
    "rank_3_distance": 0.8271
  },
  {
    "step": "{'name': 'script', 'raw_args': \"openshift.withCluster(env.OCP_API_SERVER, env.OCP_TOKEN) {\\n                        openshift.withProject(env.PR_CI_CD_PROJECT_NAME) {\\n                            timeout(time: 10, unit: 'MINUTES') {\\n                                openshift.selector('dc').each { dc ->\\n                                    dc.rollout().status()\\n                                }\\n                            }\\n                        }\\n                    }\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'openshift.withCluster(env.OCP_API_SERVER, env.OCP_TOKEN) {\\n                        [env.PR_CI_CD_PROJECT_NAME, env.PR_DEV_PROJECT_NAME, env.PR_TEST_PROJECT_NAME].each { project ->\\n                            if (openshift.projectExists(project)) {\\n                                openshift.deleteProject(project)\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': '[usernamePassword(credentialsId: \\'innoactive-docker-registry\\', passwordVariable: \\'REGISTRY_PASSWORD\\', usernameVariable: \\'REGISTRY_USERNAME\\')]) {\\n                    withEnv([\"DOCKER_REGISTRY_USERNAME=${REGISTRY_USERNAME}\", \"DOCKER_REGISTRY_PASSWORD=${REGISTRY_PASSWORD}\", \"INSTANCE_NAME_SUFFIX=-${SANITIZED_BUILD_TAG}\", \"PATH+VENV=${sh(script: \\'pipenv --venv\\', returnStdout: true).trim()}/bin\"]) {\\n                        ansiColor(\\'xterm\\') {\\n                            sh \"molecule test\"\\n                        }\\n\\n                        withCredentials([string(credentialsId: \\'molecule-hcloud-api-token\\', variable: \\'hcloud_api_token\\')]) {\\n                            withEnv([\"HCLOUD_TOKEN=$hcloud_api_token\"]) {\\n                                ansiColor(\\'xterm\\'', 'raw_block': 'sh \"molecule test -s saas\"\\n                                    sh \"molecule test -s with_cifs\"\\n                                }\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'script', 'raw_args': 'slackNotifier(currentBuild.currentResult)'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'timeout', 'raw_args': \"time: 30, unit: 'MINUTES'\", 'raw_block': \"input 'Should the site be deployed?'\"}",
    "rank_1_name": "= Build Timeout Plugin",
    "rank_1_content": "= Build Timeout Plugin\n\nThis plugin allows you to automatically terminate a build if it's taking too long.\n\nThis plugin isn't applicable to pipelines.\n\nUse the https://jenkins.io/doc/pipeline/steps/workflow-basic-steps/#timeout-enforce-time-limit[`+timeout+` step in workflow-basic-steps] instead.\n\n== Instructions for the user\n\n=== Global configuration\n\nGo to `Manage Jenkins` and then `Configure System`. Under the item `Global Build Time Out` you can activate a global \ntimeout which will be applied to any job. Choose your timeout strategy, the duration and add actions which should be \nexecuted at timeout.\n\nIn addition, the option can be activated that individual jobs can overwrite the global timeout if they \nprovide a corresponding build step.\n\nimage::doc/global-config.png[]\n\nNote that sometimes if a project is not of the `hudson.model.Project` type,\nthen the individual jobs would not be allowed to overwrite the global timeout.\n\n=== Build environment\n\nAlternatively, the timeout can be specified in the build environment of a job. \nTo do this, click `Configure` in the job view and in the build environment section, select the item \n`Terminate a build if it's stuck`.\n\nimage::doc/build-environment.png[]\n\nBecause Java only allows threads to be interrupted at a set of fixed locations, depending on how a build hangs, the abort operation might not take effect. For example,\n\n* if Jenkins is waiting for child processes to complete, it can abort right away.\n* if Jenkins is stuck in an infinite loop, it can never be aborted.\n* if Jenkins is doing a network or file I/O within the Java VM (such as lengthy file copy or SVN update), it cannot be aborted.\n\nSo if you think the build timeout isn't taking effect, our default assumption is that the build is hanging at the place that cannot be interrupted. If you suspect otherwise, please https://wiki.jenkins-ci.org/display/JENKINS/Build+is+hanging[obtain the thread dump] and report it.\n\n=== Build step\n\nAdd a new step `Run with timeout` at the section `Build`, add the timeout strategy and duration, add some actions and \nthe build step you want to execute within the timout step.\n\nimage::doc/build-step.png[]\n\n== For developers\n\nIf you are interested in contributing,\nplease pay attention to the below steps:\n\n=== To test\n\n[source,shell]\n----\nmvn verify\n----\n\n=== To build\n[source,shell]\n----\nmvn hpi:run\n----\n\nFor newcomers,\nplease see guide at https://www.jenkins.io/participate/[] for more information about how to participate and contribute.\n\n== Time-out actions with notes\n\n[cols=\",\",options=\"header\",]\n|===\n|Time-out action |Note\n|Abort and restart the build |Installing https://plugins.jenkins.io/naginator[Naginator Plugin] enables this action\n|===\n\ninclude::CHANGELOG.adoc[] \n (Distance: 1.2915)",
    "rank_1_distance": 1.2915,
    "rank_2_name": "# azure-sdk",
    "rank_2_content": "# azure-sdk\n\n## Introduction\n\nThis is an API plugin for Azure libraries. Users should not install this directly\n\n## Configuration\n\nIt is possible to configure some settings with Java System Properties, specified with `-Dproperty=value` in the command line.\n\n### Http Client\n\n* `io.jenkins.plugins.azuresdk.HttpClientRetriever.readTimeoutSeconds` - This sets the read timeout (in seconds) of the HTTP client used for Azure API requests.\n* `io.jenkins.plugins.azuresdk.HttpClientRetriever.responseTimeoutSeconds` - This sets the response timeout (in seconds) of the HTTP client used for Azure API requests.\n* `io.jenkins.plugins.azuresdk.HttpClientRetriever.writeTimeoutSeconds` - This sets the write timeout (in seconds) of the HTTP client used for Azure API requests.\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md)\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.3423)",
    "rank_2_distance": 1.3423,
    "rank_3_name": "# shutdown-queue",
    "rank_3_content": "# shutdown-queue\n\nThis plugin ensures that short jobs can overtake frozen queue during the shutdown time of long-running tasks.\n\nIn shutdown mode, no new jobs are scheduled. But if there is last 24h taking job, and queue is full of short jobs, it is wasted time to not run them.\nThis plugin, allows  to do exactly this. Set acceptance treshold, set strategy, and no longer waste HW cycles in long shutdown mode. \n\n**Note, that pluginis by default *off*, and you need to enable it in configure/Configue system**\n\n## Testing build\n`mvn hpi:run`\n\n## Performing release\nAlways test connection before release.\nTesting connection: `ssh -T git@github.com`\nRelease: `mvn release:prepare` && `mvn release:perform` \n (Distance: 1.3863)",
    "rank_3_distance": 1.3863
  },
  {
    "step": "{'name': 'script', 'raw_args': 'slackNotifier(currentBuild.currentResult)'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'dir', 'raw_args': '\"client-app\"', 'raw_block': \"sh 'npm install'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh '''\\n                    curl -qsL https://github.com/crate-ci/typos/releases/download/v1.5.0/typos-v1.5.0-x86_64-unknown-linux-musl.tar.gz | tar xvzf - ./typos\\n                    curl -qsL https://github.com/halkeye/typos-json-to-checkstyle/releases/download/v0.1.1/typos-checkstyle-v0.1.1-x86_64 > typos-checkstyle && chmod 0755 typos-checkstyle\\n                    ./typos --format json | ./typos-checkstyle - > checkstyle.xml || true\\n                    '''\\n                    recordIssues(tools: [checkStyle(id: 'typos', name: 'Typos', pattern: 'checkstyle.xml')])\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'timeout(time: 60, unit: \\'MINUTES\\') {\\n                        sh \\'\\'\\'#!/usr/bin/env bash\\n                        set -o errexit\\n                        set -o nounset\\n                        set -o pipefail\\n                        set -o xtrace\\n\\n                        make all\\n\\n                        illegal_htaccess_content=\"$( find content -name \\'.htaccess\\' -type f -exec grep --extended-regexp --invert-match \\'^(#|ErrorDocument)\\' {} \\\\\\\\; )\"\\n                        if [[ -n \"$illegal_htaccess_content\" ]] ; then\\n                            echo \"Failing build due to illegal content in .htaccess files, only ErrorDocument is allowed:\" >&2\\n                            echo \"$illegal_htaccess_content\" >&2\\n                            exit 1\\n                        fi\\n\\n                        illegal_filename=\"$( find . -name \\'*[<>]*\\' )\"\\n                        if [[ -n \"$illegal_filename\" ]] ; then\\n                            echo \"Failing build due to illegal filename:\" >&2\\n                            echo \"$illegal_filename\" >&2\\n                            exit 1\\n                        fi\\n                        \\'\\'\\'\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'build/**/*.zip', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(credentialsId: 'BLOBXFER_STORAGEACCOUNTKEY', variable: 'BLOBXFER_STORAGEACCOUNTKEY')]\", 'raw_block': \"sh './scripts/blobxfer upload --local-path /data/_site --storage-account-key $BLOBXFER_STORAGEACCOUNTKEY --storage-account prodjenkinsio --remote-path jenkinsio --recursive --mode file --skip-on-md5-match --file-md5'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'junit', 'raw_args': {'allowEmptyResults': 'true', 'testResults': 'build/test-results/test/*.xml'}}",
    "rank_1_name": "This plugin publishes test results of an execution of a testing tool in Jenkins.",
    "rank_1_content": "This plugin publishes test results of an execution of a testing tool in Jenkins.\n\n![](docs/images/xunit_features.JPG)\n\n# Features\n\n-   Records xUnit tests\n-   Mark the build unstable or fail according to threshold values\n\n# Supported tools\n\n## Embedded tools\n\n* JUnit (supported schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd) and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd))\n* [AUnit](http://libre.adacore.com/libre/tools/aunit/)\n* [MSTest](http://en.wikipedia.org/wiki/MSTest) (imported from [MSTest Plugin](https://github.com/jenkinsci/mstest-plugin))\n* [NUnit](http://www.nunit.org/index.php) (imported from [NUnit Plugin](https://github.com/jenkinsci/nunit-plugin))\n* [UnitTest++](http://unittest-cpp.sourceforge.net/)\n* [Boost Test Library](http://www.boost.org/doc/libs/1_39_0/libs/test/doc/html/index.html)\n* [PHPUnit](http://www.phpunit.de/)\n* [Free Pascal Unit](http://www.freepascal.org/units.html)\n* [CppUnit](https://sourceforge.net/projects/cppunit/)\n* [MbUnit](http://www.mbunit.com/)\n* [Googletest](http://code.google.com/p/googletest/)\n* [EmbUnit](http://embunit.sourceforge.net/embunit/index.html)\n* [gtester/glib](https://developer.gnome.org/glib/stable/gtester.html)\n* [QTestLib](http://doc.qt.io/qt-5/qtest-overview.html)\n\n## Other plugins as an extension of the xUnit plugin:\n\n* [Gallio](http://www.gallio.org/) ([Gallio plugin](https://github.com/jenkinsci/gallio-plugin))\n* [Parasoft C++Test tool](http://www.parasoft.com/jsp/products/cpptest.jsp) ([Cpptest Plugin](https://github.com/jenkinsci/parasoft-findings-plugin))\n* [JSUnit](http://www.jsunit.net/) ([JSUnit Plugin](https://github.com/jenkinsci/jsunit-plugin))\n* [JBehave](http://jbehave.org/reference/stable/hudson-plugin.html)\n* [TestComplete](http://smartbear.com/product/testcomplete/overview/) ([TestComplete xUnit Plugin](https://github.com/jenkinsci/testcomplete-xunit-plugin))\n\n## External contributions\n\nFor each xUnit tool, an embedded style sheet is used.\nHowever, the plugin also enables you to use a custom style sheet for your own tool such as :\n\n* [WebUI](http://github.com/versionone/webui-plugin)\n* [Ranorex](http://github.com/ranorex/ranorex-to-xunit)\n\n# Configuration\n\n## Job Configuration\n\n* Execute your testing tools manually or as a step of your build chain\n* Give a pattern that specifies your test results\n\n![](docs/images/xunit-conf-0.2.png)\n\n##  Provide User XSL\n\nIf you want to customise how a input report is transformed to a JUnit report of an existing tool type; xUnit provides a way to use your own XSL if placed at specific path.\nSpecify your XSLs in the `JENKINS_HOME/userContent` directory with the following convention:\n\n```\n$JENKINS_HOME/userContent/xunit/[toolName]/[version]/[any_name].xsl\n```\n\nFor example:\n\n```\n$JENKINS_HOME/userContent/xunit/AUnit/3.x/aunit-to-junit.xsl\n```\n\n**Note**: The tool name and the version are taken from the label in the combo box from the UI.\nIf the tool doesn't have a version (N/A), do not create a version directory.\n\n##  Custom Tool for unsupported formats\n\nXUnit supports a large number of report format, but not all.\nFor unsupported report type an user could provide an own stylesheet that convert the original report into a supported JUnit report.\n\nWhen choose the \"Custom Tool\" as tool type a path to the user XSL must be provided.\nThe path is relative and the plugin lookup the provided relative path using the following priority:\n\n1.  on Jenkins controller\n2.  on Jenkins agent\n3.  relative to workspace\n\nYou could also provide an URL to the stylesheet.\nIf the XSL file is placed in the `$JENKINS_HOME/userContent` folder, the file will be available under the URL\n`http(s)://$JENKINS_URL/userContent/<xsl file>`\n\n### Publish test result checks\n\nThis feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nWhen enabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\nIn the *Details* view of each check, test results will be displayed.\n\nIn order to enable the checks feature, set the property `skipPublishingChecks` to `false`\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  xunit (tools: [ BoostTest(pattern: 'integration/*.xml') ], skipPublishingChecks: false)\n}\n// no stage at all\nxunit (tools: [ BoostTest(pattern: 'boost/*.xml') ], skipPublishingChecks: false)\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    xunit (tools: [ MSTest(pattern: '**/*.trx') ], skipPublishingChecks: false)\n  }\n}\n```\n\n# xUnit Architecture\n\n## Global Architecture\n\nWhen this plugin is installed and configured, Jenkins can transform test result reports produced by different testing tools into JUnit test result format.\nThe JUnit tests can then be recorded by Jenkins.\nJenkins can provide useful information about test results, such as the historical test result trend, web UI for viewing test reports, tracking failures, and so on.\n\nUnder the hood, xUnit Jenkins plugin delegates processing to [DTKit](https://plugins.jenkins.io/dtkit/).\n\n![](docs/images/xunit_architecture.JPG)\n\n## DTKit Activities for XUnit\n\n![](docs/images/xunit_dtkit_activities.JPG)\n\n## DTKit Packaging\n\n## ![](docs/images/xunit_packaging.JPG)\n\n## Working with Pipelines\n\nIt is also possible to set an xUnit configuration in a pipeline job, but is somewhat more verbose.\n\nFor example, creating a boost pipeline (declarative) with the same\nconfiguration as above would be:\n\n**Example of pipeline**\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Test'){\n            steps {\n                sh \"run_tests.bash\"\n            }\n        }\n    }\n    post {\n        always{\n            xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ BoostTest(pattern: 'boost/*.xml') ]\n            )\n        }\n    }\n }\n```\n\n# Releases\n\n**Moved to [GitHub repository page](https://github.com/jenkinsci/xunit-plugin/releases/)**\n\n## Version 2.2.5\n\n#### Improvements\n\n-   [JENKINS-51645](https://issues.jenkins-ci.org/browse/JENKINS-51645) Add\n    support for claims plugin in xUnit (nfalco79 to Arnaud)\n-   [JENKINS-24224](https://issues.jenkins-ci.org/browse/JENKINS-24224) improve\n    xunit plugin with test-stability plugin (nfalco79 to Arnaud)\n\n#### Bugfixes\n\n-   [JENKINS-53186](https://issues.jenkins-ci.org/browse/JENKINS-53186) NUnit\n    2.x test cases with result Error are reported as Success (nfalco79)\n-   Fix lookup strategy when user provides a custom stylesheets file to\n    override the embedded one (nfalco79)\n-   [JENKINS-53034](https://issues.jenkins-ci.org/browse/JENKINS-53034) Failure\n    when validate NUnit 2.x reports generated by NUnit 3.x console\n    (nfalco79)\n-   [JENKINS-53036](https://issues.jenkins-ci.org/browse/JENKINS-53036) NPE\n    after upgrade to 2.2.1 when run publisher (nfalco79)\n-   [JENKINS-52908](https://issues.jenkins-ci.org/browse/JENKINS-52908) Newlines\n    get ignored in failure message and possibly stack trace when\n    uploading xUnitDotNet xml results (nfalco79)\n\n## Version 2.1.0\n\n#### Improvements\n\n-   [JENKINS-32920](https://issues.jenkins-ci.org/browse/JENKINS-32920)\n    Support for URL for stylesheet in Custom Tool (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-52512](https://issues.jenkins-ci.org/browse/JENKINS-52512)\n    Builds on agent fails when there is no report file even if set\n    to do not fail (nfalco79)\n-   [JENKINS-52400](https://issues.jenkins-ci.org/browse/JENKINS-52400)\n    xUnit miss to add required attributes when converts Valgrind reports\n    (nfalco79)\n\n## Version 2.0.4\n\n#### Improvements\n\n-   Improved GoogleTest, FPCUnit, CppTest XSLT to produce a report more\n    compliant with surefire XSD\n\n#### Bugfixes\n\n-   [JENKINS-52327](https://issues.jenkins-ci.org/browse/JENKINS-52327) java.nio.file.AccessDeniedException\n    on Publish xunit Custom tool test report (nfalco79 to greghoeppner)\n-   [JENKINS-52202](https://issues.jenkins-ci.org/browse/JENKINS-52202)\n    xUnit reports \"All test reports are empty\" in case of parallel steps\n    but reports are not empty (nfalco79)\n-   [JENKINS-52253](https://issues.jenkins-ci.org/browse/JENKINS-52253)\n    xUnit in case of multiple tool type processes only the first one\n    (nfalco79)\n-   [JENKINS-52173](https://issues.jenkins-ci.org/browse/JENKINS-52173)\n    xUnit fails when converting gtester/glib2 input to junit format\n    (nfalco79)\n-   [JENKINS-51604](https://issues.jenkins-ci.org/browse/JENKINS-51604) XPathExeption\n    when parsing QtTestLib Reports when a Test contains multiple\n    Incidents (nfalco79)\n-   [JENKINS-27860](https://issues.jenkins-ci.org/browse/JENKINS-27860) Build\n    does not stop if it is marked as Failure when the opportune option\n    is enabled (nfalco79)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194) xUnit\n    should not consider report generated by other xUnit step (nfalco79)\n-   [JENKINS-52107](https://issues.jenkins-ci.org/browse/JENKINS-52107) Convertion\n    exception for NUnit 2.1 reports because nunit-version attribute not\n    contains only digits (nfalco79)\n-   [JENKINS-41093](https://issues.jenkins-ci.org/browse/JENKINS-41093)\n    For Unittest++ xml, only the first failure of each test case is\n    recognized (nfalco79)\n-   [JENKINS-51767](https://issues.jenkins-ci.org/browse/JENKINS-51767)\n    xUnit 2.x XSD does not validate NUnit 2.x XML report file (nfalco79)\n-   [JENKINS-51797](https://issues.jenkins-ci.org/browse/JENKINS-51797)\n    xUnit.Net v2 parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51798](https://issues.jenkins-ci.org/browse/JENKINS-51798) GoogleTest\n    parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51561](https://issues.jenkins-ci.org/browse/JENKINS-51561)\n    xUnit plugin fails to parse NUnit 2 report format generated by NUnit\n    3.6.0.0 (nfalco79)\n-   [JENKINS-51465](https://issues.jenkins-ci.org/browse/JENKINS-51465)\n    Exception in XSL Transformation cause JEP-200 (nfalco79)\n-   [JENKINS-51481](https://issues.jenkins-ci.org/browse/JENKINS-51481)\n    Parse error occur when NUnit report have categories (nfalco79)\n-   [JENKINS-26227](https://issues.jenkins-ci.org/browse/JENKINS-26227)\n    xUnit plugin doesn't use OS culture when reads time values in\n    [xUnit.net](http://xunit.net/) output (nfalco79)\n-   [JENKINS-12417](https://issues.jenkins-ci.org/browse/JENKINS-12417)\n    xUnit problems with CppTest reports generated with default options\n    (nfalco79)\n-   [JENKINS-28871](https://issues.jenkins-ci.org/browse/JENKINS-28871)\n    CppTest 9.5 report file seems not valid for xUnit when no tests was\n    executed (nfalco79)\n\n## Version 2.0.0\n\n#### Breaking Changes\n\nI have introduce some schemas validation becase the large number of\nissues opened to xUnit plugin. Those issues are caused by custom\nattributes or XML DOM in the report generated by some user/tools report\nlogger also if they declare to produce a valid report file. This cause\nme to spend a lot of time to investigate what is right and what is wrong\nand how to implement the XSL without it goes in error during\ntransformation. \n\n-   **Official supported JUnit schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\n    and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd)).**\n\nIn case you are using a non java tools that declares to produce a JUnit\ncompatible report, ensure the report respects one of the widely used\nsupported schemas. If not than select as test type the build step\n\"Custom Tool\" and\nuse [this](https://github.com/jenkinsci/xunit-plugin/blob/master/docs/files/input.xsl)\nXSL as\ndescribed [here](#provide-user-xsl). The XSL is provided AS IS without any support.\n\n-   **NUnit 2.x (2.0 - 2.6) schema validation from official\n    distribution.**\n\nIn case you are using a tools that declares to produce a NUnit 2\ncompatible report, ensure the report respects the official schemas. If\nnot than select as test type the build step \"Custom Tool\" and provide a\nXSL as\ndescribed [here](#provide-user-xsl).\n\n#### Improvements\n\n-   Improved MSTest, MbUnit, AUnit, NUnit, QtTest XSLT to produce a\n    report more compliant with surefire XSD\n-   Change UI rendering of the report tool and clarify the pattern\n    description\n-   [JENKINS-37611](https://issues.jenkins-ci.org/browse/JENKINS-37611)\n    Add support for pipeline using @Symbol annotation to xunit and its\n    parameters (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-42715](https://issues.jenkins-ci.org/browse/JENKINS-42715)\n    xUnit does not support PHPUnit 5.x skipped attribute (nfalco79 to\n    ray)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194)\n    xUnit should not consider report generated by other xUnit step\n    (nfalco79)\n-   [JENKINS-10911](https://issues.jenkins-ci.org/browse/JENKINS-10911)\n    xUnit not detecting Ignored MSTest and NUnit Tests (nfalco79)\n-   [JENKINS-51347](https://issues.jenkins-ci.org/browse/JENKINS-51347)\n    Test Status \"notrun\" being reported as \"failed\" test (nfalco79)\n-   [JENKINS-13113](https://issues.jenkins-ci.org/browse/JENKINS-13113)\n    xUnit plugins detects MSTEST \"NotExecuted\" as successed instead of\n    skipped (nfalco79)\n\n## Version 1.104\n\n#### Improvements\n\n-   [JENKINS-33450](https://issues.jenkins-ci.org/browse/JENKINS-33450)\n    Support for NUnit3 which uses a different XML format by NUnit2\n    (nfalco79 to alexschwantes)\n\n-   [JENKINS-50658](https://issues.jenkins-ci.org/browse/JENKINS-50658)\n    Fix xsd to be compliant with surefire report and rerun option\n    (nfalco79 to alemorato)\n-   Move plugin to pipeline so that commits and pull request could be\n    checked for test failure\n\n#### Bugfixes\n\n-   [JENKINS-48945](https://issues.jenkins-ci.org/browse/JENKINS-48945)\n    Testreport lacks of those test in which the hashcode of two\n    different testsuite name coincide (nfalco79)\n-   [JENKINS-33385](https://issues.jenkins-ci.org/browse/JENKINS-33385)\n    Testresult doesn't show test name in case the package is empty\n    (nfalco79 to Zenger Alexander)\n\n-   [JENKINS-51056](https://issues.jenkins-ci.org/browse/JENKINS-51056)\n    xUnit throws NPE when no threshold was specified (nfalco79)\n-   [JENKINS-35660](https://issues.jenkins-ci.org/browse/JENKINS-35660)\n    QTestLib time information is lost (nfalco79 to kpop)\n-   [JENKINS-28471](https://issues.jenkins-ci.org/browse/JENKINS-28471)\n    xUnit should compare test results to last build where tests was\n    recorded to calculate correctly thresholds (nfalco79 to Jimilian)\n-   [JENKINS-50378](https://issues.jenkins-ci.org/browse/JENKINS-50378)\n    Skipped count percentage is affected by integer rounding (nfalco79\n    to pauljohnston2009)\n-   [JENKINS-42031](https://issues.jenkins-ci.org/browse/JENKINS-42031)\n    xUnit Plugin Does Not Parse Some Boost 1.63 Test Reports (nfalco79\n    to aschet)\n-   Relax BoostTest code line validation (nfalco79 to penberg)\n-   Ensure testuite time attribute is valid for NUnit\n-   [JENKINS-24382](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)\n    Add basic support for Unit\n\n## Version 1.100\n\n-   Fix\n    [JENKINS-30812](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    added parsing for gtest errors so that a failure to run a test is\n    considered a test failure\n-   Fix\n    [JENKINS-27240](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    Workflow integration XUnit as a SimpleBuildSte \n (Distance: 1.0227)",
    "rank_1_distance": 1.0227,
    "rank_2_name": "# JUnit Plugin for Jenkins",
    "rank_2_content": "# JUnit Plugin for Jenkins\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/junit.svg)](https://plugins.jenkins.io/junit)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/junit-plugin.svg?label=release)](https://github.com/jenkinsci/junit-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/junit.svg?color=blue)](https://plugins.jenkins.io/junit)\n\nThe JUnit plugin provides a publisher that consumes XML test reports generated during the builds and provides some graphical visualization of the historical test results \n(see [JUnit graph](https://wiki.jenkins.io/display/JENKINS/JUnit+graph) for a sample) \nas well as a web UI for viewing test reports, tracking failures, and so on. \nJenkins understands the JUnit test report XML format (which is also used by TestNG). \nWhen this option is configured, Jenkins can provide useful information about test results, such as trends.\n\nThe plugin also provides a generic API for other unit-test publisher plugins in Jenkins. This functionality was part of the Jenkins Core until it was split out to this plugin in version in 1.577.\n\n## Configuration\n\nThe JUnit publisher is configured at the job level by adding a Publish JUnit test result report post build action. The configuration parameters include:\n\n* **Test report XMLs:** Specify the path to JUnit XML files in the Ant glob syntax, such as `**/build/test-reports/*.xml`. \n  Be sure not to include any non-report files into this pattern. \n  You can specify multiple patterns of files separated by commas. \n  The base directory of the fileset is the workspace root.\n* **Retain long standard output/error:** If checked, any standard output or error from a test suite will be retained in the test results after the build completes. \n  (This refers only to additional messages printed to console, not to a failure stack trace). \n  Such output is always kept if the test failed, but by default lengthy output from passing tests is truncated to save space. \n  Check this option if you need to see every log message from even passing tests, but beware that Jenkins's memory consumption can substantially increase as a result, even if you never look at the test results!\n* **Health report amplification factor:** The amplification factor to apply to test failures when computing the test result contribution to the build health score. \n  The default factor is 1.0. A factor of 0.0 will disable the test result contribution to build health score, and, as an example, a factor of 0.5 means that 10% of tests failing will score 95% health. \n  The factor is persisted with the build results, so changes will only be reflected in new builds.\n* **Allow empty results:** If checked, the default behavior of failing a build on missing test result files or empty test results is changed to not affect the status of the build. \n  Please note that this setting make it harder to spot misconfigured jobs or build failures where the test tool does not exit with an error code when not producing test report files.\n* **Skip publishing checks:** If this option is unchecked, then the plugin automatically publishes the test results to corresponding SCM hosting platforms.\n  For example, if you are using this feature for a GitHub organization project, the warnings will be published to\n  GitHub through the Checks API. If this operation slows down your build, or you don't want to publish the warnings to\n  SCM platforms, you can use this option to deactivate this feature.\n* **Checks name:** If provided, and publishing checks enabled, the plugin will use this name when publishing\n  results to corresponding SCM hosting platforms. If not, a default of \"Test\" will be used.\n* **Skip marking build unstable:**  If this option is unchecked, then the plugin will mark the build as unstable when it finds at least 1 test failure.\n    If this option is checked, then the build will still be successful even if there are test failures reported.\n    In any case, the corresponding pipeline node (and stage) will be marked as unstable in case of test failure.\n    In order to enable this, set the property: \n    `skipMarkingBuildUnstable` to `true`:\n    \n      junit skipMarkingBuildUnstable: true, testResults: 'test-results.xml'\n      \n### Test result checks (for GitHub projects)\n\n:warning: This feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nIf not disabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\n\nIn the *Details* view of each check ([example](https://github.com/timja-org/junit-attachments-test/pull/4/checks?check_run_id=1237630805)), test results will be displayed.\n\n![checks](images/checks.png)\n\nIn order to disable the checks feature, set the property `skipPublishingChecks` to `true`:\n```groovy\njunit skipPublishingChecks: true, testResults: 'test-results.xml'\n```\n\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  junit 'test-results.xml'\n}\n\njunit 'more-test-results.xml'\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    junit 'yet-more-test-results.xml'\n  }\n}\n```\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md) \n (Distance: 1.0300)",
    "rank_2_distance": 1.03,
    "rank_3_name": "This project hosts a sample project that runs Selenium as an unit test.",
    "rank_3_content": "This project hosts a sample project that runs Selenium as an unit test.\n\nIt works with junit-attachment plugin as well. \n (Distance: 1.0360)",
    "rank_3_distance": 1.036
  },
  {
    "step": "{'name': 'publishHTML', 'raw_args': \"\\n                        target: [\\n                            alwaysLinkToLastBuild: false,\\n                            keepAll: true,\\n                            reportDir: 'build/reports/spotbugs/',\\n                            reportFiles: '*.html',\\n                            reportName: 'SpotBugs'\\n                        ]\\n                    \"}",
    "rank_1_name": "# Rich Text Publisher Plugin",
    "rank_1_content": "# Rich Text Publisher Plugin\n\n\n\nNow featuring pipeline plugin support\n\n\n\nA plugin adds a configurable post-build step which publishes arbitrary rich text at the Project and Build pages.\n\nThe following markup languages are supported: HTML, WikiText, Confluence. Build parameters or whole files from workspace may be embedded into text.\n\n\n\nCopyright (c) 2013 Dmitry Korotkov. See LICENSE for further details. \n (Distance: 1.1355)",
    "rank_1_distance": 1.1355,
    "rank_2_name": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">",
    "rank_2_content": "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 3.2//EN\">\n<html>\n<head>\n<title>&lt;dom4j&gt; the flexible XML framework for Java</title>\n</head>\n<body>\n<table border=\"0\" width=\"100%\">\n<tr>\n<td><a href=\"http://dom4j.org\"><img border=\"0\" src=\"src/doc/style/images/logo.gif\" alt=\"&lt;dom4j&gt;\"></a></td>\n<td><font size=\"5\">The flexible XML framework for Java</font></td>\n</tr>\n\n<tr>\n<td>&nbsp;</td>\n</tr>\n</table>\n\n<table width=\"100%\">\n<tr>\n<td bgcolor=\"#0066FF\" bordercolor=\"#FFFFFF\">\n<h2>Introduction</h2>\n</td>\n</tr>\n\n<tr>\n<td>\n<p>Thank you for downloading DOM4J we hope you find it useful.</p>\n\n<p>DOM4J is an open source framework for processing XML which is integrated with XPath and fully supports DOM, SAX, JAXP and the Java platform such as Java 2 Collections.</p>\n\n<p>&nbsp;</p>\n</td>\n</tr>\n\n<tr>\n<td bgcolor=\"#0066FF\">\n<h2>Building instructions</h2>\n</td>\n</tr>\n\n<tr>\n<td>\n<p>The build process in DOM4J uses <a href=\"http://jakarta.apache.org/ant/index.html\">Ant</a>. The prerequisites for running the Ant build system included with this release are that:-</p>\n\n<ul>\n<li>\n<p>You have a JDK installed on your machine such that the <i>java</i> executable is in your PATH</p>\n</li>\n\n<li>\n<p>You have the <b>JAVA_HOME</b> environment variable defined to point to the directory in which the JDK is installed. For example on Windows this might be <a href=\"file:///C:/jdk1.3\">C:\\jdk1.3</a>\nor on Unix it might be /usr/local/jdk1.3.</p>\n</li>\n</ul>\n\n<p>In the root directory of this distribution there should be a script which runs on most popular operating systems to build a supplied target using Ant.&nbsp;</p>\n\n<p>Choose the most suitable script for your platform from the scripts below and typing in the command line expression on the right hand side should display a list of available targets in the Ant\nbuild system.</p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Script</b></td>\n<td><b>Command line</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>build.bat</td>\n<td>build usage</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>build.sh</td>\n<td>./build.sh usage</td>\n</tr>\n</table>\n\n<p>&nbsp;</p>\n</td>\n</tr>\n\n<tr>\n<td bgcolor=\"#0066FF\">\n<h2>Running the example programs</h2>\n</td>\n</tr>\n</table>\n\n<p><font face=\"Verdana\">There are a collection of sample programs that come with the DOM4J distribution. To run any of them you should first build the examples using Ant.</font></p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Command line</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>build samples</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>./build.sh samples</td>\n</tr>\n</table>\n\n<p><font face=\"Verdana\">Once that is done there is a run script to run a sample program which sets up the CLASSPATH correctly.</font></p>\n\n<table border=\"0\">\n<tr>\n<td><b>Operating System</b></td>\n<td><b>Command line</b></td>\n<td><b>Example</b></td>\n</tr>\n\n<tr>\n<td>Windows (NT, 2000)</td>\n<td>run &lt;className&gt; &lt;arguments&gt;</td>\n<td>run SAXDemo xml\\web.xml</td>\n</tr>\n\n<tr>\n<td>Unixes (Linux, Solaris etc).</td>\n<td>./run.sh &lt;className&gt; &lt;arguments&gt;</td>\n<td>./run.sh SAXDemo xml/web.xml</td>\n</tr>\n</table>\n</body>\n</html> \n (Distance: 1.2286)",
    "rank_2_distance": 1.2286,
    "rank_3_name": "# seleniumhtmlreport",
    "rank_3_content": "# seleniumhtmlreport\n\nThis plugin visualizes the results of selenium tests.\n\n# Description\n\nThe seleniumhtmlreport plugin scans the selenium test results directory\nfor html files created by selenium tests and creates an overview of the\nexecuted tests.\n\nAll html result files will be copied into the subdirectory\n\"seleniumReports\" of the build root directory.\n\nAll results will be read from the html result files. In the overview is\nfor each html result file a link to it.\n\n![seleniumhtmlreport_overview](docs/images/seleniumhtmlreport_overview.jpg)\n\n## Configuration\n\nIf you activate the Post-Build-Action \"Publish Selenium Html Report\" you\ncan insert the location of your selenium test results into the text\ninput box with the label \"Selenium tests results location\". Insert a\nlocation relative to your workspace.\n\n![seleniumhtmlreport_config](docs/images/seleniumhtmlreport_config.jpg)\n\n# Feedback\n\nThis plugin is developed and maintained by Marco Machmer with kind\nsupport from [Abas Software AG](http://www.abas.de/). Please feel free\nto contact me for feedback. If you have suggestions for new features or\nyou've found a bug, please use the [issue\ntracker](https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20seleniumhtmlreport-plugin). \n (Distance: 1.2712)",
    "rank_3_distance": 1.2712
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'SUCCESS', stageResult: 'FAILURE'\", 'raw_block': \"sh '''python3.7 -m pip install --user git+https://github.com/chime-experiment/comet.git@master'''\"}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'container', 'raw_args': \"'goreleaser'\", 'raw_block': \"sh 'go test'\"}",
    "rank_1_name": "= Docker inbound agents",
    "rank_1_content": "= Docker inbound agents\n\nThis repository is a collection of Docker images which combine the basics\nto run a Jenkins inbound agent with a standard Docker image.\n\nThis makes it easy to use upstream images from as Kubernetes pod templates,\nAzure Container Instances, AWS ECS/Fargate, or within other Jenkins agent\nsystems which rely on using an inbound agent. \n (Distance: 1.3278)",
    "rank_1_distance": 1.3278,
    "rank_2_name": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully.",
    "rank_2_content": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully. \n\n#### Parameters\n###### MasterUrl \nMasterUrl is the endpoint of a container cluster.you can find the value on the console of  <a href=\"https://cs.console.aliyun.com/#/cluster\" target=\"_blank\"/>Aliyun Container Service</a>.\n\n<img src=\"/picture/ded60b9589c65187ed6b1d8965bbae96.png\" width=80% style=\"max-width=1000px\"/>\n<img src=\"/picture/4446ae8b09a2a4a04e9488fdd4f07059.png\" width=80% style=\"max-width=1000px\"/>     \n\n###### ApplicationName \nApplication is a logical concept in Aliyun Container Service.Application is the mininum unit of a single releasement.A standard application consist of several services and a service consist of serveral containers.If you want to deploy a application to Aliyun Container Service. You need to come up a awesome name firstly üòä.\n###### ComposeTemplate \nComposeTemplate is the configuration of the application. The blank requires the relative path of the docker-compose.If your docker-compose.yml is under the path of docker/docker-compose.yml.Just fill the blank with the path.\n###### HostCredetials \nHostCredetials are the certs of the target cluster. You can visit the remote container cluster with the specific certs on any computer with a docker client.\n\n<img src=\"/picture/15e3bddcde04166a6b41843cab7642ec.png\" width=80% style=\"max-width=1000px\"/>         \nopen the pem files , extract the content and fill the blank below.\n<img src=\"/picture/04d625cf2e2a982376e94768fca74755.png\" width=80% style=\"max-width=1000px\"/> \n (Distance: 1.4013)",
    "rank_2_distance": 1.4013,
    "rank_3_name": "# StackRox Container Image Scanner",
    "rank_3_content": "# StackRox Container Image Scanner\nThe **StackRox Container Image Scanner** plugin enables scanning of\ncontainer images for published software vulnerabilities. You can add it\nas a build step in your freestyle projects or pipeline, to ensure your\ninfrastructure is in adherence with the StackRox Kubernetes Security\nPlatform vulnerability management policies.\n\nThe **[StackRox Kubernetes Security\nPlatform](https://www.stackrox.com/)** protects your cloud-native\napplications across the entire container lifecycle: build, deploy, and\nruntime. Leverage StackRox to gain visibility into your cloud-native\nenvironment, to detect vulnerabilities and misconfigurations in your\ncontainer images and Kubernetes deployments, to identify high-risk\nruntime activity, and to meet your internal and external compliance\nrequirements.\n\n**Contents**\n- [Prerequisites](#prerequisites)\n- [Install the StackRox Container Image Scanner plugin](#install-the-stackrox-container-image-scanner-plugin)\n    - [Web UI](#web-ui)\n    - [Jenkins CLI](#jenkins-cli)\n- [Use the StackRox Container Image Scanner plugin](#use-the-stackrox-container-image-scanner-plugin)\n    - [Freestyle project](#freestyle-project)\n    - [Pipeline](#pipeline)\n- [View scan reports](#view-scan-reports)\n\n## Prerequisites\n\nTo install, configure, and use the StackRox Container Image Scanner\nplugin you must meet the following requirements:\n\n1.  Use Jenkins version LTS 2.204.1 or newer.\n\n2.  Use the StackRox Kubernetes Security Platform version 3.0.38 or\n    newer.\n\n3.  [Create an API\n    token](https://help.stackrox.com/docs/use-the-api/#authentication)\n    with the Continuous Integration (CI) role in the StackRox Kubernetes\n    Security Platform.\n\n4.  [Integrate the StackRox Kubernetes Security Platform with the image\n    registry](https://help.stackrox.com/docs/integrate-with-other-tools/integrate-with-image-registries/)\n    you use.\n\n## Install the StackRox Container Image Scanner plugin\n\nYou can use [Web UI](#web-ui) or [Jenkins CLI](#jenkins-cli) to install\nthe StackRox Container Image Scanner plugin.\n\n### Web UI\n\nUse the Jenkins Plugin Manager in your Jenkins instance to install the\nStackRox Container Image Scanner plugin.\n\n1.  On the Jenkins homepage, go to the **Manage Jenkins** &gt; **Manage\n    Plugins** view.\n\n2.  Select the **Available** tab.\n\n3.  Enter **stackrox** in the **Filter** box to search for the StackRox\n    Container Image Scanner plugin.\n\n4.  Select the checkbox under the **Install** column for the **StackRox\n    Container Image Scanner** plugin.\n\n5.  Select **Install without restart**.\n\n### Jenkins CLI\n\nUse the `install-plugin` command in [Jenkins\nCLI](https://jenkins.io/doc/book/managing/cli/) to install the StackRox\nContainer Image Scanner plugin.\n\n``` {.bash}\njava -jar jenkins-cli.jar -s <jenkins-address> install-plugin stackrox-container-image-scanner -deploy\n```\n\n## Use the StackRox Container Image Scanner plugin\n\nYou can use the StackRox Container Image Scanner plugin in both\nfreestyle projects and pipelines.\n\n> **Important**\n>\n> You must push your images to the registry you configured in your build\n> steps, before you invoke the StackRox Container Image Scanner plugin\n> step in a Jenkins FreeStyle project or a Pipeline.\n\n### Freestyle project\n\n1. Add the StackRox Container Image Scanner plugin step. Select **Add\n    build step** &gt; **StackRox Image Security**.\n\n2. Enter details for the following plugin configuration variables:\n\n    <table>\n    <colgroup>\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    </colgroup>\n    <thead>\n    <tr class=\"header\">\n    <th>Variable</th>\n    <th>Name</th>\n    <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"odd\">\n    <td><p><code>portalAddress</code></p></td>\n    <td><p>Portal address <sup>*</sup></p></td>\n    <td><p>Your StackRox Portal address.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>apiToken</code></p></td>\n    <td><p>API token <sup>*</sup></p></td>\n    <td><p>The StackRox access token with the Continuous Integration (CI) authorization role.</p></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>enableTLSVerification</code></p></td>\n    <td><p>Enable TLS verification</p></td>\n    <td><p>Use it to enable TLS. You must also specify a CA certificate.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>caCertPEM</code></p></td>\n    <td><p>CA certificate</p></td>\n    <td><p>Use it to specify a CA certificate in PEM format. Make sure to include the BEGIN CERTIFICATE and END CERTIFICATE tags for your certificate.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>You can download the certificate in PEM format from the sensor bundle in any of cluster where you‚Äôve installed StackRox Sensor. If you don‚Äôt have administrative access to your cluster, please ask your system administrator to get the certificate.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>failOnCriticalPluginError</code></p></td>\n    <td><p>Fail on critical plugin errors</p></td>\n    <td><p>Enable this to fail the build if the plugin encounters any errors. This value is <code>TRUE</code> by default.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>failOnPolicyEvalFailure</code></p></td>\n    <td><p>Fail if policy violations exist</p></td>\n    <td><p>Enable this to fail the build if scanned images violate any <a href=\"https://help.stackrox.com/docs/deploy-security-policies/\">enforced system policies</a> in the StackRox Kubernetes Security Platform. This value is <code>TRUE</code> by default.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>imageNames</code></p></td>\n    <td><p>Comma separated list of images to scan</p></td>\n    <td><p>If you leave it blank then provide list in <code>$BUILD_TAG/rox_images_to_scan</code> file.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"even\">\n    <td colspan=\"3\"><p><em><sup>*</sup> Required</em></p></td>\n    </tr>\n    </tbody>\n    </table>\n\n    ![plugin config](./src/main/resources/img/plugin-config.png)\n\n3. If you need to generate list of images to scan. Then leave `Images Names` field bank and\nadd a build step in your project to save names of all the images you want to scan in the\n       `<jenkins-workspace>/${BUILD_TAG}/rox_images_to_scan` file. Each\n       image name must be on a separate line.\n\n![build step](./src/main/resources/img/build-step.png)\n\nFor example, to do this:\n\n-   Select **Add build step** &gt; **Execute shell**.\n\n-   In the command box, enter:\n\n    ``` {.bash}\n    mkdir $BUILD_TAG\n    cd $BUILD_TAG\n    echo \"nginx:latest\" >> rox_images_to_scan\n    echo \"stackrox/vuln-images:django-cve-2019-14235\" >> rox_images_to_scan\n    ```\n\n4. Select **Save** and then select **Apply**.\n\n### Pipeline\n\nTo use the StackRox Container Image Scanner plugin in your pipeline:\n\n1.  Go to the pipeline configuration screen.\n\n2.  In the **Script** text area, enter the following script:\n    ```groovy\n    pipeline {\n        agent any\n\n        stages {\n            stage('Test') {\n                steps {\n                    stackrox (\n                        apiToken: '...',\n                        caCertPEM: '',\n                        enableTLSVerification: false,\n                        failOnCriticalPluginError: true,\n                        failOnPolicyEvalFailure: true,\n                        portalAddress: 'https://central.stackrox:443',\n                        imageNames: \"nginx:latest,ubuntu:bionic,busybox:stable\"\n                    )\n                }\n            }\n        }\n    }\n    ```\n\n    -   For more information about the variables, see the [plugin\n        configuration variables](#plugin-configuration-variables)\n        section.\n\n    ![plugin pipeline](./src/main/resources/img/plugin-pipeline.png)\n\n## View scan reports\n\nWhenever you use the StackRox Container Image Scanner plugin to scan\nimages, the StackRox Container Image Scanner creates reports as build\nartifacts. These reports include detailed information in CSV format. The\nStackRox Container Image Scanner generates the following two CSV format\nreports for every scanned image:\n\n1.  CVEs found in the image.\n\n2.  Policy violations for the image.\n\nThe StackRox Container Image Scanner also creates an HTML report for\nevery build. This report includes a summary of the scan results for all\nscanned images in your environment.\n\nTo view the HTML report:\n\n1.  Select **StackRox Image Security Report** from the left-hand\n    navigation menu.\n\n    ![view html report](./src/main/resources/img/view-html-report.png) \n (Distance: 1.4147)",
    "rank_3_distance": 1.4147
  },
  {
    "step": "{'name': 'container', 'raw_args': \"'goreleaser') {\\n                    sh 'git fetch --tag'\\n                    withCredentials([usernamePassword(credentialsId: 'jenkins-credential-github', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_TOKEN')]\", 'raw_block': 'script {\\n                            sh \"goreleaser release --parallelism=1 ${BRANCH_NAME != \\'master\\' ? \\'--skip-publish\\' : \\'\\'}\"\\n                        }\\n                    }'}",
    "rank_1_name": "= Docker inbound agents",
    "rank_1_content": "= Docker inbound agents\n\nThis repository is a collection of Docker images which combine the basics\nto run a Jenkins inbound agent with a standard Docker image.\n\nThis makes it easy to use upstream images from as Kubernetes pod templates,\nAzure Container Instances, AWS ECS/Fargate, or within other Jenkins agent\nsystems which rely on using an inbound agent. \n (Distance: 1.3278)",
    "rank_1_distance": 1.3278,
    "rank_2_name": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully.",
    "rank_2_content": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully. \n\n#### Parameters\n###### MasterUrl \nMasterUrl is the endpoint of a container cluster.you can find the value on the console of  <a href=\"https://cs.console.aliyun.com/#/cluster\" target=\"_blank\"/>Aliyun Container Service</a>.\n\n<img src=\"/picture/ded60b9589c65187ed6b1d8965bbae96.png\" width=80% style=\"max-width=1000px\"/>\n<img src=\"/picture/4446ae8b09a2a4a04e9488fdd4f07059.png\" width=80% style=\"max-width=1000px\"/>     \n\n###### ApplicationName \nApplication is a logical concept in Aliyun Container Service.Application is the mininum unit of a single releasement.A standard application consist of several services and a service consist of serveral containers.If you want to deploy a application to Aliyun Container Service. You need to come up a awesome name firstly üòä.\n###### ComposeTemplate \nComposeTemplate is the configuration of the application. The blank requires the relative path of the docker-compose.If your docker-compose.yml is under the path of docker/docker-compose.yml.Just fill the blank with the path.\n###### HostCredetials \nHostCredetials are the certs of the target cluster. You can visit the remote container cluster with the specific certs on any computer with a docker client.\n\n<img src=\"/picture/15e3bddcde04166a6b41843cab7642ec.png\" width=80% style=\"max-width=1000px\"/>         \nopen the pem files , extract the content and fill the blank below.\n<img src=\"/picture/04d625cf2e2a982376e94768fca74755.png\" width=80% style=\"max-width=1000px\"/> \n (Distance: 1.4013)",
    "rank_2_distance": 1.4013,
    "rank_3_name": "# StackRox Container Image Scanner",
    "rank_3_content": "# StackRox Container Image Scanner\nThe **StackRox Container Image Scanner** plugin enables scanning of\ncontainer images for published software vulnerabilities. You can add it\nas a build step in your freestyle projects or pipeline, to ensure your\ninfrastructure is in adherence with the StackRox Kubernetes Security\nPlatform vulnerability management policies.\n\nThe **[StackRox Kubernetes Security\nPlatform](https://www.stackrox.com/)** protects your cloud-native\napplications across the entire container lifecycle: build, deploy, and\nruntime. Leverage StackRox to gain visibility into your cloud-native\nenvironment, to detect vulnerabilities and misconfigurations in your\ncontainer images and Kubernetes deployments, to identify high-risk\nruntime activity, and to meet your internal and external compliance\nrequirements.\n\n**Contents**\n- [Prerequisites](#prerequisites)\n- [Install the StackRox Container Image Scanner plugin](#install-the-stackrox-container-image-scanner-plugin)\n    - [Web UI](#web-ui)\n    - [Jenkins CLI](#jenkins-cli)\n- [Use the StackRox Container Image Scanner plugin](#use-the-stackrox-container-image-scanner-plugin)\n    - [Freestyle project](#freestyle-project)\n    - [Pipeline](#pipeline)\n- [View scan reports](#view-scan-reports)\n\n## Prerequisites\n\nTo install, configure, and use the StackRox Container Image Scanner\nplugin you must meet the following requirements:\n\n1.  Use Jenkins version LTS 2.204.1 or newer.\n\n2.  Use the StackRox Kubernetes Security Platform version 3.0.38 or\n    newer.\n\n3.  [Create an API\n    token](https://help.stackrox.com/docs/use-the-api/#authentication)\n    with the Continuous Integration (CI) role in the StackRox Kubernetes\n    Security Platform.\n\n4.  [Integrate the StackRox Kubernetes Security Platform with the image\n    registry](https://help.stackrox.com/docs/integrate-with-other-tools/integrate-with-image-registries/)\n    you use.\n\n## Install the StackRox Container Image Scanner plugin\n\nYou can use [Web UI](#web-ui) or [Jenkins CLI](#jenkins-cli) to install\nthe StackRox Container Image Scanner plugin.\n\n### Web UI\n\nUse the Jenkins Plugin Manager in your Jenkins instance to install the\nStackRox Container Image Scanner plugin.\n\n1.  On the Jenkins homepage, go to the **Manage Jenkins** &gt; **Manage\n    Plugins** view.\n\n2.  Select the **Available** tab.\n\n3.  Enter **stackrox** in the **Filter** box to search for the StackRox\n    Container Image Scanner plugin.\n\n4.  Select the checkbox under the **Install** column for the **StackRox\n    Container Image Scanner** plugin.\n\n5.  Select **Install without restart**.\n\n### Jenkins CLI\n\nUse the `install-plugin` command in [Jenkins\nCLI](https://jenkins.io/doc/book/managing/cli/) to install the StackRox\nContainer Image Scanner plugin.\n\n``` {.bash}\njava -jar jenkins-cli.jar -s <jenkins-address> install-plugin stackrox-container-image-scanner -deploy\n```\n\n## Use the StackRox Container Image Scanner plugin\n\nYou can use the StackRox Container Image Scanner plugin in both\nfreestyle projects and pipelines.\n\n> **Important**\n>\n> You must push your images to the registry you configured in your build\n> steps, before you invoke the StackRox Container Image Scanner plugin\n> step in a Jenkins FreeStyle project or a Pipeline.\n\n### Freestyle project\n\n1. Add the StackRox Container Image Scanner plugin step. Select **Add\n    build step** &gt; **StackRox Image Security**.\n\n2. Enter details for the following plugin configuration variables:\n\n    <table>\n    <colgroup>\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    </colgroup>\n    <thead>\n    <tr class=\"header\">\n    <th>Variable</th>\n    <th>Name</th>\n    <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"odd\">\n    <td><p><code>portalAddress</code></p></td>\n    <td><p>Portal address <sup>*</sup></p></td>\n    <td><p>Your StackRox Portal address.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>apiToken</code></p></td>\n    <td><p>API token <sup>*</sup></p></td>\n    <td><p>The StackRox access token with the Continuous Integration (CI) authorization role.</p></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>enableTLSVerification</code></p></td>\n    <td><p>Enable TLS verification</p></td>\n    <td><p>Use it to enable TLS. You must also specify a CA certificate.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>caCertPEM</code></p></td>\n    <td><p>CA certificate</p></td>\n    <td><p>Use it to specify a CA certificate in PEM format. Make sure to include the BEGIN CERTIFICATE and END CERTIFICATE tags for your certificate.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>You can download the certificate in PEM format from the sensor bundle in any of cluster where you‚Äôve installed StackRox Sensor. If you don‚Äôt have administrative access to your cluster, please ask your system administrator to get the certificate.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>failOnCriticalPluginError</code></p></td>\n    <td><p>Fail on critical plugin errors</p></td>\n    <td><p>Enable this to fail the build if the plugin encounters any errors. This value is <code>TRUE</code> by default.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>failOnPolicyEvalFailure</code></p></td>\n    <td><p>Fail if policy violations exist</p></td>\n    <td><p>Enable this to fail the build if scanned images violate any <a href=\"https://help.stackrox.com/docs/deploy-security-policies/\">enforced system policies</a> in the StackRox Kubernetes Security Platform. This value is <code>TRUE</code> by default.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>imageNames</code></p></td>\n    <td><p>Comma separated list of images to scan</p></td>\n    <td><p>If you leave it blank then provide list in <code>$BUILD_TAG/rox_images_to_scan</code> file.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"even\">\n    <td colspan=\"3\"><p><em><sup>*</sup> Required</em></p></td>\n    </tr>\n    </tbody>\n    </table>\n\n    ![plugin config](./src/main/resources/img/plugin-config.png)\n\n3. If you need to generate list of images to scan. Then leave `Images Names` field bank and\nadd a build step in your project to save names of all the images you want to scan in the\n       `<jenkins-workspace>/${BUILD_TAG}/rox_images_to_scan` file. Each\n       image name must be on a separate line.\n\n![build step](./src/main/resources/img/build-step.png)\n\nFor example, to do this:\n\n-   Select **Add build step** &gt; **Execute shell**.\n\n-   In the command box, enter:\n\n    ``` {.bash}\n    mkdir $BUILD_TAG\n    cd $BUILD_TAG\n    echo \"nginx:latest\" >> rox_images_to_scan\n    echo \"stackrox/vuln-images:django-cve-2019-14235\" >> rox_images_to_scan\n    ```\n\n4. Select **Save** and then select **Apply**.\n\n### Pipeline\n\nTo use the StackRox Container Image Scanner plugin in your pipeline:\n\n1.  Go to the pipeline configuration screen.\n\n2.  In the **Script** text area, enter the following script:\n    ```groovy\n    pipeline {\n        agent any\n\n        stages {\n            stage('Test') {\n                steps {\n                    stackrox (\n                        apiToken: '...',\n                        caCertPEM: '',\n                        enableTLSVerification: false,\n                        failOnCriticalPluginError: true,\n                        failOnPolicyEvalFailure: true,\n                        portalAddress: 'https://central.stackrox:443',\n                        imageNames: \"nginx:latest,ubuntu:bionic,busybox:stable\"\n                    )\n                }\n            }\n        }\n    }\n    ```\n\n    -   For more information about the variables, see the [plugin\n        configuration variables](#plugin-configuration-variables)\n        section.\n\n    ![plugin pipeline](./src/main/resources/img/plugin-pipeline.png)\n\n## View scan reports\n\nWhenever you use the StackRox Container Image Scanner plugin to scan\nimages, the StackRox Container Image Scanner creates reports as build\nartifacts. These reports include detailed information in CSV format. The\nStackRox Container Image Scanner generates the following two CSV format\nreports for every scanned image:\n\n1.  CVEs found in the image.\n\n2.  Policy violations for the image.\n\nThe StackRox Container Image Scanner also creates an HTML report for\nevery build. This report includes a summary of the scan results for all\nscanned images in your environment.\n\nTo view the HTML report:\n\n1.  Select **StackRox Image Security Report** from the left-hand\n    navigation menu.\n\n    ![view html report](./src/main/resources/img/view-html-report.png) \n (Distance: 1.4147)",
    "rank_3_distance": 1.4147
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': {'channel': '#jenkins', 'color': 'good', 'message': 'BUILD SUCCESS: ${currentBuild.fullDisplayName}\\\\n${currentBuild.absoluteUrl}'}}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': {'channel': '#jenkins', 'color': 'danger', 'message': 'BUILD FAILURE: ${currentBuild.fullDisplayName}\\\\n${currentBuild.absoluteUrl}'}}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'slackSend', 'raw_args': {'channel': '#jenkins', 'color': 'warning', 'message': 'BUILD UNSTABLE: ${currentBuild.fullDisplayName}\\\\n${currentBuild.absoluteUrl}'}}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.3748)",
    "rank_1_distance": 1.3748,
    "rank_2_name": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂",
    "rank_2_content": "# jenkinsÈòøÈáå‰∫ëOSS‰∏ä‰º†Êèí‰ª∂\n\n## ‰ΩøÁî®\n\n1.‰∏ãËΩΩÊ∫êÁ†Å&ÁºñËØë\n\n```bash\ngit clone https://github.com/jenkinsci/aliyun-oss-uploader-plugin.git\ncd aliyun-oss-uploader-plugin\nmvn package -DskipTests\n```\n2.Âú®pluginsÁÆ°ÁêÜÈ°µÈù¢‰∏ä‰º†target‰∏ãÁöÑhpiÊñá‰ª∂Âπ∂ÂÆâË£ÖÔºåÈáçÂêØjenkins\n\n3.‰øÆÊîπÈ°πÁõÆÔºåÂ¢ûÂä†`ÊûÑÂª∫ÂêéÊìç‰Ωú`ÔºåÈÄâÊã©`ÈòøÈáå‰∫ëOSS‰∏ä‰º†`\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step1.png)\n\n4.Â°´ÂÜôÈòøÈáå‰∫ëOSSÈÖçÁΩÆ‰ø°ÊÅØ\n![](https://github.com/jenkinsci/aliyun-oss-uploader-plugin/raw/master/image/step2.png)\n\n> Êú¨Âú∞Ë∑ØÂæÑ‰∏∫Áõ∏ÂØπ‰∫éworkspaceÁöÑË∑ØÂæÑÔºå‰æãÂ¶ÇÂ°´ÂÜô‰∏∫`/abc`ÔºåÂàôÊú¨Âú∞Ë∑ØÂæÑ‰∏∫`${WORKSPACE}/abc`\nÊú¨Âú∞Ë∑ØÂæÑÂèØ‰ª•ËÆæÁΩÆ‰∏∫Êñá‰ª∂ÊàñÁõÆÂΩï„ÄÇÂ¶ÇÊûúËÆæÁΩÆ‰∏∫Êñá‰ª∂Âàô‰∏ä‰º†Âçï‰∏™Êñá‰ª∂ÔºåËÆæÁΩÆ‰∏∫ÁõÆÂΩï‰∏ä‰º†Êï¥‰∏™ÁõÆÂΩï\n\n## ÊûÑÂª∫\n\n1. ‰øÆÊîπ`${USER}/.m2/settings.xml`‰∏≠ÁöÑmavenÈÖçÁΩÆÊñá‰ª∂\n\nÂú®`mirrors`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<mirror>\n  <id>repo.jenkins-ci.org</id>\n  <url>https://repo.jenkins-ci.org/public/</url>\n  <mirrorOf>m.g.o-public</mirrorOf>\n</mirror>\n```\nÂú®`pluginGroups`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<pluginGroup>org.jenkins-ci.tools</pluginGroup>\n```\nÂú®`profiles`ËäÇÁÇπ‰∏≠Â¢ûÂä†\n```xml\n<profile>\n  <id>jenkins</id>\n  <activation>\n    <activeByDefault>true</activeByDefault>\n  </activation>\n  <repositories>\n    <repository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>repo.jenkins-ci.org</id>\n      <url>https://repo.jenkins-ci.org/public/</url>\n    </pluginRepository>\n  </pluginRepositories>\n</profile>\n```\n\n2. ÊâìÂåÖ\n```bash\nmvn clean package -DskipTests\n```\n\n3. ËøêË°å\n```bash\nmvn clean hpi:run\n``` \n (Distance: 1.5149)",
    "rank_2_distance": 1.5149,
    "rank_3_name": "# SimplifyQA Pipeline Executor",
    "rank_3_content": "# SimplifyQA Pipeline Executor\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/simplify-qa-connector-plugin/job/master/)\n\n[![Contributors](https://img.shields.io/github/contributors/jenkinsci/simplify-qa-connector-plugin.svg)](https://github.com/jenkinsci/simplify-qa-connector-plugin/graphs/contributors)\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/simplify-qa-connector.svg)](https://plugins.jenkins.io/simplify-qa-connector)\n\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/simplify-qa-connector-plugin.svg?label=changelog)](https://github.com/jenkinsci/simplify-qa-connector-plugin/releases/latest)\n\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/simplify-qa-connector.svg?color=blue)](https://plugins.jenkins.io/simplify-qa-connector)\n\n# SimplifyQA Pipeline Executor is an update to our existing Jenkins Plugin with improved features. It offers seamless integration with SimplifyQA tool and triggers automated script execution.\n\n## This plugin must be used in combination with SimplifyQA automation tool. It supports from Jenkins version 2.375.1\n\n<pre>SimplifyQA supports CI integration for Jenkins through a plug-in.\nMake sure the plugin is properly installed on the CI system before proceeding.\n\nNew features that are added to this improved utility are controlling the \nBuild Failure status based on the percentage of failed testcases, \nimproved timeouts and support to different types of Jenkins project.</pre>\n\n# Follow below steps for Integration\n\n## Step 1\n\nSimplifyQA Agent should be installed and registered in the Host system. Login to SimplifyQA application, follow the steps in Help Guide to Download and install the Agent and register the machine in which installation is done.\n\n## Step 2\n\nCreate Suite of automated testcases that needs to be executed as part of CICD pipeline.\n\n## Step 3\n\nCreate a Pipeline with required suite and provide details of registered machine. The system would also need other execution related info like release, sprint, test data environment and browser to trigger the execution. Enter the necessary details and save.\n\n## Step 4\n\nThe system generates a pipeline token with the entered details. Copy the token.\n\n## Step 5\n\nIn Jenkins, install the SimplifyQA Pipeline connector, under Manage Jenkins >> Plugin Manager.\n\n## Step 6\n\nUnder the created Jenkins project, now select the SimplifyQA section in the Build Tab and enter appropriate URL (SimplifyQA URL) and copied pipeline token.\n\n## Step 7\n\nEnter the failure percentage and enable verbose as required. Failure percentage would determine, when the build needs to be marked as failure and Verbose flag would provide the logs with or without details. Save the details.\n\n## Step 8\n\nPost build, Jenkins would trigger the execution of mentioned suite in registered machine.\n\n## Step 9\n\nResult can be checked in Console Output, as well as in a separate View in Jenkins.\n\n## Step 10\n\nResults would also be available in SimplifyQA reports section. There would also be an easy navigation to SimplifyQA reports section from logs. Users can view the report and download as PDF.\n\n## Step 11\n\nTool can also trigger email to mentioned users, post completion of execution.\n\n## About SimplifyQA\n\nWelcome to SimplifyQA, the only Application Management Tool (ALM) you‚Äôll ever need. SimplifyQA , is designed to make application management and testing easy, fast and reliable for anyone, regardless of coding skills and technical knowledge. With update on Jenkins Utility, we offer better support and cover wide variety of projects to give you a more awesome CICD integration.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.5300)",
    "rank_3_distance": 1.53
  },
  {
    "step": "{'name': 'withMaven', 'raw_args': \"\\n                        maven: 'maven-3.6.1',\\n                        mavenOpts: '-Xmx256m',\\n                        globalMavenSettingsConfig: 'fbc6b0e6-dd00-4a30-8ffd-f3ac375e5fbf',\\n                        jdk: 'openjdk-11'\", 'raw_block': 'sh \"mvn clean deploy\"'}",
    "rank_1_name": "# Stapler Maven Plugin",
    "rank_1_content": "# Stapler Maven Plugin\n\nMaven plugin to generate taglib documentation and a variety of other tasks.\n\n## Changelog\n\nSee [GitHub Releases](https://github.com/jenkinsci/stapler-maven-plugin/releases) \n (Distance: 1.4610)",
    "rank_1_distance": 1.461,
    "rank_2_name": "This plugin requires a little extra attention to build.  As far as I can tell,",
    "rank_2_content": "This plugin requires a little extra attention to build.  As far as I can tell,\n\nBorland does not publish their SDK in a maven repo.  In order to build, you\n\nneed to download the SDK from\n\nhttp://www.borland.com/products/downloads/download_starteam.html.\n\n\n\nThen:\n\n\n\ntar xzvf st-sdk-runtime-11.0.0.66-java-unix32.tar.gz\n\ncd sdk/lib\n\nmvn install:install-file -DgroupId=com.borland -DartifactId=starteam110 -Dpackaging=jar -Dversion=11 -Dfile=starteam110.jar\n\n\n\nAfter that, the mvn targets should work as you generally expect them to.\n\n\n\nTIP: Use mvn -o to build in offline mode after you've done an initial mvn install.  The -o option\n\n     forces m2 to use jars from your local repository instead of the internet, which saves tons\n\n     of time.\n\n\n\n***************************************************\n\n**                   UNIT TESTS                  **\n\n***************************************************\n\n\n\nTo pass the unit tests you will need to set up a test repository to run against.\n\nYou will also need to configure your settings.xml file (found in $HOME/.m2/ on\n\nunix and %USERPROFILE%\\.m2\\ on windows).  Here are some instructions for setting\n\nup both.\n\n\n\nRepository setup:\n\n\n\n   1. Create a repository\n\n          * My repository is named \"Hudson Plugin Test\"\n\n   2. Add a file to the root folder of the repository\n\n          *  My test file is named \"testfile.txt\"\n\n   3. Modify test file and check in the changes\n\n   2. Label the repository with the label name \"hudsonTestLabelBefore\"\n\n   3. Modify \"testfile.txt\" again and check in the changes\n\n   4. Label the repository with the label name \"hudsonTestLabel\"\n\n   5. Modify \"testfile.txt\" again and check in the changes\n\n   6. Label the repository with the label name \"hudsonTestLabelAfter\"\n\n   7. Create a promotion state called \"hudsonPromotionState\" and point it at \"hudsonTestLabel\"\n\n\n\nsample settings.xml:\n\n<settings>\n\n    <profiles>\n\n        <profile>\n\n        <id>hudson</id>\n\n            <properties>\n\n                <test.starteam.hostname>exampleHostname</test.starteam.hostname>\n\n                <test.starteam.hostport>examplePort</test.starteam.hostport>\n\n                <test.starteam.projectname>Hudson Plugin Test</test.starteam.projectname>\n\n                <test.starteam.viewname>Hudson Plugin Test</test.starteam.viewname>\n\n                <test.starteam.foldername>Hudson Plugin Test</test.starteam.foldername>\n\n                <test.starteam.username>exampleUser</test.starteam.username>\n\n                <test.starteam.password>examplePassword</test.starteam.password>\n\n                <test.starteam.labelname>hudsonTestLabel</test.starteam.labelname>\n\n                <test.starteam.promotionname>hudsonPromotionState</test.starteam.promotionname>\n\n                <test.starteam.changedate>2013/5/14 14:46:27</test.starteam.changedate>\n\n                <test.starteam.dateinpast>2013/5/14 14:44:03</test.starteam.dateinpast>\n\n                <test.starteam.testfile>Hudson Plugin Test/testfile.txt</test.starteam.testfile>\n\n            </properties>\n\n        </profile>\n\n    </profiles>\n\n    <activeProfiles>\n\n        <activeProfile>hudson</activeProfile>\n\n      </activeProfiles>\n\n      <pluginGroups>\n\n        <pluginGroup>org.jvnet.hudson.tools</pluginGroup>\n\n    </pluginGroups>\n\n</settings>\n\n\n\nSet changedate to the time of hudsonTestLabelAfter or later.\n\nSet dateinpast to the time of the first change to testfile.txt.\n\nSet real values for exampleHostname, examplePort, exampleUser, and examplePassword.\n\n\n\n***************************************************\n\n**                  KNOWN ISSUES                 **\n\n***************************************************\n\n\n\nWhen developing with eclipse a situation can arise where\n\nStarTeamSCMTest:testConfigRoundTrip fails with a NullSCM error.  I'm not sure\n\nwhat causes this but the problem seems to be fixable by cleaning and building\n\non the command line. \n (Distance: 1.4749)",
    "rank_2_distance": 1.4749,
    "rank_3_name": "NOTE: This plugin only supports Subversion for the moment.",
    "rank_3_content": "NOTE: This plugin only supports Subversion for the moment.\nNOTE: This plugin only supports Maven 2 for the moment.\nNOTE: This plugin only supports Ant for the moment. \n (Distance: 1.5066)",
    "rank_3_distance": 1.5066
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[\\n                    string(credentialsId: 'github-access-token', variable: 'GH_TOKEN')\\n                ]\", 'raw_block': \"sh 'make build'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (env.BRANCH_NAME == \\'master\\' || (env.BRANCH_NAME.length() > 8 && env.BRANCH_NAME.substring(0,8) == \\'release-\\')) {\\n                        echo \\'On master or release-branch. Running release step.\\'\\n                        sh \\'make release\\'\\n                    } else {\\n                        if (env.BRANCH_NAME.substring(0,3) == \\'PR-\\') {\\n                            echo \\'On PR branch. Running release step in dry-run mode.\\'\\n                        } else {\\n                            echo(\\'Unknown branch type. Running release step in dry-run mode.\\')\\n                        }\\n                        sh \"make release_dry_run BRANCH=${env.BRANCH_NAME}\"\\n\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'name': 'container', 'raw_args': \"'jnlp'\", 'raw_block': \"sh './BuildScripts/linux.sh'\"}",
    "rank_1_name": "= Docker inbound agents",
    "rank_1_content": "= Docker inbound agents\n\nThis repository is a collection of Docker images which combine the basics\nto run a Jenkins inbound agent with a standard Docker image.\n\nThis makes it easy to use upstream images from as Kubernetes pod templates,\nAzure Container Instances, AWS ECS/Fargate, or within other Jenkins agent\nsystems which rely on using an inbound agent. \n (Distance: 1.3278)",
    "rank_1_distance": 1.3278,
    "rank_2_name": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully.",
    "rank_2_content": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully. \n\n#### Parameters\n###### MasterUrl \nMasterUrl is the endpoint of a container cluster.you can find the value on the console of  <a href=\"https://cs.console.aliyun.com/#/cluster\" target=\"_blank\"/>Aliyun Container Service</a>.\n\n<img src=\"/picture/ded60b9589c65187ed6b1d8965bbae96.png\" width=80% style=\"max-width=1000px\"/>\n<img src=\"/picture/4446ae8b09a2a4a04e9488fdd4f07059.png\" width=80% style=\"max-width=1000px\"/>     \n\n###### ApplicationName \nApplication is a logical concept in Aliyun Container Service.Application is the mininum unit of a single releasement.A standard application consist of several services and a service consist of serveral containers.If you want to deploy a application to Aliyun Container Service. You need to come up a awesome name firstly üòä.\n###### ComposeTemplate \nComposeTemplate is the configuration of the application. The blank requires the relative path of the docker-compose.If your docker-compose.yml is under the path of docker/docker-compose.yml.Just fill the blank with the path.\n###### HostCredetials \nHostCredetials are the certs of the target cluster. You can visit the remote container cluster with the specific certs on any computer with a docker client.\n\n<img src=\"/picture/15e3bddcde04166a6b41843cab7642ec.png\" width=80% style=\"max-width=1000px\"/>         \nopen the pem files , extract the content and fill the blank below.\n<img src=\"/picture/04d625cf2e2a982376e94768fca74755.png\" width=80% style=\"max-width=1000px\"/> \n (Distance: 1.4013)",
    "rank_2_distance": 1.4013,
    "rank_3_name": "# StackRox Container Image Scanner",
    "rank_3_content": "# StackRox Container Image Scanner\nThe **StackRox Container Image Scanner** plugin enables scanning of\ncontainer images for published software vulnerabilities. You can add it\nas a build step in your freestyle projects or pipeline, to ensure your\ninfrastructure is in adherence with the StackRox Kubernetes Security\nPlatform vulnerability management policies.\n\nThe **[StackRox Kubernetes Security\nPlatform](https://www.stackrox.com/)** protects your cloud-native\napplications across the entire container lifecycle: build, deploy, and\nruntime. Leverage StackRox to gain visibility into your cloud-native\nenvironment, to detect vulnerabilities and misconfigurations in your\ncontainer images and Kubernetes deployments, to identify high-risk\nruntime activity, and to meet your internal and external compliance\nrequirements.\n\n**Contents**\n- [Prerequisites](#prerequisites)\n- [Install the StackRox Container Image Scanner plugin](#install-the-stackrox-container-image-scanner-plugin)\n    - [Web UI](#web-ui)\n    - [Jenkins CLI](#jenkins-cli)\n- [Use the StackRox Container Image Scanner plugin](#use-the-stackrox-container-image-scanner-plugin)\n    - [Freestyle project](#freestyle-project)\n    - [Pipeline](#pipeline)\n- [View scan reports](#view-scan-reports)\n\n## Prerequisites\n\nTo install, configure, and use the StackRox Container Image Scanner\nplugin you must meet the following requirements:\n\n1.  Use Jenkins version LTS 2.204.1 or newer.\n\n2.  Use the StackRox Kubernetes Security Platform version 3.0.38 or\n    newer.\n\n3.  [Create an API\n    token](https://help.stackrox.com/docs/use-the-api/#authentication)\n    with the Continuous Integration (CI) role in the StackRox Kubernetes\n    Security Platform.\n\n4.  [Integrate the StackRox Kubernetes Security Platform with the image\n    registry](https://help.stackrox.com/docs/integrate-with-other-tools/integrate-with-image-registries/)\n    you use.\n\n## Install the StackRox Container Image Scanner plugin\n\nYou can use [Web UI](#web-ui) or [Jenkins CLI](#jenkins-cli) to install\nthe StackRox Container Image Scanner plugin.\n\n### Web UI\n\nUse the Jenkins Plugin Manager in your Jenkins instance to install the\nStackRox Container Image Scanner plugin.\n\n1.  On the Jenkins homepage, go to the **Manage Jenkins** &gt; **Manage\n    Plugins** view.\n\n2.  Select the **Available** tab.\n\n3.  Enter **stackrox** in the **Filter** box to search for the StackRox\n    Container Image Scanner plugin.\n\n4.  Select the checkbox under the **Install** column for the **StackRox\n    Container Image Scanner** plugin.\n\n5.  Select **Install without restart**.\n\n### Jenkins CLI\n\nUse the `install-plugin` command in [Jenkins\nCLI](https://jenkins.io/doc/book/managing/cli/) to install the StackRox\nContainer Image Scanner plugin.\n\n``` {.bash}\njava -jar jenkins-cli.jar -s <jenkins-address> install-plugin stackrox-container-image-scanner -deploy\n```\n\n## Use the StackRox Container Image Scanner plugin\n\nYou can use the StackRox Container Image Scanner plugin in both\nfreestyle projects and pipelines.\n\n> **Important**\n>\n> You must push your images to the registry you configured in your build\n> steps, before you invoke the StackRox Container Image Scanner plugin\n> step in a Jenkins FreeStyle project or a Pipeline.\n\n### Freestyle project\n\n1. Add the StackRox Container Image Scanner plugin step. Select **Add\n    build step** &gt; **StackRox Image Security**.\n\n2. Enter details for the following plugin configuration variables:\n\n    <table>\n    <colgroup>\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    </colgroup>\n    <thead>\n    <tr class=\"header\">\n    <th>Variable</th>\n    <th>Name</th>\n    <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"odd\">\n    <td><p><code>portalAddress</code></p></td>\n    <td><p>Portal address <sup>*</sup></p></td>\n    <td><p>Your StackRox Portal address.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>apiToken</code></p></td>\n    <td><p>API token <sup>*</sup></p></td>\n    <td><p>The StackRox access token with the Continuous Integration (CI) authorization role.</p></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>enableTLSVerification</code></p></td>\n    <td><p>Enable TLS verification</p></td>\n    <td><p>Use it to enable TLS. You must also specify a CA certificate.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>caCertPEM</code></p></td>\n    <td><p>CA certificate</p></td>\n    <td><p>Use it to specify a CA certificate in PEM format. Make sure to include the BEGIN CERTIFICATE and END CERTIFICATE tags for your certificate.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>You can download the certificate in PEM format from the sensor bundle in any of cluster where you‚Äôve installed StackRox Sensor. If you don‚Äôt have administrative access to your cluster, please ask your system administrator to get the certificate.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>failOnCriticalPluginError</code></p></td>\n    <td><p>Fail on critical plugin errors</p></td>\n    <td><p>Enable this to fail the build if the plugin encounters any errors. This value is <code>TRUE</code> by default.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>failOnPolicyEvalFailure</code></p></td>\n    <td><p>Fail if policy violations exist</p></td>\n    <td><p>Enable this to fail the build if scanned images violate any <a href=\"https://help.stackrox.com/docs/deploy-security-policies/\">enforced system policies</a> in the StackRox Kubernetes Security Platform. This value is <code>TRUE</code> by default.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>imageNames</code></p></td>\n    <td><p>Comma separated list of images to scan</p></td>\n    <td><p>If you leave it blank then provide list in <code>$BUILD_TAG/rox_images_to_scan</code> file.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"even\">\n    <td colspan=\"3\"><p><em><sup>*</sup> Required</em></p></td>\n    </tr>\n    </tbody>\n    </table>\n\n    ![plugin config](./src/main/resources/img/plugin-config.png)\n\n3. If you need to generate list of images to scan. Then leave `Images Names` field bank and\nadd a build step in your project to save names of all the images you want to scan in the\n       `<jenkins-workspace>/${BUILD_TAG}/rox_images_to_scan` file. Each\n       image name must be on a separate line.\n\n![build step](./src/main/resources/img/build-step.png)\n\nFor example, to do this:\n\n-   Select **Add build step** &gt; **Execute shell**.\n\n-   In the command box, enter:\n\n    ``` {.bash}\n    mkdir $BUILD_TAG\n    cd $BUILD_TAG\n    echo \"nginx:latest\" >> rox_images_to_scan\n    echo \"stackrox/vuln-images:django-cve-2019-14235\" >> rox_images_to_scan\n    ```\n\n4. Select **Save** and then select **Apply**.\n\n### Pipeline\n\nTo use the StackRox Container Image Scanner plugin in your pipeline:\n\n1.  Go to the pipeline configuration screen.\n\n2.  In the **Script** text area, enter the following script:\n    ```groovy\n    pipeline {\n        agent any\n\n        stages {\n            stage('Test') {\n                steps {\n                    stackrox (\n                        apiToken: '...',\n                        caCertPEM: '',\n                        enableTLSVerification: false,\n                        failOnCriticalPluginError: true,\n                        failOnPolicyEvalFailure: true,\n                        portalAddress: 'https://central.stackrox:443',\n                        imageNames: \"nginx:latest,ubuntu:bionic,busybox:stable\"\n                    )\n                }\n            }\n        }\n    }\n    ```\n\n    -   For more information about the variables, see the [plugin\n        configuration variables](#plugin-configuration-variables)\n        section.\n\n    ![plugin pipeline](./src/main/resources/img/plugin-pipeline.png)\n\n## View scan reports\n\nWhenever you use the StackRox Container Image Scanner plugin to scan\nimages, the StackRox Container Image Scanner creates reports as build\nartifacts. These reports include detailed information in CSV format. The\nStackRox Container Image Scanner generates the following two CSV format\nreports for every scanned image:\n\n1.  CVEs found in the image.\n\n2.  Policy violations for the image.\n\nThe StackRox Container Image Scanner also creates an HTML report for\nevery build. This report includes a summary of the scan results for all\nscanned images in your environment.\n\nTo view the HTML report:\n\n1.  Select **StackRox Image Security Report** from the left-hand\n    navigation menu.\n\n    ![view html report](./src/main/resources/img/view-html-report.png) \n (Distance: 1.4147)",
    "rank_3_distance": 1.4147
  },
  {
    "step": "{'name': 'container', 'raw_args': \"'jnlp'\", 'raw_block': \"sh './BuildScripts/web.sh'\"}",
    "rank_1_name": "= Docker inbound agents",
    "rank_1_content": "= Docker inbound agents\n\nThis repository is a collection of Docker images which combine the basics\nto run a Jenkins inbound agent with a standard Docker image.\n\nThis makes it easy to use upstream images from as Kubernetes pod templates,\nAzure Container Instances, AWS ECS/Fargate, or within other Jenkins agent\nsystems which rely on using an inbound agent. \n (Distance: 1.3278)",
    "rank_1_distance": 1.3278,
    "rank_2_name": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully.",
    "rank_2_content": "After installing the plugin,you'll get a new Build Step entry named \"Aliyun Container Service Deploy\". Fill the configuration and it will deploy the docker-compose configuration when the pre build step build successfully. \n\n#### Parameters\n###### MasterUrl \nMasterUrl is the endpoint of a container cluster.you can find the value on the console of  <a href=\"https://cs.console.aliyun.com/#/cluster\" target=\"_blank\"/>Aliyun Container Service</a>.\n\n<img src=\"/picture/ded60b9589c65187ed6b1d8965bbae96.png\" width=80% style=\"max-width=1000px\"/>\n<img src=\"/picture/4446ae8b09a2a4a04e9488fdd4f07059.png\" width=80% style=\"max-width=1000px\"/>     \n\n###### ApplicationName \nApplication is a logical concept in Aliyun Container Service.Application is the mininum unit of a single releasement.A standard application consist of several services and a service consist of serveral containers.If you want to deploy a application to Aliyun Container Service. You need to come up a awesome name firstly üòä.\n###### ComposeTemplate \nComposeTemplate is the configuration of the application. The blank requires the relative path of the docker-compose.If your docker-compose.yml is under the path of docker/docker-compose.yml.Just fill the blank with the path.\n###### HostCredetials \nHostCredetials are the certs of the target cluster. You can visit the remote container cluster with the specific certs on any computer with a docker client.\n\n<img src=\"/picture/15e3bddcde04166a6b41843cab7642ec.png\" width=80% style=\"max-width=1000px\"/>         \nopen the pem files , extract the content and fill the blank below.\n<img src=\"/picture/04d625cf2e2a982376e94768fca74755.png\" width=80% style=\"max-width=1000px\"/> \n (Distance: 1.4013)",
    "rank_2_distance": 1.4013,
    "rank_3_name": "# StackRox Container Image Scanner",
    "rank_3_content": "# StackRox Container Image Scanner\nThe **StackRox Container Image Scanner** plugin enables scanning of\ncontainer images for published software vulnerabilities. You can add it\nas a build step in your freestyle projects or pipeline, to ensure your\ninfrastructure is in adherence with the StackRox Kubernetes Security\nPlatform vulnerability management policies.\n\nThe **[StackRox Kubernetes Security\nPlatform](https://www.stackrox.com/)** protects your cloud-native\napplications across the entire container lifecycle: build, deploy, and\nruntime. Leverage StackRox to gain visibility into your cloud-native\nenvironment, to detect vulnerabilities and misconfigurations in your\ncontainer images and Kubernetes deployments, to identify high-risk\nruntime activity, and to meet your internal and external compliance\nrequirements.\n\n**Contents**\n- [Prerequisites](#prerequisites)\n- [Install the StackRox Container Image Scanner plugin](#install-the-stackrox-container-image-scanner-plugin)\n    - [Web UI](#web-ui)\n    - [Jenkins CLI](#jenkins-cli)\n- [Use the StackRox Container Image Scanner plugin](#use-the-stackrox-container-image-scanner-plugin)\n    - [Freestyle project](#freestyle-project)\n    - [Pipeline](#pipeline)\n- [View scan reports](#view-scan-reports)\n\n## Prerequisites\n\nTo install, configure, and use the StackRox Container Image Scanner\nplugin you must meet the following requirements:\n\n1.  Use Jenkins version LTS 2.204.1 or newer.\n\n2.  Use the StackRox Kubernetes Security Platform version 3.0.38 or\n    newer.\n\n3.  [Create an API\n    token](https://help.stackrox.com/docs/use-the-api/#authentication)\n    with the Continuous Integration (CI) role in the StackRox Kubernetes\n    Security Platform.\n\n4.  [Integrate the StackRox Kubernetes Security Platform with the image\n    registry](https://help.stackrox.com/docs/integrate-with-other-tools/integrate-with-image-registries/)\n    you use.\n\n## Install the StackRox Container Image Scanner plugin\n\nYou can use [Web UI](#web-ui) or [Jenkins CLI](#jenkins-cli) to install\nthe StackRox Container Image Scanner plugin.\n\n### Web UI\n\nUse the Jenkins Plugin Manager in your Jenkins instance to install the\nStackRox Container Image Scanner plugin.\n\n1.  On the Jenkins homepage, go to the **Manage Jenkins** &gt; **Manage\n    Plugins** view.\n\n2.  Select the **Available** tab.\n\n3.  Enter **stackrox** in the **Filter** box to search for the StackRox\n    Container Image Scanner plugin.\n\n4.  Select the checkbox under the **Install** column for the **StackRox\n    Container Image Scanner** plugin.\n\n5.  Select **Install without restart**.\n\n### Jenkins CLI\n\nUse the `install-plugin` command in [Jenkins\nCLI](https://jenkins.io/doc/book/managing/cli/) to install the StackRox\nContainer Image Scanner plugin.\n\n``` {.bash}\njava -jar jenkins-cli.jar -s <jenkins-address> install-plugin stackrox-container-image-scanner -deploy\n```\n\n## Use the StackRox Container Image Scanner plugin\n\nYou can use the StackRox Container Image Scanner plugin in both\nfreestyle projects and pipelines.\n\n> **Important**\n>\n> You must push your images to the registry you configured in your build\n> steps, before you invoke the StackRox Container Image Scanner plugin\n> step in a Jenkins FreeStyle project or a Pipeline.\n\n### Freestyle project\n\n1. Add the StackRox Container Image Scanner plugin step. Select **Add\n    build step** &gt; **StackRox Image Security**.\n\n2. Enter details for the following plugin configuration variables:\n\n    <table>\n    <colgroup>\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    <col width=\"33%\" />\n    </colgroup>\n    <thead>\n    <tr class=\"header\">\n    <th>Variable</th>\n    <th>Name</th>\n    <th>Description</th>\n    </tr>\n    </thead>\n    <tbody>\n    <tr class=\"odd\">\n    <td><p><code>portalAddress</code></p></td>\n    <td><p>Portal address <sup>*</sup></p></td>\n    <td><p>Your StackRox Portal address.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>apiToken</code></p></td>\n    <td><p>API token <sup>*</sup></p></td>\n    <td><p>The StackRox access token with the Continuous Integration (CI) authorization role.</p></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>enableTLSVerification</code></p></td>\n    <td><p>Enable TLS verification</p></td>\n    <td><p>Use it to enable TLS. You must also specify a CA certificate.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>caCertPEM</code></p></td>\n    <td><p>CA certificate</p></td>\n    <td><p>Use it to specify a CA certificate in PEM format. Make sure to include the BEGIN CERTIFICATE and END CERTIFICATE tags for your certificate.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>You can download the certificate in PEM format from the sensor bundle in any of cluster where you‚Äôve installed StackRox Sensor. If you don‚Äôt have administrative access to your cluster, please ask your system administrator to get the certificate.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>failOnCriticalPluginError</code></p></td>\n    <td><p>Fail on critical plugin errors</p></td>\n    <td><p>Enable this to fail the build if the plugin encounters any errors. This value is <code>TRUE</code> by default.</p></td>\n    </tr>\n    <tr class=\"even\">\n    <td><p><code>failOnPolicyEvalFailure</code></p></td>\n    <td><p>Fail if policy violations exist</p></td>\n    <td><p>Enable this to fail the build if scanned images violate any <a href=\"https://help.stackrox.com/docs/deploy-security-policies/\">enforced system policies</a> in the StackRox Kubernetes Security Platform. This value is <code>TRUE</code> by default.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"odd\">\n    <td><p><code>imageNames</code></p></td>\n    <td><p>Comma separated list of images to scan</p></td>\n    <td><p>If you leave it blank then provide list in <code>$BUILD_TAG/rox_images_to_scan</code> file.</p>\n    <blockquote>\n    <p><strong>Note</strong></p>\n    <p>If you don‚Äôt enable <code>failOnPolicyEvalFailure</code>, the plugin will not fail the build even if the StackRox Kubernetes Security Platform reports system policy violations.</p>\n    </blockquote></td>\n    </tr>\n    <tr class=\"even\">\n    <td colspan=\"3\"><p><em><sup>*</sup> Required</em></p></td>\n    </tr>\n    </tbody>\n    </table>\n\n    ![plugin config](./src/main/resources/img/plugin-config.png)\n\n3. If you need to generate list of images to scan. Then leave `Images Names` field bank and\nadd a build step in your project to save names of all the images you want to scan in the\n       `<jenkins-workspace>/${BUILD_TAG}/rox_images_to_scan` file. Each\n       image name must be on a separate line.\n\n![build step](./src/main/resources/img/build-step.png)\n\nFor example, to do this:\n\n-   Select **Add build step** &gt; **Execute shell**.\n\n-   In the command box, enter:\n\n    ``` {.bash}\n    mkdir $BUILD_TAG\n    cd $BUILD_TAG\n    echo \"nginx:latest\" >> rox_images_to_scan\n    echo \"stackrox/vuln-images:django-cve-2019-14235\" >> rox_images_to_scan\n    ```\n\n4. Select **Save** and then select **Apply**.\n\n### Pipeline\n\nTo use the StackRox Container Image Scanner plugin in your pipeline:\n\n1.  Go to the pipeline configuration screen.\n\n2.  In the **Script** text area, enter the following script:\n    ```groovy\n    pipeline {\n        agent any\n\n        stages {\n            stage('Test') {\n                steps {\n                    stackrox (\n                        apiToken: '...',\n                        caCertPEM: '',\n                        enableTLSVerification: false,\n                        failOnCriticalPluginError: true,\n                        failOnPolicyEvalFailure: true,\n                        portalAddress: 'https://central.stackrox:443',\n                        imageNames: \"nginx:latest,ubuntu:bionic,busybox:stable\"\n                    )\n                }\n            }\n        }\n    }\n    ```\n\n    -   For more information about the variables, see the [plugin\n        configuration variables](#plugin-configuration-variables)\n        section.\n\n    ![plugin pipeline](./src/main/resources/img/plugin-pipeline.png)\n\n## View scan reports\n\nWhenever you use the StackRox Container Image Scanner plugin to scan\nimages, the StackRox Container Image Scanner creates reports as build\nartifacts. These reports include detailed information in CSV format. The\nStackRox Container Image Scanner generates the following two CSV format\nreports for every scanned image:\n\n1.  CVEs found in the image.\n\n2.  Policy violations for the image.\n\nThe StackRox Container Image Scanner also creates an HTML report for\nevery build. This report includes a summary of the scan results for all\nscanned images in your environment.\n\nTo view the HTML report:\n\n1.  Select **StackRox Image Security Report** from the left-hand\n    navigation menu.\n\n    ![view html report](./src/main/resources/img/view-html-report.png) \n (Distance: 1.4147)",
    "rank_3_distance": 1.4147
  },
  {
    "step": "{'name': 'bat', 'raw_args': 'BuildScripts\\\\\\\\windows.bat'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3808)",
    "rank_1_distance": 1.3808,
    "rank_2_name": "# Beer",
    "rank_2_content": "# Beer\n\nWe all need beer from time to time\n\nSee the [demo instance](https://ci.jenkins.io/beer/) in action. Read a few times to see different variations. \n\nPull requests are welcome to add more quotes/images. \n (Distance: 1.5223)",
    "rank_2_distance": 1.5223,
    "rank_3_name": "test",
    "rank_3_content": "test\n==== \n (Distance: 1.6002)",
    "rank_3_distance": 1.6002
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (env.BRANCH_NAME == \"master\") {\\n                        if (versionChangeCommit()) {\\n                            withCredentials([string(credentialsId: \\'crates_io_token\\', variable: \\'CRATES_IO_TOKEN\\')]) {\\n                                sh \"make publish\"\\n                            }\\n                        }\\n                    } else {\\n                        echo \"${env.BRANCH_NAME} does not match deployment branch. Nothing to do.\"\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'cleanWs', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.3155)",
    "rank_1_distance": 1.3155,
    "rank_2_name": "gssh",
    "rank_2_content": "gssh\n==== \n (Distance: 1.4091)",
    "rank_2_distance": 1.4091,
    "rank_3_name": "# Distributed Workspace Clean plugin",
    "rank_3_content": "# Distributed Workspace Clean plugin\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/hudson-wsclean-plugin.svg)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/hudson-wsclean-plugin.svg?color=blue)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/wsclean-plugin/master)](https://ci.jenkins.io/job/Plugins/job/wsclean-plugin/job/master/)\n\n## Overview\n\nThe\nDistributed Workspace Clean plugin\nis used to remove unnecessary old build workspaces from nodes used by previous builds.\nThis allows us to keep the overall disk usage down on long-lifetime nodes that do lots of different builds.\nThe \"Workspace\" link for a job only ever points to the most recently used node,\nso that means that all nodes except one could safely delete their unused workspaces\n... but Jenkins does not do that by default.\n\nThis plugin is designed to clean the build's workspace in all nodes _except_ the one(s) where it is currently running.\n\ne.g. if you have 100 jobs that typically uses 1gig of disk to build,\nand you have 100 nodes that can build those jobs,\nthen _without this plugin_ you will eventually end up with a copy of every workspace on every node,\n10000gigs total.\nHowever, with this plugin active on every build,\nyou'd only keep one workspace for each job across all the nodes,\n100gigs total, which is a lot less data to back up etc.\n\n* If you have a lot of static nodes then you may find this useful.\n* If you only have dynamic cloud-provided disposable nodes then you probably won't.\n\n**Note:** This plugin was originally developed before pipeline builds existed.\nIt's intended for use with \"classic\" builds.\n\n## Usage\n\n### How to use it\n\nThis functionality can be enabled by ticking the box in the \"Build Environment\" section of a job's configuration.\n\n![](docs/images/job-configuration-unexpanded.png)\n\n... and optionally expanding the \"Advanced\" box and ticking the \"clean before\" checkbox\nif you would prefer the clean to happen at the start of the build instead of at the end (the default).\n\n![](docs/images/job-configuration-expanded.png)\n\n### How to avoid it\n\nIf you have nodes that should never have their workspaces cleaned\n(by this plugin)\nthen you can add a Node Property specifying\n(in the node's configuration page)\nthat this plugin should always skip them:\n\n![](docs/images/node-properties.png)\n\nFor example,\nnodes that are dynamically created\n(and deleted)\nby a cloud plugin are unlikely to require cleaning\n(as they'll be destroyed before they have a chance to build up much mess),\nso it's useful to add this Node Property to the template(s) from which such nodes are created.\n\nNote:\nIf you can't add a node property due to limitations on the type of node\n(e.g. not all cloud plugins support node properties),\nyou can achieve the same effect using the \"Nodes to ignore\" field in the global configuration.\n\n### How to control it\n\nFurther options to control which nodes are selected for cleanup can be found in the global configuration page\n(Manage Jenkins -> Configure System):\n\n![](docs/images/global-configuration.png)\n\nThe default setting is to \"clean nodes that could be used\"\n(for the build),\nwhich preserves the behavior of plugin version 1.0.5 and earlier\n(where the plugin looks at what other nodes could have been used to run the build,\nand cleans the workspace that would've been used on each of those).\nAs of version 1.0.6 onwards, you can choose to clean only where previous completed builds had run, or both.\n\nFor further details, see the help text associated with each configuration option.\n\n## See also\n* [Software licence](LICENSE)\n* Support and [contribution guide](CONTRIBUTING.md)\n* [Changelog](CHANGELOG.md) \n (Distance: 1.4115)",
    "rank_3_distance": 1.4115
  },
  {
    "step": "{'name': 'checkout', 'raw_args': '\\n                        poll: false,\\n                        scm: [$class                           : \\'GitSCM\\',\\n                              branches                         : [[name: \"*/${env.BRANCH_NAME}\"]],\\n                              doGenerateSubmoduleConfigurations: false,\\n                              extensions                       : [[$class: \\'CloneOption\\', depth: 0, noTags: false, reference: \\'\\', shallow: false]],\\n                              submoduleCfg                     : [],\\n                              userRemoteConfigs                : [[credentialsId: \\'ToppleTheNun-GitHub\\', url: \\'https://github.com/PixelOutlaw/MythicDrops.git\\']]]\\n                '}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3436)",
    "rank_1_distance": 1.3436,
    "rank_2_name": "# GitHub Checks API Plugin",
    "rank_2_content": "# GitHub Checks API Plugin\n\n[![Join the chat at https://gitter.im/jenkinsci/github-checks-api](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jenkinsci/github-checks-api)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://github.com/XiongKezhi/checks-api-plugin/issues)\n[![Jenkins](https://ci.jenkins.io/job/Plugins/job/github-checks-plugin/job/master/badge/icon?subject=Jenkins%20CI)](https://ci.jenkins.io/job/Plugins/job/github-checks-plugin/job/master/)\n[![GitHub Actions](https://github.com/jenkinsci/github-checks-plugin/workflows/CI/badge.svg?branch=master)](https://github.com/jenkinsci/github-checks-plugin/actions)\n[![Codacy Badge](https://app.codacy.com/project/badge/Grade/2c7fa67496a743778ca60cc9604212d2)](https://www.codacy.com/gh/jenkinsci/github-checks-plugin?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=jenkinsci/github-checks-plugin&amp;utm_campaign=Badge_Grade)\n[![codecov](https://codecov.io/gh/jenkinsci/github-checks-plugin/branch/master/graph/badge.svg)](https://codecov.io/gh/jenkinsci/github-checks-plugin)\n\n![GitHub Checks Plugin Cover](docs/images/github-checks-plugin-cover.png)\n\nThis plugin publishes checks to GitHub through [GitHub Checks API](https://docs.github.com/en/rest/reference/checks#runs).\nIt implements the extension points defined in [Checks API Plugin](https://github.com/jenkinsci/checks-api-plugin). \n\nThis plugin has been installed, along with the [General API Plugin](https://github.com/jenkinsci/checks-api-plugin) on [ci.jenkins.io](https://ci.jenkins.io/Plugins) to help maintain over 1500 Jenkins plugins. You can take a look at the [action](https://github.com/jenkinsci/github-checks-plugin/runs/1025018883) for this repository or other plugin repositories under [Jenkins organization](https://github.com/jenkinsci) for the results.\n\n- [Features](#features)\n  - [Build Status Check](#build-status-check)\n  - [Rerun Failed Build](#rerun-failed-build)\n - [Contributing](#contributing)\n - [Acknowledgements](#acknowledgements)\n - [LICENSE](#license)\n\n## Getting started\n\nOnly GitHub Apps with proper permissions can publish checks, this [guide](https://github.com/jenkinsci/github-branch-source-plugin/blob/master/docs/github-app.adoc) helps you authenticate your Jenkins instance as a GitHub App. \nThe permission *read/write* on *Checks* needs to be granted in addition to the ones already mentioned in the guide.\n\n## Features\n\n### Build Status Check\n\n![GitHub Status](docs/images/github-status.png)\n\nThis plugin implements [the status checks feature from Checks API Plugin](https://github.com/jenkinsci/checks-api-plugin#build-status-check) to publish statuses (pending, in progress, and completed) to GitHub.\n\nYou can customize it by configuring the \"Status Checks Properties\" behavior for your GitHub SCM Source or Git SCM projects:\n\n![Status Checks Properties](docs/images/status-checks-properties.png)\n\n*Note: If you are using [GitHub Branch Source Plugin](https://github.com/jenkinsci/github-branch-source-plugin), it will also send status notifications to GitHub through [Status API](https://docs.github.com/en/rest/reference/repos#statuses). You can disable those notifications by configuring Skip GitHub Branch Source notifications option.*\n\n### Rerun Failed Build\n\n![Failed Checks](docs/images/failed-checks.png)\n\nIf your Jenkins build failed, a failed check will be published here.\nA \"Re-run\" button will be added automatically by GitHub, by clicking it, you can schedule a new build for the **last** commit of this branch.\n\n### Configuration\n\n![Checks Config](docs/images/github-checks-config.png)\n\n- *Verbose Console Log* : check for verbose build console log, the default is false\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md)\n\n## Acknowledgements\n\nThis plugin was started as a [Google Summer of Code 2020 project](https://www.jenkins.io/projects/gsoc/2020/projects/github-checks/), special thanks to the support from [Jenkins GSoC SIG](https://www.jenkins.io/sigs/gsoc/) and the entire community.\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE) \n (Distance: 1.4829)",
    "rank_2_distance": 1.4829,
    "rank_3_name": "# Checks API Plugin",
    "rank_3_content": "# Checks API Plugin\n[![Join the chat at https://gitter.im/jenkinsci/github-checks-api](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/jenkinsci/github-checks-api)\n[![contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat)](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20checks-api-plugin)\n[![Jenkins](https://ci.jenkins.io/job/Plugins/job/checks-api-plugin/job/master/badge/icon?subject=Jenkins%20CI)](https://ci.jenkins.io/job/Plugins/job/checks-api-plugin/job/master/)\n[![GitHub Actions](https://github.com/jenkinsci/checks-api-plugin/workflows/CI/badge.svg?branch=master)](https://github.com/jenkinsci/checks-api-plugin/actions)\n[![codecov](https://codecov.io/gh/jenkinsci/checks-api-plugin/branch/master/graph/badge.svg)](https://codecov.io/gh/jenkinsci/checks-api-plugin)\n\nInspired by the [GitHub Checks API](https://docs.github.com/en/rest/reference/checks#runs), this plugin aims to provide a general API to allow Jenkins plugins publishing checks (or reports) to remote source code management (SCM) platforms (e.g. GitHub, GitLab, BitBucket, etc.).\n\nBy consuming this API, other plugins can publish check with customized parameters for a Jenkins build, such as status, summary, warnings, code annotations, or even images.\nImplementations of this API decide on how to make use of these parameters and where to publish the checks.\n\nKnown consumers:\n* [Warnings Next Generation Plugin](https://plugins.jenkins.io/warnings-ng)\n* [Code Coverage API Plugin](https://plugins.jenkins.io/code-coverage-api)\n* [JUnit Plugin](https://plugins.jenkins.io/junit/) - since 1.39\n* [xUnit Plugin](https://plugins.jenkins.io/xunit) - since 3.1.0\n* [Autograding Plugin](https://plugins.jenkins.io/autograding)\n\nImplementations:\n* [GitHub Checks Plugin](https://plugins.jenkins.io/github-checks)\n* [Gitea Checks Plugin](https://plugins.jenkins.io/gitea-checks/)\n\nThis plugin, along with its [GitHub implementation](https://plugins.jenkins.io/github-checks), has been installed on [ci.jenkins.io](https://ci.jenkins.io/Plugins) to help maintain over 1500 Jenkins plugins. You can take a look at the [action](https://github.com/jenkinsci/checks-api-plugin/runs/1025532156) for this repository or other plugin repositories under [Jenkins organization](https://github.com/jenkinsci) for the results.\n\n## Embedded Features\n\n### Build Status Check\n\n![GitHub Status](docs/images/github-status.png)\n\nThis plugin defines extension points to publish statuses to different SCM platforms.\n\nIt depends on the implementation to decide whether to skip them and what name to use.\n\nIf enabled, the statuses will be published in different stages of a Jenkins build (enters the queue, checkout, and completes).\n\n### Pipeline Usage\n\n- publishChecks: you can publish checks directly in the pipeline script instead of depending on consumer plugins:\n\n```\npublishChecks name: 'example', title: 'Pipeline Check', summary: 'check through pipeline',\n    text: 'you can publish checks in pipeline script',\n    detailsURL: 'https://github.com/jenkinsci/checks-api-plugin#pipeline-usage',\n    actions: [[label:'an-user-request-action', description:'actions allow users to request pre-defined behaviours', identifier:'an unique identifier']]\n```\n\n*To use customized actions, you will need to write a Jenkins plugin.\nIf you want to add GitHub checks actions, which are basically buttons on the checks report,\nyou need to extend [GHEventSubscriber](https://github.com/jenkinsci/github-plugin/blob/master/src/main/java/org/jenkinsci/plugins/github/extension/GHEventsSubscriber.java) to handle the event,\nsee [the handler](https://github.com/jenkinsci/github-checks-plugin/blob/ea060be67dad522ab6c31444fc4274955ac6e918/src/main/java/io/jenkins/plugins/checks/github/CheckRunGHEventSubscriber.java) for re-run requests as an example.*\n\n- withChecks: you can inject the check's name into the closure for other steps to use:\n\n```groovy\nwithChecks('injected name') {\n    // some other steps that will extract the name\n}\n```\n\n`withChecks` will publish an in progress check immediately and then other consuming plugins will publish the final check.\n\nYou can also include the checks stage name with `includeStage`:\n\n```groovy\nwithChecks(name: 'Tests', includeStage: true) {\n    sh 'mvn -Dmaven.test.failure.ignore=true clean verify'\n    junit '**/target/surefire-reports/TEST-*.xml'\n}\n```\n\nCombining `includeStage` with the JUnit plugin works well to publish checks for each test suite:\n\n![With Checks multiple stages](docs/images/github-status.png)\n\n<details>\n\n<summary>Example full pipeline with parallel stages</summary>\n\n```groovy\ndef axes = [\n        platforms: ['linux', 'windows'],\n        jdks: [17, 21],\n]\ndef builds = [:]\naxes.values().combinations {\n    def (platform, jdk) = it\n    builds[\"${platform}-jdk${jdk}\"] = {\n        node(platform) {\n            stage(\"${platform.capitalize()} - JDK ${jdk} - Test\") {\n                checkout scm\n                withChecks(name: 'Tests', includeStage: true) {\n                    sh 'mvn -Dmaven.test.failure.ignore=true clean verify'\n                    junit '**/target/surefire-reports/TEST-*.xml'\n                }\n            }\n        }\n    }\n}\n\nparallel builds\n```\n\n</details>\n\n## Guides\n\n- [Consumers Guide](docs/consumers-guide.md)\n- [Implementation Guide](docs/implementation-guide.md)\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md)\n\n## Acknowledgements\n\nThis plugin was started as a [Google Summer of Code 2020 project](https://summerofcode.withgoogle.com/projects/#5139745388101632), special thanks to the support from [Jenkins GSoC SIG](https://www.jenkins.io/sigs/gsoc/) and the entire community.\n\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE) \n (Distance: 1.5139)",
    "rank_3_distance": 1.5139
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(credentialsId: 'MythicDrops-Discord-Webhook', variable: 'DISCORD_WEBHOOK')]\", 'raw_block': \"sh label: '', script: './upload-to-discord.sh mythicdrops/build/distributions/MythicDrops*.zip'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'postProcess', 'raw_args': {'action': 'always'}}",
    "rank_1_name": "jython-postbuild-plugin",
    "rank_1_content": "jython-postbuild-plugin\n=======================\n\nJython plugin for Jenkins similar to the groovy postbuild plugin but that allows you to write the code in python (using jython to access java classes and methods)\n\n\nIt's a blunt copy of the groovy postbuild plugin, without the security enhancements that it has actually (that requires changing also the secure script plugin, will do with time) \n (Distance: 1.2880)",
    "rank_1_distance": 1.288,
    "rank_2_name": "![PostBuildScript](pbs-logo.svg)",
    "rank_2_content": "![PostBuildScript](pbs-logo.svg)\n\n# PostBuildScript Jenkins plugin\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/)\n[![Jenkins Plugins](https://img.shields.io/jenkins/plugin/v/postbuildscript.svg)](http://updates.jenkins-ci.org/download/plugins/postbuildscript)\n[![GitHub contributors](https://img.shields.io/github/contributors/jenkinsci/postbuildscript-plugin.svg)]()\n\nThe PostBuildScript plugin allows you to run the following actions after a build:\n\n* Batch or shell scripts\n* Groovy scripts\n* Build steps\n\nYou can configure these actions depending on the build status (i.e., only run when build is successful). \nScripts can also be executed on the master, on slaves or both. On matrix projects, the build can be executed on\neach axis.\n\n![User Interface](screenshot.png)\n\nPlease refer to the [plugin description](https://plugins.jenkins.io/postbuildscript) for further\ninformation.\n\n## Downloads\n\nYou'll find the latest HPI files of the plugin here:\n\nhttp://updates.jenkins-ci.org/download/plugins/postbuildscript\n\nJust put a HPI file into your plugins subdirectory of your Jenkins installation root, e.g. /var/lib/jenkins. Restart\nJenkins afterwards.\n\n## Issue Tracking\n\nPlease use the\n[official Jenkins Jira project and issue tracking software](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin)\nto report new bugs or request features.\n\nPlease first look through [Jira](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin). If a ticket\nalready exists, please add a comment and try to explain the issue a little more further. If no ticket exists, please open a new one.\n\nIn general please _provide example configurations_ (config.xml, Job DSL scripts, ...) and also screenshots are very helpful to reproduce\nproblems.\n\nPlease try to be constructive. If you have a feedback, it's better to write me a direct message. \n\n## Pull Requests\n\nFor bug fixes and enhancements to existing features, first make sure an issue is filed by checking [this Jira filter](https://issues.jenkins-ci.org/issues/?jql=status%20not%20in%20(Resolved%2C%20Closed%2C%20Done)%20AND%20component%20%3D%20postbuildscript-plugin)\n\nAfter that please create a pull request on GitHub with your change and link to the JIRA issue in the PR, and link to\nthe PR from the JIRA issue.\n\n## Release Notes\n\n### Version 3.4.1\n\n* [Allows to cancel the job without build failure](https://github.com/jenkinsci/postbuildscript-plugin/pull/219)\n\n### Version 3.4.0\n\n* Upgraded to Jenkins Plugin POM 5.1\n* Upgraded to Jenkins 2.462.3\n* Reformatted source code with Spotless\n\n### Version 3.3.0\n\n* Upgraded to Jenkins 2.452\n* Upgraded to JUnit 5\n\n### Version 3.2.0\n\nDependencies require Jenkins 2.359, so this will be the new base version for the PostBuildScript plugin.\n\n### Version 3.1.0\n\nUpdated Jenkins Plugin Parent to Version 4.32 to ensure, that no Log4j issues exist. Also updated Matrix Project dependency\nto 1.19, which requires at least Jenkins 2.282. Therefore switched to Jenkins version 2.289.\n\n### Version 3.0.0\n\nI removed several deprecated configuration parts in this version. They were deprecated long time ago on very old versions.\nOn https://stats.jenkins.io/plugin-installation-trend/postbuildscript.stats.json\nyou can see, that most installations use version 2.11.0 of this plugin now. Most versions silently upgrade to a newer configuration,\nso I recommend to first upgrade minor versions and save your job configurations. For most users there won't be a problem, but users of very old \nplugin versions < 2.8.0 should first upgrade to at least 2.8.0 and save their job configurations.\n\n*Users of the Jenkins Job DSL should use the dynamic DSL and not the old manual implementation of the PostBuildScript publisher.*\n\n* JENKINS-65797 Due to major changes in the job configuration, this plugin version is now based on Jenkins 2.277.1 and therefore requires\na new Jenkins version. I also cannot guarantee, that old job configurations will work. Please mind potential broken configurations when\nupgrading and make sure, that you backed up your files. I recommend you to check your build jobs carefully.\n* Updates Jenkins Plugin Parent\n* Fix problem with script file path determination using Windows\n\n### Version 2.11.0\n\n* JENKINS-63529 - Allows configuring, whether to stop a post build step if any of its steps fails. \n\n### Version 2.10.0\n\n* Upgrade to parent POM version 4. It will at least support Jenkins 2.200\n\n### Version 2.9.1\n\n* JENKINS-57545 - Java 11 support\n\n### Version 2.8.1\n\n* JENKINS-53446 - Allows saving post-build script steps without actual build steps\n\n### Version 2.8.0\n\n* JENKINS-53691 - Implemented mechanism to migrate old matrix project post-build actions\n\n### Version 2.7.0\n\n* JENKINS-50799 - Skips script when flagged to run when failing\n\n### Version 2.6.0\n\nRemoved access to workspace on master for Groovy script execution, because secure groovy scripts cannot be configured\non slaves when using a master-to-slave callable. Groovy scripts may not access files of the master's workspace as a\nresult. However Groovy scripts can be run on slaves again. Thanks to John David for reporting this issue.\n\n* JENKINS-49952 - Groovy post-build script in matrix job throws exception\n\n### Version 2.5.1\n\nIf the shebang contains a space in front of the interpreter, it will be stripped out.\n\n* JENKINS-49681 - Scripts always fail when run in build, but succeed from command line\n\n### Version 2.5.0\n\nThis version introduces the ability to run Groovy scripts in a sandbox when activated using the checkbox in the configuration view.\n\nNow you can also select for each script whether it should be executed on each axe or on the whole matrix.\n\n* JENKINS-48014 - Allow sandboxing for Groovy scripts\n* JENKINS-22489 - Add the ability to specify where each script executes instead of all of the scripts when\nadded to a matrix job.\n\n### Version 2.4.0\n\nThe old option to build only on success or on failure will now be migrated differently: If both is not selected, the\nbehavior of versions previous to 1.0.0 was to build it independent of the actual build result. Previous versions (after\n1.0.0) simply migrate that to do nothing. With version 2.4.0 every build result will be selected in such cases.\n\n* JENKINS-49423 - Upgrade from 0.17 incomplete when scriptOnlyIfSuccess and scriptOnlyIfFailure are both false\n\n### Version 2.3.0\n\n* JENKINS-48931 - PostBuildScript Execute Script Execute Shell Textbox Formatting Broken\n\n### Version 2.2.1\n\nRemoving deprecated fields from configuration\n\nUsing default values for results and roles on newly created script items.\n\n### Version 2.2.0\n\nUnified script file handling.\n\nThere are separate messages now, if a script is not run because the build result or the role does not fit.\n\n### Version 2.1.0\n\nDan Clayton added the BUILD_RESULT variable to allow handling script actions depending on the build result.\n\n### Version 2.0.0\n\nRefactored the way, how script files are differentiated. This ensures extensibility and helps removing redundant code.\n\nAlso removed null pointer exception that occurs on executing a postbuild groovy script on an agent.\n\n### Version 1.1.1\n\nFixed some bugs that came in with the release of a new major version. Sorry for the inconvenience.\n\n* JENKINS-48197 - Do not initialize fields already loaded from configuration\n* JENKINS-48177 - Even marking build as unstable when errors during script execution appear\n* JENKINS-48169 - Using better descriptions for role limitations \n\n### Version 1.1.0\n\nAttention: This is a major refactoring of the plugin. It hasn't been updated for years now. The configuration was changed,\nbut your existing configuration will be automatically migrated to the new format. I cannot reproduce every configuration, so\nplease open a bug ticket (and try to be kind, I'm doing this in my free time and don't want to harm anyone).\n\n* JENKINS-11285 - Ability to run postbuild script on a given node\n\n### Version 1.0.0\n* JENKINS-30011 - Allow multiple instances of Post Build Scripts as a post build action\n* Fix JENKINS-28825 - Confusing error message when leaving script path empty\n* Major refactoring, but still trying to be downwards compatible\n* Added help files and translations\n* JENKINS-24308 - Expost build variable, the AbstractBuild\n\n### Version 0.18\n* Fix JENKINS-43637 - Arbitrary code execution vulnerability:\nhttps://github.com/jenkinsci/postbuildscript-plugin/pull/15\n* Fix JENKINS-19873 - Batch or a shell script files to execute doesn't run with arguments\n\n### Version 0.17\n* Added an option to set the build to unstable instead of failed\n\n### Version 0.16\n* Fix JENKINS-16789 - Concurrent builds using postbuildscript plugin will wait for all the instances to finish\n\n### Version 0.15\n* Fix JENKINS-19954 - PostBuildScript runs for each matrix configuration rather than after they are all completed when\nset to MATRIX\n\n### Version 0.14\n* Fix JENKINS-19326 - Groovy script should execute with workspace dir as working directory.\n* Fix JENKINS-19072 - No Such Field: 'executeOnMatrixNodes'\n* Fix JENKINS-18936 - checkbox is not staying checked\n* Fix JENKINS-19033 - execution is always last, rather than where placed in the post-build actions list\n* Fix JENKINS-18530 - Postbuild script plugin not respecting order in Post-build Action\n\n### Version 0.13\n* Fix JENKINS-11219 - execution is always last, rather than where placed in the post-build actions list\n\n### Version 0.12\n* Let user configure script to be executed either on matrix head or axes nodes. Hidden for non-matrix projects\n\n### Version 0.11\n* Fix JENKINS-15395 - Add checkbox to run script when build fails (as well as when it passes)\n\n### Version 0.10\n* Fix JENKINS-14668 - failure to load without ivy plugin installed\n\n### Version 0.9\n* Merge pull request - Make dependency to Ivy plugin optional\n\n### Version 0.8\n* Fixed JENKINS-13418 - PostBuildScript plugin does not load its configuration properly\n* Change default value for condition to run scripts if the build is not on success.\n\n### Version 0.7\n* Fixed a bug where this plugin breaks Promoted Builds Plugin\n\n### Version 0.6\n* Added support of Ivy job type\n\n### Version 0.5\n* Built for 1.409 (LTS series)\n* Added an option to run this build scripts only on success (merge pull request)\n\n### Version 0.4\n* Fixed JENKINS-11219 - Add the option to run the script after all the sub elements of a matrix project build have\nfinished\n\n### Version 0.3\n* Added job build steps to post-build actions\n\n### Version 0.2\n* Fixed JENKINS-10889 - PostBuildScript plugin fails with Maven2 jobs\n\n### Version 0.1\n* Initial Version \n (Distance: 1.2902)",
    "rank_2_distance": 1.2902,
    "rank_3_name": "# Job Environment Variables Status Sync",
    "rank_3_content": "# Job Environment Variables Status Sync\n\n## Introduction\n\nThe plugin offers a seamless integration framework for developers across various platforms, enabling them to effortlessly monitor and engage with Jenkins pipelines. This plugin facilitates external systems to:\n+ \n+ **Retrieve Pipeline Task Execution Statuses**: It allows for a straightforward way to access and track the status of individual pipeline tasks, providing visibility into the progress and success of each step.\n+ **Access Pipeline Environment Variables**: Users can seamlessly access environment variables associated with pipeline runs. This feature is crucial for understanding the context and environment within which the pipeline is executing, facilitating more informed decision-making and dynamic configuration.\n+ **Send Custom Information During Pipeline Execution**: The plugin enables the transmission of custom information from external systems directly into the pipeline execution process. This allows for dynamic integration and customization, enhancing the flexibility and adaptability of CI/CD workflows.\n\nBy adopting this plugin, platform developers can significantly enhance their continuous integration and continuous deployment (CI/CD) processes, all with minimal configuration overhead. All that's required is to specify the request URL and pertinent details within the Jenkins system settings, and the plugin seamlessly manages the communication bridge between Jenkins and external platforms, streamlining integration and collaboration.\n\n## Getting started\n### System Config\n![System Config](docs/img2.png \"System Config\")\n\nTo begin using the plugin and integrating your external system with Jenkins pipelines, follow these steps:\n\n1. **Navigate to Jenkins System Configuration**\n   Go to **Manage Jenkins** > **Configure System**.\n   Scroll down to the section for **Job Status Notification Config**.\n2. **Configure the Request Information**\n   You'll need to provide the following details:\n\n+ Request URL:\n  + Enter the endpoint where the plugin should send pipeline execution data. This could be a REST API or another system endpoint designed to receive updates from Jenkins pipelines. \n  + Example: http://api.example.com/pipeline/status\n+ Request Method:\n\n  + Select the HTTP method that the plugin will use to communicate with your external system.\n  + Available options:\n      + GET ‚Äì Retrieve data.\n      + POST ‚Äì Send data to the external system (most common).\n      + PUT ‚Äì Update existing data on the external system.\n      + DELETE ‚Äì Remove data on the external system.\n  + Choose the method that best suits your API or integration requirement.\n+ Headers (Optional):\n\n    + If the external system requires specific headers for authentication (e.g., API tokens) or other metadata, add the required headers here.\n    + To add a header:\n        + Enter the Header Key (e.g., Authorization).\n        + Enter the Header Value (e.g., Bearer YOUR_API_TOKEN).\n3. **Save the Configuration**\n   After filling out the request URL, method, and headers, click Save at the bottom of the page.\n4. **Plugin in Action**\n   During the execution of a Jenkins pipeline, the plugin will automatically send real-time status updates and environment variables to the configured endpoint.\n   The system will use the provided HTTP method and include the specified headers in each request.\n### Sending Notifications\n   ![Notify Config](docs/img_1.png \"Notify\")\n   To send notifications during pipeline execution, simply include the required information in the body of the request. The plugin will handle the rest and send the data to the configured endpoint.\n\n+ **Body Content**: The information you want to send, such as pipeline status, task details, or custom data.\n+ The request will automatically use the configured **URL**, **method**, and **headers**.\nNo complex setup required‚Äîjust add your information to the body and the plugin will send it as part of the notification!\n\n### Sample request\n\n**The pipeline starts to execute** POST request\nThe fields of **buildNo** , **jobExecuteStatus** and **body** are added by the plugin, and the others are environment variables, and build with parameter will also be in the environment variables\n**jobExecuteStatus** has the following parameters:\n  + START\n  + RUNNING\n  + COMPLETE\n  + SUCCESS\n  + UNSTABLE\n  + FAILURE\n  + NOT_BUILT\n  + ABORTED\n```json\n{\n  \"buildNo\": \"3\",\n  \"jobExecuteStatus\": \"RUNNING\",\n  \"body\":\"ssh executed !\",\n  \"BUILD_DISPLAY_NAME\": \"#3\",\n  \"BUILD_ID\": \"3\",\n  \"BUILD_NUMBER\": \"3\",\n  \"BUILD_TAG\": \"jenkins-test-folder-openssh9-test-3\",\n  \"BUILD_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/\",\n  \"CI\": \"true\",\n  \"CLASSPATH\": \"\",\n  \"COPY_REFERENCE_FILE_LOG\": \"/var/jenkins_home/copy_reference_file.log\",\n  \"DSO_URL_PATH\": \"http://api.example.com:32553/\",\n  \"EXECUTOR_NUMBER\": \"-1\",\n  \"HOME\": \"/root\",\n  \"HOSTNAME\": \"jenkins-service-5ccc5794f4-8cjr4\",\n  \"HUDSON_HOME\": \"/var/jenkins_home\",\n  \"HUDSON_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"HUDSON_URL\": \"http://api.example.com:39931/\",\n  \"JAVA_HOME\": \"/opt/java/openjdk\",\n  \"JENKINS_HOME\": \"/var/jenkins_home\",\n  \"JENKINS_INCREMENTALS_REPO_MIRROR\": \"https://repo.jenkins-ci.org/incrementals\",\n  \"JENKINS_PORT\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"JENKINS_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_50000\": \"50000\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_8080\": \"8080\",\n  \"JENKINS_SERVICE_PORT\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_50000\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_8080\": \"8080\",\n  \"JENKINS_SLAVE_AGENT_PORT\": \"50000\",\n  \"JENKINS_UC\": \"https://updates.jenkins.io\",\n  \"JENKINS_UC_EXPERIMENTAL\": \"https://updates.jenkins.io/experimental\",\n  \"JENKINS_URL\": \"http://api.example.com:39931/\",\n  \"JENKINS_VERSION\": \"2.469\",\n  \"JOB_BASE_NAME\": \"openssh9-test\",\n  \"JOB_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/display/redirect\",\n  \"JOB_EXECUTE_STATUS\": \"RUNNING\",\n  \"JOB_NAME\": \"test-folder/openssh9-test\",\n  \"JOB_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/\",\n  \"KUBERNETES_PORT\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP_ADDR\": \"127.0.0.1\",\n  \"KUBERNETES_PORT_443_TCP_PORT\": \"443\",\n  \"KUBERNETES_PORT_443_TCP_PROTO\": \"tcp\",\n  \"KUBERNETES_SERVICE_HOST\": \"127.0.0.1\",\n  \"KUBERNETES_SERVICE_PORT\": \"443\",\n  \"KUBERNETES_SERVICE_PORT_HTTPS\": \"443\",\n  \"LANG\": \"C.UTF-8\",\n  \"NODE_LABELS\": \"built-in master\",\n  \"NODE_NAME\": \"built-in\",\n  \"PATH\": \"/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n  \"PWD\": \"/\",\n  \"REF\": \"/usr/share/jenkins/ref\",\n  \"RUN_ARTIFACTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=artifacts\",\n  \"RUN_CHANGES_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=changes\",\n  \"RUN_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect\",\n  \"RUN_TESTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=tests\",\n  \"SHLVL\": \"0\"\n}\n```\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.3199)",
    "rank_3_distance": 1.3199
  },
  {
    "step": "{'name': 'junit', 'raw_args': {'testResults': '**/build/test-results/test/*.xml'}}",
    "rank_1_name": "This plugin publishes test results of an execution of a testing tool in Jenkins.",
    "rank_1_content": "This plugin publishes test results of an execution of a testing tool in Jenkins.\n\n![](docs/images/xunit_features.JPG)\n\n# Features\n\n-   Records xUnit tests\n-   Mark the build unstable or fail according to threshold values\n\n# Supported tools\n\n## Embedded tools\n\n* JUnit (supported schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd) and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd))\n* [AUnit](http://libre.adacore.com/libre/tools/aunit/)\n* [MSTest](http://en.wikipedia.org/wiki/MSTest) (imported from [MSTest Plugin](https://github.com/jenkinsci/mstest-plugin))\n* [NUnit](http://www.nunit.org/index.php) (imported from [NUnit Plugin](https://github.com/jenkinsci/nunit-plugin))\n* [UnitTest++](http://unittest-cpp.sourceforge.net/)\n* [Boost Test Library](http://www.boost.org/doc/libs/1_39_0/libs/test/doc/html/index.html)\n* [PHPUnit](http://www.phpunit.de/)\n* [Free Pascal Unit](http://www.freepascal.org/units.html)\n* [CppUnit](https://sourceforge.net/projects/cppunit/)\n* [MbUnit](http://www.mbunit.com/)\n* [Googletest](http://code.google.com/p/googletest/)\n* [EmbUnit](http://embunit.sourceforge.net/embunit/index.html)\n* [gtester/glib](https://developer.gnome.org/glib/stable/gtester.html)\n* [QTestLib](http://doc.qt.io/qt-5/qtest-overview.html)\n\n## Other plugins as an extension of the xUnit plugin:\n\n* [Gallio](http://www.gallio.org/) ([Gallio plugin](https://github.com/jenkinsci/gallio-plugin))\n* [Parasoft C++Test tool](http://www.parasoft.com/jsp/products/cpptest.jsp) ([Cpptest Plugin](https://github.com/jenkinsci/parasoft-findings-plugin))\n* [JSUnit](http://www.jsunit.net/) ([JSUnit Plugin](https://github.com/jenkinsci/jsunit-plugin))\n* [JBehave](http://jbehave.org/reference/stable/hudson-plugin.html)\n* [TestComplete](http://smartbear.com/product/testcomplete/overview/) ([TestComplete xUnit Plugin](https://github.com/jenkinsci/testcomplete-xunit-plugin))\n\n## External contributions\n\nFor each xUnit tool, an embedded style sheet is used.\nHowever, the plugin also enables you to use a custom style sheet for your own tool such as :\n\n* [WebUI](http://github.com/versionone/webui-plugin)\n* [Ranorex](http://github.com/ranorex/ranorex-to-xunit)\n\n# Configuration\n\n## Job Configuration\n\n* Execute your testing tools manually or as a step of your build chain\n* Give a pattern that specifies your test results\n\n![](docs/images/xunit-conf-0.2.png)\n\n##  Provide User XSL\n\nIf you want to customise how a input report is transformed to a JUnit report of an existing tool type; xUnit provides a way to use your own XSL if placed at specific path.\nSpecify your XSLs in the `JENKINS_HOME/userContent` directory with the following convention:\n\n```\n$JENKINS_HOME/userContent/xunit/[toolName]/[version]/[any_name].xsl\n```\n\nFor example:\n\n```\n$JENKINS_HOME/userContent/xunit/AUnit/3.x/aunit-to-junit.xsl\n```\n\n**Note**: The tool name and the version are taken from the label in the combo box from the UI.\nIf the tool doesn't have a version (N/A), do not create a version directory.\n\n##  Custom Tool for unsupported formats\n\nXUnit supports a large number of report format, but not all.\nFor unsupported report type an user could provide an own stylesheet that convert the original report into a supported JUnit report.\n\nWhen choose the \"Custom Tool\" as tool type a path to the user XSL must be provided.\nThe path is relative and the plugin lookup the provided relative path using the following priority:\n\n1.  on Jenkins controller\n2.  on Jenkins agent\n3.  relative to workspace\n\nYou could also provide an URL to the stylesheet.\nIf the XSL file is placed in the `$JENKINS_HOME/userContent` folder, the file will be available under the URL\n`http(s)://$JENKINS_URL/userContent/<xsl file>`\n\n### Publish test result checks\n\nThis feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nWhen enabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\nIn the *Details* view of each check, test results will be displayed.\n\nIn order to enable the checks feature, set the property `skipPublishingChecks` to `false`\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  xunit (tools: [ BoostTest(pattern: 'integration/*.xml') ], skipPublishingChecks: false)\n}\n// no stage at all\nxunit (tools: [ BoostTest(pattern: 'boost/*.xml') ], skipPublishingChecks: false)\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    xunit (tools: [ MSTest(pattern: '**/*.trx') ], skipPublishingChecks: false)\n  }\n}\n```\n\n# xUnit Architecture\n\n## Global Architecture\n\nWhen this plugin is installed and configured, Jenkins can transform test result reports produced by different testing tools into JUnit test result format.\nThe JUnit tests can then be recorded by Jenkins.\nJenkins can provide useful information about test results, such as the historical test result trend, web UI for viewing test reports, tracking failures, and so on.\n\nUnder the hood, xUnit Jenkins plugin delegates processing to [DTKit](https://plugins.jenkins.io/dtkit/).\n\n![](docs/images/xunit_architecture.JPG)\n\n## DTKit Activities for XUnit\n\n![](docs/images/xunit_dtkit_activities.JPG)\n\n## DTKit Packaging\n\n## ![](docs/images/xunit_packaging.JPG)\n\n## Working with Pipelines\n\nIt is also possible to set an xUnit configuration in a pipeline job, but is somewhat more verbose.\n\nFor example, creating a boost pipeline (declarative) with the same\nconfiguration as above would be:\n\n**Example of pipeline**\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Test'){\n            steps {\n                sh \"run_tests.bash\"\n            }\n        }\n    }\n    post {\n        always{\n            xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ BoostTest(pattern: 'boost/*.xml') ]\n            )\n        }\n    }\n }\n```\n\n# Releases\n\n**Moved to [GitHub repository page](https://github.com/jenkinsci/xunit-plugin/releases/)**\n\n## Version 2.2.5\n\n#### Improvements\n\n-   [JENKINS-51645](https://issues.jenkins-ci.org/browse/JENKINS-51645) Add\n    support for claims plugin in xUnit (nfalco79 to Arnaud)\n-   [JENKINS-24224](https://issues.jenkins-ci.org/browse/JENKINS-24224) improve\n    xunit plugin with test-stability plugin (nfalco79 to Arnaud)\n\n#### Bugfixes\n\n-   [JENKINS-53186](https://issues.jenkins-ci.org/browse/JENKINS-53186) NUnit\n    2.x test cases with result Error are reported as Success (nfalco79)\n-   Fix lookup strategy when user provides a custom stylesheets file to\n    override the embedded one (nfalco79)\n-   [JENKINS-53034](https://issues.jenkins-ci.org/browse/JENKINS-53034) Failure\n    when validate NUnit 2.x reports generated by NUnit 3.x console\n    (nfalco79)\n-   [JENKINS-53036](https://issues.jenkins-ci.org/browse/JENKINS-53036) NPE\n    after upgrade to 2.2.1 when run publisher (nfalco79)\n-   [JENKINS-52908](https://issues.jenkins-ci.org/browse/JENKINS-52908) Newlines\n    get ignored in failure message and possibly stack trace when\n    uploading xUnitDotNet xml results (nfalco79)\n\n## Version 2.1.0\n\n#### Improvements\n\n-   [JENKINS-32920](https://issues.jenkins-ci.org/browse/JENKINS-32920)\n    Support for URL for stylesheet in Custom Tool (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-52512](https://issues.jenkins-ci.org/browse/JENKINS-52512)\n    Builds on agent fails when there is no report file even if set\n    to do not fail (nfalco79)\n-   [JENKINS-52400](https://issues.jenkins-ci.org/browse/JENKINS-52400)\n    xUnit miss to add required attributes when converts Valgrind reports\n    (nfalco79)\n\n## Version 2.0.4\n\n#### Improvements\n\n-   Improved GoogleTest, FPCUnit, CppTest XSLT to produce a report more\n    compliant with surefire XSD\n\n#### Bugfixes\n\n-   [JENKINS-52327](https://issues.jenkins-ci.org/browse/JENKINS-52327) java.nio.file.AccessDeniedException\n    on Publish xunit Custom tool test report (nfalco79 to greghoeppner)\n-   [JENKINS-52202](https://issues.jenkins-ci.org/browse/JENKINS-52202)\n    xUnit reports \"All test reports are empty\" in case of parallel steps\n    but reports are not empty (nfalco79)\n-   [JENKINS-52253](https://issues.jenkins-ci.org/browse/JENKINS-52253)\n    xUnit in case of multiple tool type processes only the first one\n    (nfalco79)\n-   [JENKINS-52173](https://issues.jenkins-ci.org/browse/JENKINS-52173)\n    xUnit fails when converting gtester/glib2 input to junit format\n    (nfalco79)\n-   [JENKINS-51604](https://issues.jenkins-ci.org/browse/JENKINS-51604) XPathExeption\n    when parsing QtTestLib Reports when a Test contains multiple\n    Incidents (nfalco79)\n-   [JENKINS-27860](https://issues.jenkins-ci.org/browse/JENKINS-27860) Build\n    does not stop if it is marked as Failure when the opportune option\n    is enabled (nfalco79)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194) xUnit\n    should not consider report generated by other xUnit step (nfalco79)\n-   [JENKINS-52107](https://issues.jenkins-ci.org/browse/JENKINS-52107) Convertion\n    exception for NUnit 2.1 reports because nunit-version attribute not\n    contains only digits (nfalco79)\n-   [JENKINS-41093](https://issues.jenkins-ci.org/browse/JENKINS-41093)\n    For Unittest++ xml, only the first failure of each test case is\n    recognized (nfalco79)\n-   [JENKINS-51767](https://issues.jenkins-ci.org/browse/JENKINS-51767)\n    xUnit 2.x XSD does not validate NUnit 2.x XML report file (nfalco79)\n-   [JENKINS-51797](https://issues.jenkins-ci.org/browse/JENKINS-51797)\n    xUnit.Net v2 parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51798](https://issues.jenkins-ci.org/browse/JENKINS-51798) GoogleTest\n    parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51561](https://issues.jenkins-ci.org/browse/JENKINS-51561)\n    xUnit plugin fails to parse NUnit 2 report format generated by NUnit\n    3.6.0.0 (nfalco79)\n-   [JENKINS-51465](https://issues.jenkins-ci.org/browse/JENKINS-51465)\n    Exception in XSL Transformation cause JEP-200 (nfalco79)\n-   [JENKINS-51481](https://issues.jenkins-ci.org/browse/JENKINS-51481)\n    Parse error occur when NUnit report have categories (nfalco79)\n-   [JENKINS-26227](https://issues.jenkins-ci.org/browse/JENKINS-26227)\n    xUnit plugin doesn't use OS culture when reads time values in\n    [xUnit.net](http://xunit.net/) output (nfalco79)\n-   [JENKINS-12417](https://issues.jenkins-ci.org/browse/JENKINS-12417)\n    xUnit problems with CppTest reports generated with default options\n    (nfalco79)\n-   [JENKINS-28871](https://issues.jenkins-ci.org/browse/JENKINS-28871)\n    CppTest 9.5 report file seems not valid for xUnit when no tests was\n    executed (nfalco79)\n\n## Version 2.0.0\n\n#### Breaking Changes\n\nI have introduce some schemas validation becase the large number of\nissues opened to xUnit plugin. Those issues are caused by custom\nattributes or XML DOM in the report generated by some user/tools report\nlogger also if they declare to produce a valid report file. This cause\nme to spend a lot of time to investigate what is right and what is wrong\nand how to implement the XSL without it goes in error during\ntransformation. \n\n-   **Official supported JUnit schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\n    and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd)).**\n\nIn case you are using a non java tools that declares to produce a JUnit\ncompatible report, ensure the report respects one of the widely used\nsupported schemas. If not than select as test type the build step\n\"Custom Tool\" and\nuse [this](https://github.com/jenkinsci/xunit-plugin/blob/master/docs/files/input.xsl)\nXSL as\ndescribed [here](#provide-user-xsl). The XSL is provided AS IS without any support.\n\n-   **NUnit 2.x (2.0 - 2.6) schema validation from official\n    distribution.**\n\nIn case you are using a tools that declares to produce a NUnit 2\ncompatible report, ensure the report respects the official schemas. If\nnot than select as test type the build step \"Custom Tool\" and provide a\nXSL as\ndescribed [here](#provide-user-xsl).\n\n#### Improvements\n\n-   Improved MSTest, MbUnit, AUnit, NUnit, QtTest XSLT to produce a\n    report more compliant with surefire XSD\n-   Change UI rendering of the report tool and clarify the pattern\n    description\n-   [JENKINS-37611](https://issues.jenkins-ci.org/browse/JENKINS-37611)\n    Add support for pipeline using @Symbol annotation to xunit and its\n    parameters (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-42715](https://issues.jenkins-ci.org/browse/JENKINS-42715)\n    xUnit does not support PHPUnit 5.x skipped attribute (nfalco79 to\n    ray)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194)\n    xUnit should not consider report generated by other xUnit step\n    (nfalco79)\n-   [JENKINS-10911](https://issues.jenkins-ci.org/browse/JENKINS-10911)\n    xUnit not detecting Ignored MSTest and NUnit Tests (nfalco79)\n-   [JENKINS-51347](https://issues.jenkins-ci.org/browse/JENKINS-51347)\n    Test Status \"notrun\" being reported as \"failed\" test (nfalco79)\n-   [JENKINS-13113](https://issues.jenkins-ci.org/browse/JENKINS-13113)\n    xUnit plugins detects MSTEST \"NotExecuted\" as successed instead of\n    skipped (nfalco79)\n\n## Version 1.104\n\n#### Improvements\n\n-   [JENKINS-33450](https://issues.jenkins-ci.org/browse/JENKINS-33450)\n    Support for NUnit3 which uses a different XML format by NUnit2\n    (nfalco79 to alexschwantes)\n\n-   [JENKINS-50658](https://issues.jenkins-ci.org/browse/JENKINS-50658)\n    Fix xsd to be compliant with surefire report and rerun option\n    (nfalco79 to alemorato)\n-   Move plugin to pipeline so that commits and pull request could be\n    checked for test failure\n\n#### Bugfixes\n\n-   [JENKINS-48945](https://issues.jenkins-ci.org/browse/JENKINS-48945)\n    Testreport lacks of those test in which the hashcode of two\n    different testsuite name coincide (nfalco79)\n-   [JENKINS-33385](https://issues.jenkins-ci.org/browse/JENKINS-33385)\n    Testresult doesn't show test name in case the package is empty\n    (nfalco79 to Zenger Alexander)\n\n-   [JENKINS-51056](https://issues.jenkins-ci.org/browse/JENKINS-51056)\n    xUnit throws NPE when no threshold was specified (nfalco79)\n-   [JENKINS-35660](https://issues.jenkins-ci.org/browse/JENKINS-35660)\n    QTestLib time information is lost (nfalco79 to kpop)\n-   [JENKINS-28471](https://issues.jenkins-ci.org/browse/JENKINS-28471)\n    xUnit should compare test results to last build where tests was\n    recorded to calculate correctly thresholds (nfalco79 to Jimilian)\n-   [JENKINS-50378](https://issues.jenkins-ci.org/browse/JENKINS-50378)\n    Skipped count percentage is affected by integer rounding (nfalco79\n    to pauljohnston2009)\n-   [JENKINS-42031](https://issues.jenkins-ci.org/browse/JENKINS-42031)\n    xUnit Plugin Does Not Parse Some Boost 1.63 Test Reports (nfalco79\n    to aschet)\n-   Relax BoostTest code line validation (nfalco79 to penberg)\n-   Ensure testuite time attribute is valid for NUnit\n-   [JENKINS-24382](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)\n    Add basic support for Unit\n\n## Version 1.100\n\n-   Fix\n    [JENKINS-30812](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    added parsing for gtest errors so that a failure to run a test is\n    considered a test failure\n-   Fix\n    [JENKINS-27240](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    Workflow integration XUnit as a SimpleBuildSte \n (Distance: 1.0227)",
    "rank_1_distance": 1.0227,
    "rank_2_name": "# JUnit Plugin for Jenkins",
    "rank_2_content": "# JUnit Plugin for Jenkins\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/junit.svg)](https://plugins.jenkins.io/junit)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/junit-plugin.svg?label=release)](https://github.com/jenkinsci/junit-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/junit.svg?color=blue)](https://plugins.jenkins.io/junit)\n\nThe JUnit plugin provides a publisher that consumes XML test reports generated during the builds and provides some graphical visualization of the historical test results \n(see [JUnit graph](https://wiki.jenkins.io/display/JENKINS/JUnit+graph) for a sample) \nas well as a web UI for viewing test reports, tracking failures, and so on. \nJenkins understands the JUnit test report XML format (which is also used by TestNG). \nWhen this option is configured, Jenkins can provide useful information about test results, such as trends.\n\nThe plugin also provides a generic API for other unit-test publisher plugins in Jenkins. This functionality was part of the Jenkins Core until it was split out to this plugin in version in 1.577.\n\n## Configuration\n\nThe JUnit publisher is configured at the job level by adding a Publish JUnit test result report post build action. The configuration parameters include:\n\n* **Test report XMLs:** Specify the path to JUnit XML files in the Ant glob syntax, such as `**/build/test-reports/*.xml`. \n  Be sure not to include any non-report files into this pattern. \n  You can specify multiple patterns of files separated by commas. \n  The base directory of the fileset is the workspace root.\n* **Retain long standard output/error:** If checked, any standard output or error from a test suite will be retained in the test results after the build completes. \n  (This refers only to additional messages printed to console, not to a failure stack trace). \n  Such output is always kept if the test failed, but by default lengthy output from passing tests is truncated to save space. \n  Check this option if you need to see every log message from even passing tests, but beware that Jenkins's memory consumption can substantially increase as a result, even if you never look at the test results!\n* **Health report amplification factor:** The amplification factor to apply to test failures when computing the test result contribution to the build health score. \n  The default factor is 1.0. A factor of 0.0 will disable the test result contribution to build health score, and, as an example, a factor of 0.5 means that 10% of tests failing will score 95% health. \n  The factor is persisted with the build results, so changes will only be reflected in new builds.\n* **Allow empty results:** If checked, the default behavior of failing a build on missing test result files or empty test results is changed to not affect the status of the build. \n  Please note that this setting make it harder to spot misconfigured jobs or build failures where the test tool does not exit with an error code when not producing test report files.\n* **Skip publishing checks:** If this option is unchecked, then the plugin automatically publishes the test results to corresponding SCM hosting platforms.\n  For example, if you are using this feature for a GitHub organization project, the warnings will be published to\n  GitHub through the Checks API. If this operation slows down your build, or you don't want to publish the warnings to\n  SCM platforms, you can use this option to deactivate this feature.\n* **Checks name:** If provided, and publishing checks enabled, the plugin will use this name when publishing\n  results to corresponding SCM hosting platforms. If not, a default of \"Test\" will be used.\n* **Skip marking build unstable:**  If this option is unchecked, then the plugin will mark the build as unstable when it finds at least 1 test failure.\n    If this option is checked, then the build will still be successful even if there are test failures reported.\n    In any case, the corresponding pipeline node (and stage) will be marked as unstable in case of test failure.\n    In order to enable this, set the property: \n    `skipMarkingBuildUnstable` to `true`:\n    \n      junit skipMarkingBuildUnstable: true, testResults: 'test-results.xml'\n      \n### Test result checks (for GitHub projects)\n\n:warning: This feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nIf not disabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\n\nIn the *Details* view of each check ([example](https://github.com/timja-org/junit-attachments-test/pull/4/checks?check_run_id=1237630805)), test results will be displayed.\n\n![checks](images/checks.png)\n\nIn order to disable the checks feature, set the property `skipPublishingChecks` to `true`:\n```groovy\njunit skipPublishingChecks: true, testResults: 'test-results.xml'\n```\n\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  junit 'test-results.xml'\n}\n\njunit 'more-test-results.xml'\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    junit 'yet-more-test-results.xml'\n  }\n}\n```\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md) \n (Distance: 1.0300)",
    "rank_2_distance": 1.03,
    "rank_3_name": "This project hosts a sample project that runs Selenium as an unit test.",
    "rank_3_content": "This project hosts a sample project that runs Selenium as an unit test.\n\nIt works with junit-attachment plugin as well. \n (Distance: 1.0360)",
    "rank_3_distance": 1.036
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': '**/build/libs/*', 'allowEmptyArchive': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'postProcess', 'raw_args': {'action': 'success'}}",
    "rank_1_name": "jython-postbuild-plugin",
    "rank_1_content": "jython-postbuild-plugin\n=======================\n\nJython plugin for Jenkins similar to the groovy postbuild plugin but that allows you to write the code in python (using jython to access java classes and methods)\n\n\nIt's a blunt copy of the groovy postbuild plugin, without the security enhancements that it has actually (that requires changing also the secure script plugin, will do with time) \n (Distance: 1.2880)",
    "rank_1_distance": 1.288,
    "rank_2_name": "![PostBuildScript](pbs-logo.svg)",
    "rank_2_content": "![PostBuildScript](pbs-logo.svg)\n\n# PostBuildScript Jenkins plugin\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/)\n[![Jenkins Plugins](https://img.shields.io/jenkins/plugin/v/postbuildscript.svg)](http://updates.jenkins-ci.org/download/plugins/postbuildscript)\n[![GitHub contributors](https://img.shields.io/github/contributors/jenkinsci/postbuildscript-plugin.svg)]()\n\nThe PostBuildScript plugin allows you to run the following actions after a build:\n\n* Batch or shell scripts\n* Groovy scripts\n* Build steps\n\nYou can configure these actions depending on the build status (i.e., only run when build is successful). \nScripts can also be executed on the master, on slaves or both. On matrix projects, the build can be executed on\neach axis.\n\n![User Interface](screenshot.png)\n\nPlease refer to the [plugin description](https://plugins.jenkins.io/postbuildscript) for further\ninformation.\n\n## Downloads\n\nYou'll find the latest HPI files of the plugin here:\n\nhttp://updates.jenkins-ci.org/download/plugins/postbuildscript\n\nJust put a HPI file into your plugins subdirectory of your Jenkins installation root, e.g. /var/lib/jenkins. Restart\nJenkins afterwards.\n\n## Issue Tracking\n\nPlease use the\n[official Jenkins Jira project and issue tracking software](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin)\nto report new bugs or request features.\n\nPlease first look through [Jira](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin). If a ticket\nalready exists, please add a comment and try to explain the issue a little more further. If no ticket exists, please open a new one.\n\nIn general please _provide example configurations_ (config.xml, Job DSL scripts, ...) and also screenshots are very helpful to reproduce\nproblems.\n\nPlease try to be constructive. If you have a feedback, it's better to write me a direct message. \n\n## Pull Requests\n\nFor bug fixes and enhancements to existing features, first make sure an issue is filed by checking [this Jira filter](https://issues.jenkins-ci.org/issues/?jql=status%20not%20in%20(Resolved%2C%20Closed%2C%20Done)%20AND%20component%20%3D%20postbuildscript-plugin)\n\nAfter that please create a pull request on GitHub with your change and link to the JIRA issue in the PR, and link to\nthe PR from the JIRA issue.\n\n## Release Notes\n\n### Version 3.4.1\n\n* [Allows to cancel the job without build failure](https://github.com/jenkinsci/postbuildscript-plugin/pull/219)\n\n### Version 3.4.0\n\n* Upgraded to Jenkins Plugin POM 5.1\n* Upgraded to Jenkins 2.462.3\n* Reformatted source code with Spotless\n\n### Version 3.3.0\n\n* Upgraded to Jenkins 2.452\n* Upgraded to JUnit 5\n\n### Version 3.2.0\n\nDependencies require Jenkins 2.359, so this will be the new base version for the PostBuildScript plugin.\n\n### Version 3.1.0\n\nUpdated Jenkins Plugin Parent to Version 4.32 to ensure, that no Log4j issues exist. Also updated Matrix Project dependency\nto 1.19, which requires at least Jenkins 2.282. Therefore switched to Jenkins version 2.289.\n\n### Version 3.0.0\n\nI removed several deprecated configuration parts in this version. They were deprecated long time ago on very old versions.\nOn https://stats.jenkins.io/plugin-installation-trend/postbuildscript.stats.json\nyou can see, that most installations use version 2.11.0 of this plugin now. Most versions silently upgrade to a newer configuration,\nso I recommend to first upgrade minor versions and save your job configurations. For most users there won't be a problem, but users of very old \nplugin versions < 2.8.0 should first upgrade to at least 2.8.0 and save their job configurations.\n\n*Users of the Jenkins Job DSL should use the dynamic DSL and not the old manual implementation of the PostBuildScript publisher.*\n\n* JENKINS-65797 Due to major changes in the job configuration, this plugin version is now based on Jenkins 2.277.1 and therefore requires\na new Jenkins version. I also cannot guarantee, that old job configurations will work. Please mind potential broken configurations when\nupgrading and make sure, that you backed up your files. I recommend you to check your build jobs carefully.\n* Updates Jenkins Plugin Parent\n* Fix problem with script file path determination using Windows\n\n### Version 2.11.0\n\n* JENKINS-63529 - Allows configuring, whether to stop a post build step if any of its steps fails. \n\n### Version 2.10.0\n\n* Upgrade to parent POM version 4. It will at least support Jenkins 2.200\n\n### Version 2.9.1\n\n* JENKINS-57545 - Java 11 support\n\n### Version 2.8.1\n\n* JENKINS-53446 - Allows saving post-build script steps without actual build steps\n\n### Version 2.8.0\n\n* JENKINS-53691 - Implemented mechanism to migrate old matrix project post-build actions\n\n### Version 2.7.0\n\n* JENKINS-50799 - Skips script when flagged to run when failing\n\n### Version 2.6.0\n\nRemoved access to workspace on master for Groovy script execution, because secure groovy scripts cannot be configured\non slaves when using a master-to-slave callable. Groovy scripts may not access files of the master's workspace as a\nresult. However Groovy scripts can be run on slaves again. Thanks to John David for reporting this issue.\n\n* JENKINS-49952 - Groovy post-build script in matrix job throws exception\n\n### Version 2.5.1\n\nIf the shebang contains a space in front of the interpreter, it will be stripped out.\n\n* JENKINS-49681 - Scripts always fail when run in build, but succeed from command line\n\n### Version 2.5.0\n\nThis version introduces the ability to run Groovy scripts in a sandbox when activated using the checkbox in the configuration view.\n\nNow you can also select for each script whether it should be executed on each axe or on the whole matrix.\n\n* JENKINS-48014 - Allow sandboxing for Groovy scripts\n* JENKINS-22489 - Add the ability to specify where each script executes instead of all of the scripts when\nadded to a matrix job.\n\n### Version 2.4.0\n\nThe old option to build only on success or on failure will now be migrated differently: If both is not selected, the\nbehavior of versions previous to 1.0.0 was to build it independent of the actual build result. Previous versions (after\n1.0.0) simply migrate that to do nothing. With version 2.4.0 every build result will be selected in such cases.\n\n* JENKINS-49423 - Upgrade from 0.17 incomplete when scriptOnlyIfSuccess and scriptOnlyIfFailure are both false\n\n### Version 2.3.0\n\n* JENKINS-48931 - PostBuildScript Execute Script Execute Shell Textbox Formatting Broken\n\n### Version 2.2.1\n\nRemoving deprecated fields from configuration\n\nUsing default values for results and roles on newly created script items.\n\n### Version 2.2.0\n\nUnified script file handling.\n\nThere are separate messages now, if a script is not run because the build result or the role does not fit.\n\n### Version 2.1.0\n\nDan Clayton added the BUILD_RESULT variable to allow handling script actions depending on the build result.\n\n### Version 2.0.0\n\nRefactored the way, how script files are differentiated. This ensures extensibility and helps removing redundant code.\n\nAlso removed null pointer exception that occurs on executing a postbuild groovy script on an agent.\n\n### Version 1.1.1\n\nFixed some bugs that came in with the release of a new major version. Sorry for the inconvenience.\n\n* JENKINS-48197 - Do not initialize fields already loaded from configuration\n* JENKINS-48177 - Even marking build as unstable when errors during script execution appear\n* JENKINS-48169 - Using better descriptions for role limitations \n\n### Version 1.1.0\n\nAttention: This is a major refactoring of the plugin. It hasn't been updated for years now. The configuration was changed,\nbut your existing configuration will be automatically migrated to the new format. I cannot reproduce every configuration, so\nplease open a bug ticket (and try to be kind, I'm doing this in my free time and don't want to harm anyone).\n\n* JENKINS-11285 - Ability to run postbuild script on a given node\n\n### Version 1.0.0\n* JENKINS-30011 - Allow multiple instances of Post Build Scripts as a post build action\n* Fix JENKINS-28825 - Confusing error message when leaving script path empty\n* Major refactoring, but still trying to be downwards compatible\n* Added help files and translations\n* JENKINS-24308 - Expost build variable, the AbstractBuild\n\n### Version 0.18\n* Fix JENKINS-43637 - Arbitrary code execution vulnerability:\nhttps://github.com/jenkinsci/postbuildscript-plugin/pull/15\n* Fix JENKINS-19873 - Batch or a shell script files to execute doesn't run with arguments\n\n### Version 0.17\n* Added an option to set the build to unstable instead of failed\n\n### Version 0.16\n* Fix JENKINS-16789 - Concurrent builds using postbuildscript plugin will wait for all the instances to finish\n\n### Version 0.15\n* Fix JENKINS-19954 - PostBuildScript runs for each matrix configuration rather than after they are all completed when\nset to MATRIX\n\n### Version 0.14\n* Fix JENKINS-19326 - Groovy script should execute with workspace dir as working directory.\n* Fix JENKINS-19072 - No Such Field: 'executeOnMatrixNodes'\n* Fix JENKINS-18936 - checkbox is not staying checked\n* Fix JENKINS-19033 - execution is always last, rather than where placed in the post-build actions list\n* Fix JENKINS-18530 - Postbuild script plugin not respecting order in Post-build Action\n\n### Version 0.13\n* Fix JENKINS-11219 - execution is always last, rather than where placed in the post-build actions list\n\n### Version 0.12\n* Let user configure script to be executed either on matrix head or axes nodes. Hidden for non-matrix projects\n\n### Version 0.11\n* Fix JENKINS-15395 - Add checkbox to run script when build fails (as well as when it passes)\n\n### Version 0.10\n* Fix JENKINS-14668 - failure to load without ivy plugin installed\n\n### Version 0.9\n* Merge pull request - Make dependency to Ivy plugin optional\n\n### Version 0.8\n* Fixed JENKINS-13418 - PostBuildScript plugin does not load its configuration properly\n* Change default value for condition to run scripts if the build is not on success.\n\n### Version 0.7\n* Fixed a bug where this plugin breaks Promoted Builds Plugin\n\n### Version 0.6\n* Added support of Ivy job type\n\n### Version 0.5\n* Built for 1.409 (LTS series)\n* Added an option to run this build scripts only on success (merge pull request)\n\n### Version 0.4\n* Fixed JENKINS-11219 - Add the option to run the script after all the sub elements of a matrix project build have\nfinished\n\n### Version 0.3\n* Added job build steps to post-build actions\n\n### Version 0.2\n* Fixed JENKINS-10889 - PostBuildScript plugin fails with Maven2 jobs\n\n### Version 0.1\n* Initial Version \n (Distance: 1.2902)",
    "rank_2_distance": 1.2902,
    "rank_3_name": "# Job Environment Variables Status Sync",
    "rank_3_content": "# Job Environment Variables Status Sync\n\n## Introduction\n\nThe plugin offers a seamless integration framework for developers across various platforms, enabling them to effortlessly monitor and engage with Jenkins pipelines. This plugin facilitates external systems to:\n+ \n+ **Retrieve Pipeline Task Execution Statuses**: It allows for a straightforward way to access and track the status of individual pipeline tasks, providing visibility into the progress and success of each step.\n+ **Access Pipeline Environment Variables**: Users can seamlessly access environment variables associated with pipeline runs. This feature is crucial for understanding the context and environment within which the pipeline is executing, facilitating more informed decision-making and dynamic configuration.\n+ **Send Custom Information During Pipeline Execution**: The plugin enables the transmission of custom information from external systems directly into the pipeline execution process. This allows for dynamic integration and customization, enhancing the flexibility and adaptability of CI/CD workflows.\n\nBy adopting this plugin, platform developers can significantly enhance their continuous integration and continuous deployment (CI/CD) processes, all with minimal configuration overhead. All that's required is to specify the request URL and pertinent details within the Jenkins system settings, and the plugin seamlessly manages the communication bridge between Jenkins and external platforms, streamlining integration and collaboration.\n\n## Getting started\n### System Config\n![System Config](docs/img2.png \"System Config\")\n\nTo begin using the plugin and integrating your external system with Jenkins pipelines, follow these steps:\n\n1. **Navigate to Jenkins System Configuration**\n   Go to **Manage Jenkins** > **Configure System**.\n   Scroll down to the section for **Job Status Notification Config**.\n2. **Configure the Request Information**\n   You'll need to provide the following details:\n\n+ Request URL:\n  + Enter the endpoint where the plugin should send pipeline execution data. This could be a REST API or another system endpoint designed to receive updates from Jenkins pipelines. \n  + Example: http://api.example.com/pipeline/status\n+ Request Method:\n\n  + Select the HTTP method that the plugin will use to communicate with your external system.\n  + Available options:\n      + GET ‚Äì Retrieve data.\n      + POST ‚Äì Send data to the external system (most common).\n      + PUT ‚Äì Update existing data on the external system.\n      + DELETE ‚Äì Remove data on the external system.\n  + Choose the method that best suits your API or integration requirement.\n+ Headers (Optional):\n\n    + If the external system requires specific headers for authentication (e.g., API tokens) or other metadata, add the required headers here.\n    + To add a header:\n        + Enter the Header Key (e.g., Authorization).\n        + Enter the Header Value (e.g., Bearer YOUR_API_TOKEN).\n3. **Save the Configuration**\n   After filling out the request URL, method, and headers, click Save at the bottom of the page.\n4. **Plugin in Action**\n   During the execution of a Jenkins pipeline, the plugin will automatically send real-time status updates and environment variables to the configured endpoint.\n   The system will use the provided HTTP method and include the specified headers in each request.\n### Sending Notifications\n   ![Notify Config](docs/img_1.png \"Notify\")\n   To send notifications during pipeline execution, simply include the required information in the body of the request. The plugin will handle the rest and send the data to the configured endpoint.\n\n+ **Body Content**: The information you want to send, such as pipeline status, task details, or custom data.\n+ The request will automatically use the configured **URL**, **method**, and **headers**.\nNo complex setup required‚Äîjust add your information to the body and the plugin will send it as part of the notification!\n\n### Sample request\n\n**The pipeline starts to execute** POST request\nThe fields of **buildNo** , **jobExecuteStatus** and **body** are added by the plugin, and the others are environment variables, and build with parameter will also be in the environment variables\n**jobExecuteStatus** has the following parameters:\n  + START\n  + RUNNING\n  + COMPLETE\n  + SUCCESS\n  + UNSTABLE\n  + FAILURE\n  + NOT_BUILT\n  + ABORTED\n```json\n{\n  \"buildNo\": \"3\",\n  \"jobExecuteStatus\": \"RUNNING\",\n  \"body\":\"ssh executed !\",\n  \"BUILD_DISPLAY_NAME\": \"#3\",\n  \"BUILD_ID\": \"3\",\n  \"BUILD_NUMBER\": \"3\",\n  \"BUILD_TAG\": \"jenkins-test-folder-openssh9-test-3\",\n  \"BUILD_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/\",\n  \"CI\": \"true\",\n  \"CLASSPATH\": \"\",\n  \"COPY_REFERENCE_FILE_LOG\": \"/var/jenkins_home/copy_reference_file.log\",\n  \"DSO_URL_PATH\": \"http://api.example.com:32553/\",\n  \"EXECUTOR_NUMBER\": \"-1\",\n  \"HOME\": \"/root\",\n  \"HOSTNAME\": \"jenkins-service-5ccc5794f4-8cjr4\",\n  \"HUDSON_HOME\": \"/var/jenkins_home\",\n  \"HUDSON_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"HUDSON_URL\": \"http://api.example.com:39931/\",\n  \"JAVA_HOME\": \"/opt/java/openjdk\",\n  \"JENKINS_HOME\": \"/var/jenkins_home\",\n  \"JENKINS_INCREMENTALS_REPO_MIRROR\": \"https://repo.jenkins-ci.org/incrementals\",\n  \"JENKINS_PORT\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"JENKINS_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_50000\": \"50000\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_8080\": \"8080\",\n  \"JENKINS_SERVICE_PORT\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_50000\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_8080\": \"8080\",\n  \"JENKINS_SLAVE_AGENT_PORT\": \"50000\",\n  \"JENKINS_UC\": \"https://updates.jenkins.io\",\n  \"JENKINS_UC_EXPERIMENTAL\": \"https://updates.jenkins.io/experimental\",\n  \"JENKINS_URL\": \"http://api.example.com:39931/\",\n  \"JENKINS_VERSION\": \"2.469\",\n  \"JOB_BASE_NAME\": \"openssh9-test\",\n  \"JOB_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/display/redirect\",\n  \"JOB_EXECUTE_STATUS\": \"RUNNING\",\n  \"JOB_NAME\": \"test-folder/openssh9-test\",\n  \"JOB_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/\",\n  \"KUBERNETES_PORT\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP_ADDR\": \"127.0.0.1\",\n  \"KUBERNETES_PORT_443_TCP_PORT\": \"443\",\n  \"KUBERNETES_PORT_443_TCP_PROTO\": \"tcp\",\n  \"KUBERNETES_SERVICE_HOST\": \"127.0.0.1\",\n  \"KUBERNETES_SERVICE_PORT\": \"443\",\n  \"KUBERNETES_SERVICE_PORT_HTTPS\": \"443\",\n  \"LANG\": \"C.UTF-8\",\n  \"NODE_LABELS\": \"built-in master\",\n  \"NODE_NAME\": \"built-in\",\n  \"PATH\": \"/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n  \"PWD\": \"/\",\n  \"REF\": \"/usr/share/jenkins/ref\",\n  \"RUN_ARTIFACTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=artifacts\",\n  \"RUN_CHANGES_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=changes\",\n  \"RUN_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect\",\n  \"RUN_TESTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=tests\",\n  \"SHLVL\": \"0\"\n}\n```\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.3199)",
    "rank_3_distance": 1.3199
  },
  {
    "step": "{'name': 'postProcess', 'raw_args': {'action': 'failure'}}",
    "rank_1_name": "jython-postbuild-plugin",
    "rank_1_content": "jython-postbuild-plugin\n=======================\n\nJython plugin for Jenkins similar to the groovy postbuild plugin but that allows you to write the code in python (using jython to access java classes and methods)\n\n\nIt's a blunt copy of the groovy postbuild plugin, without the security enhancements that it has actually (that requires changing also the secure script plugin, will do with time) \n (Distance: 1.2880)",
    "rank_1_distance": 1.288,
    "rank_2_name": "![PostBuildScript](pbs-logo.svg)",
    "rank_2_content": "![PostBuildScript](pbs-logo.svg)\n\n# PostBuildScript Jenkins plugin\n\n[![Build Status](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/badge/icon)](https://ci.jenkins.io/job/Plugins/job/postbuildscript-plugin/job/main/)\n[![Jenkins Plugins](https://img.shields.io/jenkins/plugin/v/postbuildscript.svg)](http://updates.jenkins-ci.org/download/plugins/postbuildscript)\n[![GitHub contributors](https://img.shields.io/github/contributors/jenkinsci/postbuildscript-plugin.svg)]()\n\nThe PostBuildScript plugin allows you to run the following actions after a build:\n\n* Batch or shell scripts\n* Groovy scripts\n* Build steps\n\nYou can configure these actions depending on the build status (i.e., only run when build is successful). \nScripts can also be executed on the master, on slaves or both. On matrix projects, the build can be executed on\neach axis.\n\n![User Interface](screenshot.png)\n\nPlease refer to the [plugin description](https://plugins.jenkins.io/postbuildscript) for further\ninformation.\n\n## Downloads\n\nYou'll find the latest HPI files of the plugin here:\n\nhttp://updates.jenkins-ci.org/download/plugins/postbuildscript\n\nJust put a HPI file into your plugins subdirectory of your Jenkins installation root, e.g. /var/lib/jenkins. Restart\nJenkins afterwards.\n\n## Issue Tracking\n\nPlease use the\n[official Jenkins Jira project and issue tracking software](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin)\nto report new bugs or request features.\n\nPlease first look through [Jira](https://issues.jenkins-ci.org/issues/?jql=component%20%3D%20postbuildscript-plugin). If a ticket\nalready exists, please add a comment and try to explain the issue a little more further. If no ticket exists, please open a new one.\n\nIn general please _provide example configurations_ (config.xml, Job DSL scripts, ...) and also screenshots are very helpful to reproduce\nproblems.\n\nPlease try to be constructive. If you have a feedback, it's better to write me a direct message. \n\n## Pull Requests\n\nFor bug fixes and enhancements to existing features, first make sure an issue is filed by checking [this Jira filter](https://issues.jenkins-ci.org/issues/?jql=status%20not%20in%20(Resolved%2C%20Closed%2C%20Done)%20AND%20component%20%3D%20postbuildscript-plugin)\n\nAfter that please create a pull request on GitHub with your change and link to the JIRA issue in the PR, and link to\nthe PR from the JIRA issue.\n\n## Release Notes\n\n### Version 3.4.1\n\n* [Allows to cancel the job without build failure](https://github.com/jenkinsci/postbuildscript-plugin/pull/219)\n\n### Version 3.4.0\n\n* Upgraded to Jenkins Plugin POM 5.1\n* Upgraded to Jenkins 2.462.3\n* Reformatted source code with Spotless\n\n### Version 3.3.0\n\n* Upgraded to Jenkins 2.452\n* Upgraded to JUnit 5\n\n### Version 3.2.0\n\nDependencies require Jenkins 2.359, so this will be the new base version for the PostBuildScript plugin.\n\n### Version 3.1.0\n\nUpdated Jenkins Plugin Parent to Version 4.32 to ensure, that no Log4j issues exist. Also updated Matrix Project dependency\nto 1.19, which requires at least Jenkins 2.282. Therefore switched to Jenkins version 2.289.\n\n### Version 3.0.0\n\nI removed several deprecated configuration parts in this version. They were deprecated long time ago on very old versions.\nOn https://stats.jenkins.io/plugin-installation-trend/postbuildscript.stats.json\nyou can see, that most installations use version 2.11.0 of this plugin now. Most versions silently upgrade to a newer configuration,\nso I recommend to first upgrade minor versions and save your job configurations. For most users there won't be a problem, but users of very old \nplugin versions < 2.8.0 should first upgrade to at least 2.8.0 and save their job configurations.\n\n*Users of the Jenkins Job DSL should use the dynamic DSL and not the old manual implementation of the PostBuildScript publisher.*\n\n* JENKINS-65797 Due to major changes in the job configuration, this plugin version is now based on Jenkins 2.277.1 and therefore requires\na new Jenkins version. I also cannot guarantee, that old job configurations will work. Please mind potential broken configurations when\nupgrading and make sure, that you backed up your files. I recommend you to check your build jobs carefully.\n* Updates Jenkins Plugin Parent\n* Fix problem with script file path determination using Windows\n\n### Version 2.11.0\n\n* JENKINS-63529 - Allows configuring, whether to stop a post build step if any of its steps fails. \n\n### Version 2.10.0\n\n* Upgrade to parent POM version 4. It will at least support Jenkins 2.200\n\n### Version 2.9.1\n\n* JENKINS-57545 - Java 11 support\n\n### Version 2.8.1\n\n* JENKINS-53446 - Allows saving post-build script steps without actual build steps\n\n### Version 2.8.0\n\n* JENKINS-53691 - Implemented mechanism to migrate old matrix project post-build actions\n\n### Version 2.7.0\n\n* JENKINS-50799 - Skips script when flagged to run when failing\n\n### Version 2.6.0\n\nRemoved access to workspace on master for Groovy script execution, because secure groovy scripts cannot be configured\non slaves when using a master-to-slave callable. Groovy scripts may not access files of the master's workspace as a\nresult. However Groovy scripts can be run on slaves again. Thanks to John David for reporting this issue.\n\n* JENKINS-49952 - Groovy post-build script in matrix job throws exception\n\n### Version 2.5.1\n\nIf the shebang contains a space in front of the interpreter, it will be stripped out.\n\n* JENKINS-49681 - Scripts always fail when run in build, but succeed from command line\n\n### Version 2.5.0\n\nThis version introduces the ability to run Groovy scripts in a sandbox when activated using the checkbox in the configuration view.\n\nNow you can also select for each script whether it should be executed on each axe or on the whole matrix.\n\n* JENKINS-48014 - Allow sandboxing for Groovy scripts\n* JENKINS-22489 - Add the ability to specify where each script executes instead of all of the scripts when\nadded to a matrix job.\n\n### Version 2.4.0\n\nThe old option to build only on success or on failure will now be migrated differently: If both is not selected, the\nbehavior of versions previous to 1.0.0 was to build it independent of the actual build result. Previous versions (after\n1.0.0) simply migrate that to do nothing. With version 2.4.0 every build result will be selected in such cases.\n\n* JENKINS-49423 - Upgrade from 0.17 incomplete when scriptOnlyIfSuccess and scriptOnlyIfFailure are both false\n\n### Version 2.3.0\n\n* JENKINS-48931 - PostBuildScript Execute Script Execute Shell Textbox Formatting Broken\n\n### Version 2.2.1\n\nRemoving deprecated fields from configuration\n\nUsing default values for results and roles on newly created script items.\n\n### Version 2.2.0\n\nUnified script file handling.\n\nThere are separate messages now, if a script is not run because the build result or the role does not fit.\n\n### Version 2.1.0\n\nDan Clayton added the BUILD_RESULT variable to allow handling script actions depending on the build result.\n\n### Version 2.0.0\n\nRefactored the way, how script files are differentiated. This ensures extensibility and helps removing redundant code.\n\nAlso removed null pointer exception that occurs on executing a postbuild groovy script on an agent.\n\n### Version 1.1.1\n\nFixed some bugs that came in with the release of a new major version. Sorry for the inconvenience.\n\n* JENKINS-48197 - Do not initialize fields already loaded from configuration\n* JENKINS-48177 - Even marking build as unstable when errors during script execution appear\n* JENKINS-48169 - Using better descriptions for role limitations \n\n### Version 1.1.0\n\nAttention: This is a major refactoring of the plugin. It hasn't been updated for years now. The configuration was changed,\nbut your existing configuration will be automatically migrated to the new format. I cannot reproduce every configuration, so\nplease open a bug ticket (and try to be kind, I'm doing this in my free time and don't want to harm anyone).\n\n* JENKINS-11285 - Ability to run postbuild script on a given node\n\n### Version 1.0.0\n* JENKINS-30011 - Allow multiple instances of Post Build Scripts as a post build action\n* Fix JENKINS-28825 - Confusing error message when leaving script path empty\n* Major refactoring, but still trying to be downwards compatible\n* Added help files and translations\n* JENKINS-24308 - Expost build variable, the AbstractBuild\n\n### Version 0.18\n* Fix JENKINS-43637 - Arbitrary code execution vulnerability:\nhttps://github.com/jenkinsci/postbuildscript-plugin/pull/15\n* Fix JENKINS-19873 - Batch or a shell script files to execute doesn't run with arguments\n\n### Version 0.17\n* Added an option to set the build to unstable instead of failed\n\n### Version 0.16\n* Fix JENKINS-16789 - Concurrent builds using postbuildscript plugin will wait for all the instances to finish\n\n### Version 0.15\n* Fix JENKINS-19954 - PostBuildScript runs for each matrix configuration rather than after they are all completed when\nset to MATRIX\n\n### Version 0.14\n* Fix JENKINS-19326 - Groovy script should execute with workspace dir as working directory.\n* Fix JENKINS-19072 - No Such Field: 'executeOnMatrixNodes'\n* Fix JENKINS-18936 - checkbox is not staying checked\n* Fix JENKINS-19033 - execution is always last, rather than where placed in the post-build actions list\n* Fix JENKINS-18530 - Postbuild script plugin not respecting order in Post-build Action\n\n### Version 0.13\n* Fix JENKINS-11219 - execution is always last, rather than where placed in the post-build actions list\n\n### Version 0.12\n* Let user configure script to be executed either on matrix head or axes nodes. Hidden for non-matrix projects\n\n### Version 0.11\n* Fix JENKINS-15395 - Add checkbox to run script when build fails (as well as when it passes)\n\n### Version 0.10\n* Fix JENKINS-14668 - failure to load without ivy plugin installed\n\n### Version 0.9\n* Merge pull request - Make dependency to Ivy plugin optional\n\n### Version 0.8\n* Fixed JENKINS-13418 - PostBuildScript plugin does not load its configuration properly\n* Change default value for condition to run scripts if the build is not on success.\n\n### Version 0.7\n* Fixed a bug where this plugin breaks Promoted Builds Plugin\n\n### Version 0.6\n* Added support of Ivy job type\n\n### Version 0.5\n* Built for 1.409 (LTS series)\n* Added an option to run this build scripts only on success (merge pull request)\n\n### Version 0.4\n* Fixed JENKINS-11219 - Add the option to run the script after all the sub elements of a matrix project build have\nfinished\n\n### Version 0.3\n* Added job build steps to post-build actions\n\n### Version 0.2\n* Fixed JENKINS-10889 - PostBuildScript plugin fails with Maven2 jobs\n\n### Version 0.1\n* Initial Version \n (Distance: 1.2902)",
    "rank_2_distance": 1.2902,
    "rank_3_name": "# Job Environment Variables Status Sync",
    "rank_3_content": "# Job Environment Variables Status Sync\n\n## Introduction\n\nThe plugin offers a seamless integration framework for developers across various platforms, enabling them to effortlessly monitor and engage with Jenkins pipelines. This plugin facilitates external systems to:\n+ \n+ **Retrieve Pipeline Task Execution Statuses**: It allows for a straightforward way to access and track the status of individual pipeline tasks, providing visibility into the progress and success of each step.\n+ **Access Pipeline Environment Variables**: Users can seamlessly access environment variables associated with pipeline runs. This feature is crucial for understanding the context and environment within which the pipeline is executing, facilitating more informed decision-making and dynamic configuration.\n+ **Send Custom Information During Pipeline Execution**: The plugin enables the transmission of custom information from external systems directly into the pipeline execution process. This allows for dynamic integration and customization, enhancing the flexibility and adaptability of CI/CD workflows.\n\nBy adopting this plugin, platform developers can significantly enhance their continuous integration and continuous deployment (CI/CD) processes, all with minimal configuration overhead. All that's required is to specify the request URL and pertinent details within the Jenkins system settings, and the plugin seamlessly manages the communication bridge between Jenkins and external platforms, streamlining integration and collaboration.\n\n## Getting started\n### System Config\n![System Config](docs/img2.png \"System Config\")\n\nTo begin using the plugin and integrating your external system with Jenkins pipelines, follow these steps:\n\n1. **Navigate to Jenkins System Configuration**\n   Go to **Manage Jenkins** > **Configure System**.\n   Scroll down to the section for **Job Status Notification Config**.\n2. **Configure the Request Information**\n   You'll need to provide the following details:\n\n+ Request URL:\n  + Enter the endpoint where the plugin should send pipeline execution data. This could be a REST API or another system endpoint designed to receive updates from Jenkins pipelines. \n  + Example: http://api.example.com/pipeline/status\n+ Request Method:\n\n  + Select the HTTP method that the plugin will use to communicate with your external system.\n  + Available options:\n      + GET ‚Äì Retrieve data.\n      + POST ‚Äì Send data to the external system (most common).\n      + PUT ‚Äì Update existing data on the external system.\n      + DELETE ‚Äì Remove data on the external system.\n  + Choose the method that best suits your API or integration requirement.\n+ Headers (Optional):\n\n    + If the external system requires specific headers for authentication (e.g., API tokens) or other metadata, add the required headers here.\n    + To add a header:\n        + Enter the Header Key (e.g., Authorization).\n        + Enter the Header Value (e.g., Bearer YOUR_API_TOKEN).\n3. **Save the Configuration**\n   After filling out the request URL, method, and headers, click Save at the bottom of the page.\n4. **Plugin in Action**\n   During the execution of a Jenkins pipeline, the plugin will automatically send real-time status updates and environment variables to the configured endpoint.\n   The system will use the provided HTTP method and include the specified headers in each request.\n### Sending Notifications\n   ![Notify Config](docs/img_1.png \"Notify\")\n   To send notifications during pipeline execution, simply include the required information in the body of the request. The plugin will handle the rest and send the data to the configured endpoint.\n\n+ **Body Content**: The information you want to send, such as pipeline status, task details, or custom data.\n+ The request will automatically use the configured **URL**, **method**, and **headers**.\nNo complex setup required‚Äîjust add your information to the body and the plugin will send it as part of the notification!\n\n### Sample request\n\n**The pipeline starts to execute** POST request\nThe fields of **buildNo** , **jobExecuteStatus** and **body** are added by the plugin, and the others are environment variables, and build with parameter will also be in the environment variables\n**jobExecuteStatus** has the following parameters:\n  + START\n  + RUNNING\n  + COMPLETE\n  + SUCCESS\n  + UNSTABLE\n  + FAILURE\n  + NOT_BUILT\n  + ABORTED\n```json\n{\n  \"buildNo\": \"3\",\n  \"jobExecuteStatus\": \"RUNNING\",\n  \"body\":\"ssh executed !\",\n  \"BUILD_DISPLAY_NAME\": \"#3\",\n  \"BUILD_ID\": \"3\",\n  \"BUILD_NUMBER\": \"3\",\n  \"BUILD_TAG\": \"jenkins-test-folder-openssh9-test-3\",\n  \"BUILD_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/\",\n  \"CI\": \"true\",\n  \"CLASSPATH\": \"\",\n  \"COPY_REFERENCE_FILE_LOG\": \"/var/jenkins_home/copy_reference_file.log\",\n  \"DSO_URL_PATH\": \"http://api.example.com:32553/\",\n  \"EXECUTOR_NUMBER\": \"-1\",\n  \"HOME\": \"/root\",\n  \"HOSTNAME\": \"jenkins-service-5ccc5794f4-8cjr4\",\n  \"HUDSON_HOME\": \"/var/jenkins_home\",\n  \"HUDSON_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"HUDSON_URL\": \"http://api.example.com:39931/\",\n  \"JAVA_HOME\": \"/opt/java/openjdk\",\n  \"JENKINS_HOME\": \"/var/jenkins_home\",\n  \"JENKINS_INCREMENTALS_REPO_MIRROR\": \"https://repo.jenkins-ci.org/incrementals\",\n  \"JENKINS_PORT\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVER_COOKIE\": \"c5e3ffff68935f12\",\n  \"JENKINS_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP\": \"tcp://127.0.0.1:50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PORT\": \"50000\",\n  \"JENKINS_SERVICE_NODE_PORT_50000_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP\": \"tcp://127.0.0.1:8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_ADDR\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_PORT_8080_TCP_PROTO\": \"tcp\",\n  \"JENKINS_SERVICE_NODE_SERVICE_HOST\": \"127.0.0.1\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT\": \"8080\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_50000\": \"50000\",\n  \"JENKINS_SERVICE_NODE_SERVICE_PORT_JENKINS_SERVICE_NODE_8080\": \"8080\",\n  \"JENKINS_SERVICE_PORT\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_50000\": \"50000\",\n  \"JENKINS_SERVICE_PORT_JENKINS_8080\": \"8080\",\n  \"JENKINS_SLAVE_AGENT_PORT\": \"50000\",\n  \"JENKINS_UC\": \"https://updates.jenkins.io\",\n  \"JENKINS_UC_EXPERIMENTAL\": \"https://updates.jenkins.io/experimental\",\n  \"JENKINS_URL\": \"http://api.example.com:39931/\",\n  \"JENKINS_VERSION\": \"2.469\",\n  \"JOB_BASE_NAME\": \"openssh9-test\",\n  \"JOB_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/display/redirect\",\n  \"JOB_EXECUTE_STATUS\": \"RUNNING\",\n  \"JOB_NAME\": \"test-folder/openssh9-test\",\n  \"JOB_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/\",\n  \"KUBERNETES_PORT\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP\": \"tcp://127.0.0.1:443\",\n  \"KUBERNETES_PORT_443_TCP_ADDR\": \"127.0.0.1\",\n  \"KUBERNETES_PORT_443_TCP_PORT\": \"443\",\n  \"KUBERNETES_PORT_443_TCP_PROTO\": \"tcp\",\n  \"KUBERNETES_SERVICE_HOST\": \"127.0.0.1\",\n  \"KUBERNETES_SERVICE_PORT\": \"443\",\n  \"KUBERNETES_SERVICE_PORT_HTTPS\": \"443\",\n  \"LANG\": \"C.UTF-8\",\n  \"NODE_LABELS\": \"built-in master\",\n  \"NODE_NAME\": \"built-in\",\n  \"PATH\": \"/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n  \"PWD\": \"/\",\n  \"REF\": \"/usr/share/jenkins/ref\",\n  \"RUN_ARTIFACTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=artifacts\",\n  \"RUN_CHANGES_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=changes\",\n  \"RUN_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect\",\n  \"RUN_TESTS_DISPLAY_URL\": \"http://api.example.com:39931/job/test-folder/job/openssh9-test/3/display/redirect?page=tests\",\n  \"SHLVL\": \"0\"\n}\n```\n\n## LICENSE\n\nLicensed under MIT, see [LICENSE](LICENSE.md) \n (Distance: 1.3199)",
    "rank_3_distance": 1.3199
  },
  {
    "step": "{'name': 'init', 'raw_args': {'action': 'gradle'}}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.3478)",
    "rank_1_distance": 1.3478,
    "rank_2_name": "Inedo ProGet Plugin",
    "rank_2_content": "Inedo ProGet Plugin\n========================\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/inedo-proget.svg)](https://plugins.jenkins.io/inedo-proget)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/inedo-proget-plugin.svg?label=changelog)](https://github.com/jenkinsci/inedo-proget-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/inedo-proget.svg?color=blue)](https://plugins.jenkins.io/inedo-proget)\n\n## About this plugin\nThis plugin integrates [Inedo ProGet](http://inedo.com/proget) with Jenkins allowing Jenkins jobs to create and upload, or download and extract, universal packages.\n\n## Usage\nThe plugin requires a minimum ProGet version of 4.0.12 or higher to work correctly.\n\n### Installing and configuring the plugin\n\nThis plugin can be installed from any Jenkins installation connected to the Internet using the **Plugin Manager** screen.\n\nTo configure the plugin:\n\n**First** you need to ensure that an api key as been configured in ProGet at ProGet > Administration > API Keys & Access Logs \nWithout this the plugin will still work to a certain point but will have reduced functionality in the job configuration - i.e. you will need to fill in certain details rather than select values from a drop down list, of feeds, groups and packages.\n\n![ProGet API Key](/docs/images/proget_api_key.png)\n\n**Next**, you need to go to Jenkins' system config screen to tell Jenkins where's your ProGet installation resides and the username and password of a user with permission to upload files to ProGet.\n\n![ProGet Configuration](/docs/images/proget_configuration.png)\n\n**Finally**, you need to add either an \"ProGet Upload Package\" or \"ProGet Download Package\" build step to your Jenkins job.\n\n#### Upload Package\nIn it basic form, this simply require specifying the files in your work space that you'd like to package, supplying some metadata that that describes the package and the job is done.\nPlease consult the help text in the plugin configuration screen for more information on each setting.\n\n![ProGet Upload](/docs/images/proget_upload.png)\n\nThere are some more advanced options that allow you to tweak the files that will be included in the package and the supply additional metadata.\n\n![ProGet Upload Advanced](/docs/images/proget_download.png)\n\n#### Download Package\nDownloads a universal ProGet package in the requested format (package, zip, or tgz) to specified folder and will optionally unpack it for you.\nThe environment variable PROGET_FILE will be populated with the name of the downloaded file\nPlease consult the help text in the plugin configuration screen for more information on each setting.\n\n![ProGet Download](/docs/images/proget_download.png)\n\n\n#### Pipeline Script\nScript can be generated using the pipeline syntax snippet generator.\n\n*Scripted Pipeline Example*\n````\nnode {\n    bat '''\n        DEL *.TXT /Q\n        DEL *.upack /Q\n        ECHO Build Tag: %BUILD_TAG% > Example.txt\n    '''\n    uploadProgetPackage artifacts: 'Example.txt', feedName: 'Example', groupName: 'jenkins/pipleline', packageName: 'JenkinsPackage', version: \"1.0.${BUILD_NUMBER}\"\n    downloadProgetPackage downloadFolder: \"${WORKSPACE}\", downloadFormat: 'pkg', feedName: 'Example', groupName: 'jenkins/pipleline', packageName: 'JenkinsPackage', version: \"1.0.${BUILD_NUMBER}\"\n}\n````\n\n*Declarative Pipeline Example*\n````\npipeline {\n  agent any\n \n  stages {\n    stage('Main') {\n      steps {\n        bat '''\n            DEL *.TXT /Q\n            DEL *.upack /Q\n            ECHO Build Tag: %BUILD_TAG% > Example.txt\n        '''\n        uploadProgetPackage artifacts: 'Example.txt', feedName: 'Example', groupName: 'jenkins/pipleline', packageName: 'JenkinsPackage', version: \"1.0.${BUILD_NUMBER}\"\n        downloadProgetPackage downloadFolder: \"${WORKSPACE}\", downloadFormat: 'pkg', feedName: 'Example', groupName: 'jenkins/pipleline', packageName: 'JenkinsPackage', version: \"1.0.${BUILD_NUMBER}\"\n      }\n    }\n  }\n}\n````\n\n## Reporting an Issue\nSelect Create Issue on the [JIRA home page](https://issues.jenkins-ci.org/secure/Dashboard.jspa) and ensure that the component is set to inedo-proget-plugin.\n\nFor more information see the Jenkins guide on [how to report an issue](https://wiki.jenkins.io/display/JENKINS/How+to+report+an+issue).\n\n## More information\n\n* [Changelog](https://github.com/jenkinsci/inedo-proget-plugin/releases)\n* [Developer documentation](./docs/DEVELOPER.md) \n (Distance: 1.3509)",
    "rank_2_distance": 1.3509,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4554)",
    "rank_3_distance": 1.4554
  },
  {
    "step": "{'name': 'slackStatus', 'raw_args': {'status': 'passed'}}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.5139)",
    "rank_1_distance": 1.5139,
    "rank_2_name": "jswidgets-plugin",
    "rank_2_content": "jswidgets-plugin\n================\n\nJenkins jswidgets plugin\n\n[![Build Status](https://huschteguzzel.de/hudson/job/jenkinsci-jswidgets-plugin/badge/icon)](https://huschteguzzel.de/hudson/job/jenkinsci-jswidgets-plugin/) \n (Distance: 1.5176)",
    "rank_2_distance": 1.5176,
    "rank_3_name": "= Throttle Concurrent Builds Plugin",
    "rank_3_content": "= Throttle Concurrent Builds Plugin\n:toc:\n:toc-placement!:\n:toc-title:\nifdef::env-github[]\n:tip-caption: :bulb:\n:note-caption: :information_source:\n:important-caption: :heavy_exclamation_mark:\n:caution-caption: :fire:\n:warning-caption: :warning:\nendif::[]\n\nhttps://ci.jenkins.io/job/Plugins/job/throttle-concurrent-builds-plugin/job/master/[image:https://ci.jenkins.io/job/Plugins/job/throttle-concurrent-builds-plugin/job/master/badge/icon[Build Status]]\nhttps://github.com/jenkinsci/throttle-concurrent-builds-plugin/graphs/contributors[image:https://img.shields.io/github/contributors/jenkinsci/throttle-concurrent-builds-plugin.svg[Contributors]]\nhttps://plugins.jenkins.io/throttle-concurrents[image:https://img.shields.io/jenkins/plugin/v/throttle-concurrents.svg[Jenkins Plugin]]\nhttps://github.com/jenkinsci/throttle-concurrent-builds-plugin/releases/latest[image:https://img.shields.io/github/release/jenkinsci/throttle-concurrent-builds-plugin.svg?label=changelog[GitHub release]]\nhttps://plugins.jenkins.io/throttle-concurrents[image:https://img.shields.io/jenkins/plugin/i/throttle-concurrents.svg?color=blue[Jenkins Plugin Installs]]\n\ntoc::[]\n\n== Introduction\n\nThis plugin allows for throttling the number of concurrent builds of a project running per node or globally.\n\n== Getting started\n\nThis plugin supports three modes:\n\n* Throttling of runs by one or multiple category\n* Throttling of multiple runs of the same `AbstractProject` job (not recommended)\n* Throttling of runs by parameter values\n\nFor each mode it is possible to setup global, label-specific, and node-specific limits for concurrent runs.\nIf multiple throttling categories are defined, each requirement needs to be satisfied in order for the task to be taken off the queue.\n\nUsage specifics:\n\n* If the throttling category cannot be satisfied, the task submission stays in the queue until the locked category becomes available.\n* The submission can be terminated manually or by timeout.\n* This plugin throttles tasks only on common executors. Flyweight tasks are not throttled.\n* If the jobs are organized into a chain (e.g., via Parameterized Trigger build steps), each run in the chain is counted independently. For example, if _ProjectA_ and _ProjectB_ use category `cat_A` on the same node, two executors are required from the category pool. Improper configuration of categories/jobs may result in a deadlock of such build chains due to consumption of all executors and waiting for downstream executions blocked in the queue.\n\n=== Global configuration\n\nGlobal configuration allows defining global categories.\nFor each category you can set up global, label-specific, and node-specific restrictions for executor numbers.\nAfter configuration, it is possible to select and use the categories in job configurations.\nFor example:\n\nimage:doc/images/global_categoryConfig.png[Global Category Configuration]\n\nTo set an unlimited value of concurrent builds for a restriction, use 0.\n\nAlso global configuration could be configured via https://plugins.jenkins.io/configuration-as-code/[Jenkins Configuration as Code] (JCasC) as following:\n[source,yaml]\n----\nunclassified:\n  throttleJobProperty:\n    categories:\n    - categoryName: \"myThrottleCategory\"\n      maxConcurrentTotal: 5\n      maxConcurrentPerNode: 2\n      nodeLabeledPairs:\n      - throttledNodeLabel: \"docker\"\n        maxConcurrentPerNodeLabeled: 1\n----\n\n=== Throttling of classic job types\n\nClassic job types (e.g., Freestyle, Matrix, and Job DSL) can be configured via job properties in the job configuration screen.\nFor example:\n\nimage:doc/images/abstractProject_jobProperty.png[Throttle Job Property]\n\nThere are two modes: _Throttle this project alone_ and _Throttle this project as part of one or more categories_.\nOnly one mode can be enabled.\n\nThrottle this project alone::\n* For this option you should configure _Maximum Total Concurrent Builds_ and/or _Maximum Concurrent Builds Per Node_.\n* To set an unlimited value of concurrent builds for a restriction, use 0.\n* With this option categories are ignored.\nThrottle this project as part of one or more categories::\n* For this option you should specify enabled categories using checkboxes.\n* With this option the _Maximum Total Concurrent Builds_ and _Maximum Concurrent Builds Per Node_ fields are ignored.\nPrevent multiple jobs with identical parameters from running concurrently::\n* This option adds additional throttling by parameter values.\n\nFor Matrix projects the property offers two additional checkboxes, which define throttling behavior for Matrix master runs and configuration runs.\nFor example:\n\nimage:doc/images/abstractProject_matrixFlags.png[Throttle Job Property for Matrix]\n\n=== Throttling of Pipeline jobs\n\n==== `throttle()` step\n\nStarting in `throttle-concurrents-2.0`, this plugin allows throttling of particular Pipeline blocks by categories.\nFor this purpose you can use the `throttle()` step.\n\nHow does it work?\n\n* If a `throttle()` step is used, all explicit and implicit `node()` invocations within this step are throttled.\n* If a `node()` step is used within a `parallel()` block, each parallel branch is throttled separately.\n* Throttling of Pipeline steps in `throttle()` takes precedence over other throttling logic, such as job properties in Pipeline and other job types.\n* If the specified category is missing, `throttle()` execution fails the run.\n\n==== Warning regarding restarting the Jenkins controller\n\nWARNING: Due to a deadlock (as described in https://issues.jenkins.io/browse/JENKINS-44747[JENKINS-44747]), a change has been made which can theoretically result in throttle categories being ignored in running Pipelines immediately after the Jenkins controller has been restarted.\nThis will be investigated further in https://issues.jenkins.io/browse/JENKINS-44756[JENKINS-44756] but was considered necessary in order to resolve the deadlock scenario.\n\n== Examples\n\n=== Example 1: Throttling of `node()` runs\n\n[source,groovy]\n----\n// Throttle a single operation\nthrottle(['test_2']) {\n    node() {\n        sh \"sleep 500\"\n        echo \"Done\"\n    }\n}\n----\n\n=== Example 2: Throttling of parallel steps\n\n[source,groovy]\n----\n// The script below triggers 6 subtasks in parallel.\n// Then tasks are throttled according to the category settings.\ndef labels = ['1', '2', '3', '4', '5', '6']\ndef builders = [:]\nfor (x in labels) {\n    def label = x // Need to bind the label variable before the closure\n\n    // Create a map to pass in to the 'parallel' step so we can fire all the builds at once\n    builders[label] = {\n      node('linux') {\n        sh \"sleep 5\"\n      }\n    }\n}\n\nthrottle(['myThrottleCategory1', 'myThrottleCategory2']) {\n  parallel builders\n}\n----\n\n=== Example 3: Throttling of declarative pipelines\n\nTo throttle concurrent builds to 1, configure a global category and add an options property to the pipeline.\n\nimage:doc/images/global_categoryConfig3.png[Global Category Configuration Test3]\n\n[source,groovy]\n----\npipeline {\n    agent any\n\n    // Throttle a declarative pipeline via options\n    options {\n      throttleJobProperty(\n          categories: ['test_3'],\n          throttleEnabled: true,\n          throttleOption: 'category'\n      )\n    }\n\n    stages {\n        stage('sleep') {\n            steps {\n                sh \"sleep 500\"\n                echo \"Done\"\n            }\n        }\n    }\n}\n----\n\n=== Example 4: Throttling of declarative stages\n\nIt is possible to throttle a stage of a declarative pipeline if the stage assigns an agent. The throttle step should be placed in the options block of the stage.\n\n[source,groovy]\n----\npipeline {\n    agent none\n\n    stages {\n        stage('sleep') {\n            agent any\n            options {\n                throttle(['test_4'])\n            }\n            steps {\n                sh \"sleep 500\"\n                echo \"Done\"\n            }\n        }\n    }\n}\n----\n\n== Unsupported use cases\n\nThis section contains links to the use cases which are *not* supported.\n\n=== Throttling of code blocks without a `node()` definition\n\nA feature request is logged as https://issues.jenkins.io/browse/JENKINS-44411[JENKINS-44411].\n\n=== Throttling Pipeline via job properties\n\nWARNING: Starting in `throttle-concurrents-2.0`, using this option is not recommended.\nUse the `throttle()` step instead.\n\nStarting in `throttle-concurrents-1.8.5`, this plugin supports the definition of throttling settings via job properties.\nThe behavior of such definition *may differ* from your expectation and *may change* in new plugin versions.\n\nCurrent behavior:\n\n* If the property is defined, Pipeline jobs are throttled as any other project.\n* Pipeline jobs are throttled on the top level as a single instance. They are considered a single job even if there are declarations like `parallel()`.\n* Node requirements are considered for the root Pipeline task only, so effectively only the master node is checked.\n\nUse this option at your own risk.\n\n== License\n\nLicensed under link:LICENSE[the MIT License].\n\n== Changelog\n\n* xref:CHANGELOG.adoc[Changelog]\n\n== Issues\n\nReport issues and enhancements in the https://issues.jenkins.io/[Jenkins issue tracker].\nUse the `throttle-concurrent-builds-plugin` component in the `JENKINS` project.\n\n== Contributing\n\nRefer to our https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md[contribution guidelines]. \n (Distance: 1.5270)",
    "rank_3_distance": 1.527
  },
  {
    "step": "{'name': 'dockerUtils', 'raw_args': {'action': 'createPushImage'}}",
    "rank_1_name": "# Docker Commons API Plugin for Jenkins",
    "rank_1_content": "# Docker Commons API Plugin for Jenkins\n\n[![Join the chat at https://gitter.im/jenkinsci/docker](https://badges.gitter.im/jenkinsci/docker.svg)](https://gitter.im/jenkinsci/docker?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAPI plugin, which provides the common shared functionality for various Docker-related plugins.\n\n## Summary\n\n* API for managing Docker image and container fingerprints\n* Credentials and location of Docker Registry\n* Credentials and location of Docker Daemon (aka Docker Remote API)\n* <code>ToolInstallation</code> for Docker CLI clients\n* <code>DockerImageExtractor</code> extension point to get Docker image relations from jobs\n* Simple UI referring related image fingerprints in Docker builds\n* etc.\n\n## Use-cases\n\n### Credentials and locations\n\nThis allows users to configure one set of endpoint/credentials and use it across all the Docker related plugins, \nthereby keeping configuration more [DRY](http://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\nSee¬†[Docker Pipeline Plugin](https://plugins.jenkins.io/docker-workflow) for the typical usage.\n\n## Declarative pipeline example\n\nAn example on how to bind Docker host/daemon credentials in a declarative pipeline: \n\n```groovy\npipeline {\n  agent any\n  tools {\n    // a bit ugly because there is no `@Symbol` annotation for the DockerTool\n    // see the discussion about this in PR 77 and PR 52: \n    // https://github.com/jenkinsci/docker-commons-plugin/pull/77#discussion_r280910822\n    // https://github.com/jenkinsci/docker-commons-plugin/pull/52\n    'org.jenkinsci.plugins.docker.commons.tools.DockerTool' '18.09'\n  }\n  environment {\n    DOCKER_CERT_PATH = credentials('id-for-a-docker-cred')\n  }\n  stages {\n    stage('foo') {\n      steps {\n        sh \"docker version\" // DOCKER_CERT_PATH is automatically picked up by the Docker client\n      }\n    }\n  }\n}\n```\n\n## License\n\n[MIT License](http://opensource.org/licenses/MIT)\n\n## Changelog\n\n* See [GitHub Releases](https://github.com/jenkinsci/docker-commons-plugin/releases/latest) for the recent versions\n* See [the release notes archive](https://github.com/jenkinsci/docker-commons-plugin/blob/2e09f1fe61389ef9a967a2bd362bc9d141807c86/CHANGELOG.md) for version `1.15` and older \n (Distance: 0.9102)",
    "rank_1_distance": 0.9102,
    "rank_2_name": "Docker Pipeline Plugin",
    "rank_2_content": "Docker Pipeline Plugin\n=====================================\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/docker-workflow.svg)](https://plugins.jenkins.io/docker-workflow)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/docker-workflow-plugin.svg?label=changelog)](https://github.com/jenkinsci/docker-workflow-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/docker-workflow.svg?color=blue)](https://plugins.jenkins.io/docker-workflow)\n\nJenkins plugin which allows building, testing, and using Docker images from Jenkins Pipeline projects.\n\nSummary\n---\n\nA full description is available in the plugin‚Äôs [documentation](https://go.cloudbees.com/docs/plugins/docker-workflow/).\n\nDemo\n---\nThe plugin has an outdated Docker-based demo. See the [demo README from v1.12](https://github.com/jenkinsci/docker-workflow-plugin/tree/docker-workflow-1.12/demo) for setup and launch guidelines.\n\nLicense\n---\n[MIT License](http://opensource.org/licenses/MIT)\n\nChangelog\n---\n\n* For new versions, see [GitHub Releases](https://github.com/jenkinsci/docker-workflow-plugin/releases)\n* For versions 1.19 and older, see the [plugin's Wiki page](https://wiki.jenkins.io/display/JENKINS/Docker+Pipeline+Plugin) \n (Distance: 0.9940)",
    "rank_2_distance": 0.994,
    "rank_3_name": "# Overview",
    "rank_3_content": "# Overview\n\nA Docker test fixture system available for use from any JUnit tests,\nespecially using `JenkinsRule` in the [Jenkins functional test harness](https://github.com/jenkinsci/jenkins-test-harness/blob/master/README.md).\n\nThe use case is for tests which need to connect to some kind of self-contained (Linux) service\nwhich cannot be easily hosted on the test machine itself.\nTypical examples would include Jenkins agents with specific software packages preloaded,\nor SCM servers which it would be hard to launch portably from any environment.\n\nAnother reason to run some things inside Docker is to simply simulate cases where code runs remotely,\nwith different filesystem paths, user accounts, etc.\n\nNote that the typical architecture is that of a single machine with a local Docker daemon.\nTests are assumed to be running on the host itself;\ni.e., this is unlike a multicontainer test system you might orchestrate with Docker Compose.\n\nProbably this library should be deprecated in favor of [testcontainers.org](https://www.testcontainers.org/).\n\n# Usage\n\n## Defining a fixture\n\nEach fixture is defined in terms of a `DockerContainer` subtype with a `@DockerFixture` annotation.\nThis type typically exposes various methods needed to interact with the running fixture.\n\nA fixture also needs to define a `Dockerfile` in the resources directory.\nIf a fixture class is `org/acme/FooContainer.java`,\nthen by default the definition must be located at `org/acme/FooContainer/Dockerfile`.\n(In the case of inner classes, dollar sign (`$`) is replaced with a slash (`/`).)\nThe same directory may contain other files `ADD`ed to or `COPY`d into the image, as usual with `docker build`.\n\n### Subclassing another fixture\n\nIf your fixture extends another one rather than `DockerContainer` directly,\nyou can inherit behaviors while adding new ones.\nIn this case the `FROM` directive of your `Dockerfile` should specify the image of the parent,\nas detailed in the Javadoc for `DockerFixture`.\n\n## Running a fixture\n\nSimply add to your (JUnit 4) test:\n\n```java\n@ClassRule\npublic static DockerClassRule<MyContainer> docker = new DockerClassRule<>(MyContainer.class);\n```\n\nIf and when you wish to start using the fixture from a test case, call the `create()` method.\nThis will launch the container and give you a handle you can use to call fixture methods.\n\nIf the test is run on a system which cannot run the `docker` command,\nthe test will be treated as skipped automatically.\n\nWhen the test case finishes, the container is stopped and cleaned up automatically.\n\n## Accessing ports\n\nWhen you specify `ports` in the annotation, you allow services in the fixture to be accessed from the test.\nAlways use the `ipBound` and `port` methods on each container to determine where to make the actual connection.\n\n## Custom networks\nIf you want your docker containers to connect to a custom network you can set the environment variable `DOCKER_FIXTURES_NETWORK` to the name of the network you want to use.\n\n## Example\n\nSee the `mercurial-plugin` sources for a complete example of defining and using a fixture, including inheritance:\n* `src/test/java/hudson/plugins/mercurial/MercurialContainer.java` declares the fixture, along with some helper nethods\n* `src/test/resources/hudson/plugins/mercurial/MercurialContainer/Dockerfile` defines the fixture‚Äôs contents\n* `src/test/java/hudson/plugins/mercurial/MercurialContainerTest.java` demonstrates its usage\n\n# Changelog\n\nSee [GitHub Releases](https://github.com/jenkinsci/docker-fixtures/releases).\n(For 1.8 and earlier, see the [old changelog](old-changelog.md). \n (Distance: 1.0130)",
    "rank_3_distance": 1.013
  },
  {
    "step": "{'name': 'githubDeploy', 'raw_args': {'action': 'create'}}",
    "rank_1_name": "moved to github",
    "rank_1_content": "moved to github \n (Distance: 0.5379)",
    "rank_1_distance": 0.5379,
    "rank_2_name": "Moved to Github.",
    "rank_2_content": "Moved to Github. \n (Distance: 0.6584)",
    "rank_2_distance": 0.6584,
    "rank_3_name": "#Please open PR's against [this repo](https://github.com/groupon/DotCi), instead of here.",
    "rank_3_content": "#Please open PR's against [this repo](https://github.com/groupon/DotCi), instead of here.\n\n##DotCi - Jenkins github integration, .ci.yml.\n ![Commit status](docs/screenshots/logos/jenkins.png) **+** ![Commit status](docs/screenshots/logos/github.png) **+** ![Commit status](docs/screenshots/logos/docker.png)\n***\n - [Features](#features)\n - [Usage](docs/Usage.md)\n - [Setup](docs/Setup.md)\n - [Extending DotCi](docs/Extending.md)\n - [License](#license)\n\n###Features\n***\n * **Github Integration** (both github.com and GHE)\n    - Automatically sets up Github webhooks for pull requests and github pushes when a new job is setup.\n    - Sets [commit status](https://github.com/blog/1227-commit-status-api) during and after build run.\n      ![Commit status](docs/screenshots/commit-status.png)\n\n    - Projects are name-spaced under organization which allows creation of multiple projects with same names under different organizations.\n\n\n * **Build configuration through .ci.yml**  \n    * Speed up builds by running builds in parallel.\n    * Configure build environment (language/version/dbs etc).\n    * Branch/pusher specific build customization through groovy templating.\n    * Plugin configuration.\n    * Notification configuration.\n    * Skip Builds based on sha/branch/pusher/pull request etc.\n\n\n * **Docker Support**\n    * Having a Dockerfile in the repo will build an image and run tests against the image.\n    * Or specify a docker image to run build against in .ci.yml\n\n * **Defaults** for each language type (eg: ``mvn install`` for java), language is auto detected.\n\n * **Scaling Jenkins**.\n   * Backed by a mongodb database\n   * No need to purge builds to improve startup time/performance.\n   * Query build statistics by querying database.\n * **Build shortcuts for deploy/command line tools**\n   * Fetch builds by git sha (`job/meow/23/sha?value=<sha>`)\n   * Or branch specific permalinks (`lastSuccessfulMaster`) .\n\n * **Extensible**\n   * Add new types of notifications/plugins supported in .ci.yml by writing plugins for DotCi.\n\n * **UI enhancements**\n   * Organization View\n\n     ![Org](docs/screenshots/org-view.png)\n   * User builds view (This is the default view in our jenkins installation)\n\n     ![User Builds](docs/screenshots/user-view.png)\n   * Build history by branch\n\n     ![branch history](docs/screenshots/branch-view.png)\n\n ###Usage\n   See: [Usage](docs/Usage.md)\n###Setup\n   See:  [Setup](docs/Setup.md)\n###Extending DotCi\n See: [Extending DotCi](docs/Extending.md)\n###License\n\nThe MIT License (MIT)\n\nCopyright (c) 2014, Groupon, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. \n (Distance: 0.8815)",
    "rank_3_distance": 0.8815
  },
  {
    "step": "{'name': 'deployApp', 'raw_args': {'action': 'kubectlDeploy', 'cluster': 'dev-fss', 'placeholderFile': 'config-preprod.env'}}",
    "rank_1_name": "deploygate-plugin",
    "rank_1_content": "deploygate-plugin\n=================\n\ndeploygate-plugin \n (Distance: 1.0354)",
    "rank_1_distance": 1.0354,
    "rank_2_name": "A plugin skeleton generator",
    "rank_2_content": "A plugin skeleton generator\n===============\n\nThis webapp is a front-end for `mvn hpi:create` that creates a new plugin,\nbut it's less error prone and doesn't require fiddling `~/.m2/settings.xml`\n\nTo run app locally to test, `mvn jetty:run`.\n\nTo deploy this app into [production](http://plugin-generator.jenkins-ci.org/), `mvn bees:deploy`. This application\nruns on CloudBees RUN@cloud under the `jenkins` account \n (Distance: 1.0383)",
    "rank_2_distance": 1.0383,
    "rank_3_name": "# Notice:  ReleaseEngineer has been split into DeployHub OSS and DeployHub Pro",
    "rank_3_content": "# Notice:  ReleaseEngineer has been split into DeployHub OSS and DeployHub Pro\nDeployHub Pro is the renamed version of Release Engineer and is currently being maintained.\n\nDeployHub OSS is the Open Source version of Release Engineer and is an active Open Source Project.\n\n## DeployHub achieves Continuous Deploy.  \nDeployHub is the first open source Application Release Automation (ARA) solution designed to break down the 'wall' between development and data centers so your cool new features get to production at the speed of agile.  DeployHub unblocks the flow of code changes to production by eliminating the overhead of end target agents and the additional burden imposed on developers by traditional deployment approaches.  \n\n## DeployHub Installation\n### Stable 8.0\n```\ncurl -sL http://www.deployhub.org/downloads | sh;\n\n```\n\n### Latest\n```\ncurl -sL http://www.deployhub.org/downloads/latest.html | sh\n```\n## Slack Channel\ndeployhub.slack.com\n\n## Google Groups Email List\nhttps://groups.google.com/forum/#!forum/deployhub-project\n\n## Online Help\n\nhttps://www.deployhub.org/help/NetHelp/\n\n## Detailed Install\n\nhttps://www.deployhub.org/help/NetHelp/#!Documents/deployhubinstallationguideforlinux.htm\n\n## Support\n\nhttps://github.com/OpenMake-Software/DeployHub/issues\n\n## DeployHub and DeployHub Pro Features\n* Easy Installation - No End Point Agents \t\t\n* Easy to configure - graphical application packaging \t\t\n* Integrates with Infrastructure Configuration Management\t\t\n* Push or Pull deployments with version 'jumping'\t\t\n* Database Management Support\t\t\n* Pre-Built Reusable Deployment Actions and Workflows\t\t\n* Jenkins and Continuous Delivery Plugins\t\t\n* Multi-Platform (Linux, UNIX, Windows, z/OS, iSeries, Cisco Routers)\t\t\n* Rollback and Roll Forward Recovery\t\t\n* Environment Modeling and Management\t\t\n* Continuous Feedback Loop from Build to End Point\t\n\n## DeployHub Pro Only Features\n* Release Train Management (manage multiple applications)\t\t\n* Calendar with integrated pre-approvals and blocking\t\t\n* Role Based Security\t\t\n* Change Request Tracking\t\t\n* Continuous Feedback Loop from issue tracking to endpoint \t\t\n* Change Request Burn Down Charts\t\t\n* Component Sharing and Workflow Templates\n\nDeployHub Info: http://www.deployhub.org\n\nDeployHub Pro Info: https://www.openmakesoftware.com/deployhub-continuous-deployment/ \n (Distance: 1.0825)",
    "rank_3_distance": 1.0825
  },
  {
    "step": "{'name': 'deployApp', 'raw_args': {'action': 'kubectlDeploy', 'cluster': 'prod-fss', 'placeholderFile': 'config-prod.env'}}",
    "rank_1_name": "deploygate-plugin",
    "rank_1_content": "deploygate-plugin\n=================\n\ndeploygate-plugin \n (Distance: 1.0354)",
    "rank_1_distance": 1.0354,
    "rank_2_name": "A plugin skeleton generator",
    "rank_2_content": "A plugin skeleton generator\n===============\n\nThis webapp is a front-end for `mvn hpi:create` that creates a new plugin,\nbut it's less error prone and doesn't require fiddling `~/.m2/settings.xml`\n\nTo run app locally to test, `mvn jetty:run`.\n\nTo deploy this app into [production](http://plugin-generator.jenkins-ci.org/), `mvn bees:deploy`. This application\nruns on CloudBees RUN@cloud under the `jenkins` account \n (Distance: 1.0383)",
    "rank_2_distance": 1.0383,
    "rank_3_name": "# Notice:  ReleaseEngineer has been split into DeployHub OSS and DeployHub Pro",
    "rank_3_content": "# Notice:  ReleaseEngineer has been split into DeployHub OSS and DeployHub Pro\nDeployHub Pro is the renamed version of Release Engineer and is currently being maintained.\n\nDeployHub OSS is the Open Source version of Release Engineer and is an active Open Source Project.\n\n## DeployHub achieves Continuous Deploy.  \nDeployHub is the first open source Application Release Automation (ARA) solution designed to break down the 'wall' between development and data centers so your cool new features get to production at the speed of agile.  DeployHub unblocks the flow of code changes to production by eliminating the overhead of end target agents and the additional burden imposed on developers by traditional deployment approaches.  \n\n## DeployHub Installation\n### Stable 8.0\n```\ncurl -sL http://www.deployhub.org/downloads | sh;\n\n```\n\n### Latest\n```\ncurl -sL http://www.deployhub.org/downloads/latest.html | sh\n```\n## Slack Channel\ndeployhub.slack.com\n\n## Google Groups Email List\nhttps://groups.google.com/forum/#!forum/deployhub-project\n\n## Online Help\n\nhttps://www.deployhub.org/help/NetHelp/\n\n## Detailed Install\n\nhttps://www.deployhub.org/help/NetHelp/#!Documents/deployhubinstallationguideforlinux.htm\n\n## Support\n\nhttps://github.com/OpenMake-Software/DeployHub/issues\n\n## DeployHub and DeployHub Pro Features\n* Easy Installation - No End Point Agents \t\t\n* Easy to configure - graphical application packaging \t\t\n* Integrates with Infrastructure Configuration Management\t\t\n* Push or Pull deployments with version 'jumping'\t\t\n* Database Management Support\t\t\n* Pre-Built Reusable Deployment Actions and Workflows\t\t\n* Jenkins and Continuous Delivery Plugins\t\t\n* Multi-Platform (Linux, UNIX, Windows, z/OS, iSeries, Cisco Routers)\t\t\n* Rollback and Roll Forward Recovery\t\t\n* Environment Modeling and Management\t\t\n* Continuous Feedback Loop from Build to End Point\t\n\n## DeployHub Pro Only Features\n* Release Train Management (manage multiple applications)\t\t\n* Calendar with integrated pre-approvals and blocking\t\t\n* Role Based Security\t\t\n* Change Request Tracking\t\t\n* Continuous Feedback Loop from issue tracking to endpoint \t\t\n* Change Request Burn Down Charts\t\t\n* Component Sharing and Workflow Templates\n\nDeployHub Info: http://www.deployhub.org\n\nDeployHub Pro Info: https://www.openmakesoftware.com/deployhub-continuous-deployment/ \n (Distance: 1.0825)",
    "rank_3_distance": 1.0825
  },
  {
    "step": "{'name': 'githubStatus', 'raw_args': {'action': 'tagRelease'}}",
    "rank_1_name": "moved to github",
    "rank_1_content": "moved to github \n (Distance: 0.6134)",
    "rank_1_distance": 0.6134,
    "rank_2_name": "Moved to Github.",
    "rank_2_content": "Moved to Github. \n (Distance: 0.6576)",
    "rank_2_distance": 0.6576,
    "rank_3_name": "# Github Plugin",
    "rank_3_content": "# Github Plugin\n\n[![codecov](https://codecov.io/gh/jenkinsci/github-plugin/branch/master/graph/badge.svg)](https://codecov.io/gh/jenkinsci/github-plugin)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nThis plugin integrates Jenkins with [Github](http://github.com/)\nprojects.The plugin currently has three major functionalities:\n\n-   Create hyperlinks between your Jenkins projects and GitHub\n-   Trigger a job when you push to the repository by groking HTTP POSTs\n    from post-receive hook and optionally auto-managing the hook setup.\n-   Report build status result back to github as [Commit\n    Status](https://github.com/blog/1227-commit-status-api) ([documented\n    on\n    SO](https://stackoverflow.com/questions/14274293/show-current-state-of-jenkins-build-on-github-repo/26910986#26910986))\n-   Base features for other plugins\n\n## Hyperlinks between changes\n\nThe Github plugin decorates Jenkins \"Changes\" pages to create links to\nyour Github commit and issue pages. It adds a sidebar link that links\nback to the Github project page.\n\n![](/docs/images/changes.png)\n![](/docs/images/changes-2.png)\n\nWhen creating a job, specify that is connects to git. Under \"Github\nproject\", put in: git@github.com:*Person*/*Project*.git Under \"Source\nCode Management\" select Git, and put in\ngit@github.com:*Person*/*Project*.git\n\n## GitHub hook trigger for GITScm polling\n\nThis feature enables builds after [post-receive hooks in your GitHub\nrepositories](https://help.github.com/post-receive-hooks/). This trigger\nonly kicks git-plugin internal polling algo for every incoming event\nagainst matched repo.\n\n> This trigger was previously named as \"Build when a change is pushed to GitHub\"\n\n## Usage\n\nTo be able to use this feature different mode are available : \n* manual mode : the url have to be added manually in each project\n* automatic mode : Jenkins register automatically the webhook for every project\n\n### Manual Mode\n\nIn this mode, you'll be responsible for registering the hook URLs to\nGitHub. Click the\n![(question)](/docs/images/help_16.svg)\nicon (under¬†Manage Jenkins \\> Configure System \\> GitHub)¬†to see the URL\nin Jenkins that receives the post-commit POSTs ‚Äî but in general the URL\nis of the form `$JENKINS_BASE_URL/github-webhook/` ‚Äî for example:\n`https://ci.example.com/jenkins/github-webhook/`.\n\nOnce you have the URL, and have added it as a webhook to the relevant\nGitHub repositories, continue to **Step 3**.\n\n### Automatic Mode (Jenkins manages hooks for jobs by itself)\n\nIn this mode, Jenkins will automatically add/remove hook URLs to GitHub\nbased on the project configuration in the background. You'll specify\nGitHub OAuth token so that Jenkins can login as you to do this.\n\n**Step 1.** Go to the global configuration and add GitHub Server Config.\n\n![](/docs/images/ghserver-config.png)\n\n**Step 2.1.** Create your personal access token in GitHub.\n\nPlugin can help you to do it with all required scopes. Go to\n**Advanced** -\\> **Manage Additional GitHub Actions** -\\> **Convert\nLogin and Password to token**\n\n![](/docs/images/manage-token.png)\n\n> *Two-Factor Authentication*\n> \n> Auto-creating token doesn't work with [GitHub\n> 2FA](https://help.github.com/articles/about-two-factor-authentication/)\n> \n> You can create **\"Secret text\"** credentials with token in corresponding\n> domain with login and password directly, or from username and password\n> credentials.\n\n**Step 2.2.** Select previously created \"Secret Text\" credentials with\nGitHub OAuth token.\n\n*Required scopes for token*\n\nTo be able manage hooks your token should have **admin:org\\_hook**\nscope.\n\n*GitHub Enterprise*\n\nYou can also redefine GitHub url by clicking on **Custom GitHub API\nURL** checkbox.  \nNote that credentials are filtered by entered GH url with help of domain\nrequirements. So you can create credentials in different domains and see\nonly credentials that matched by predefined domains.\n\n![](/docs/images/secret-text.png)\n\n**Step 3.** Once that configuration is done, go to the project config of\neach job you want triggered automatically and simply check \"GitHub hook trigger for GITScm polling\" \nunder \"Build Triggers\". With this, every new\npush to the repository automatically triggers a new build.\n\nNote that there's only one URL and it receives all post-receive POSTs\nfor all your repositories. The server side of this URL is smart enough\nto figure out which projects need to be triggered, based on the\nsubmission.\n\n## Security Implications\n\nThis plugin requires that you have an HTTP URL reachable from GitHub,\nwhich means it's reachable from the whole internet. So it is implemented\ncarefully with the possible malicious fake post-receive POSTS in mind.\nTo cope with this, upon receiving a POST, Jenkins will talk to GitHub to\nensure the push was actually made.\n\n## Jenkins inside a firewall\n\nIn case your Jenkins run inside the firewall and not directly reachable\nfrom the internet, this plugin lets you specify an arbitrary endpoint\nURL as an override in the automatic mode. The plugin will assume that\nyou've set up reverse proxy or some other means so that the POST from\nGitHub will be routed to the Jenkins.\n\n## Trouble-shooting hooks\n\nIf you set this up but build aren't triggered, check the following\nthings:\n\n-   Click the \"admin\" button on the GitHub repository in question and\n    make sure post-receive hooks are there.\n    -   If it's not there, make sure you have proper credential set in\n        the Jenkins system config page.\n-   Also, [enable\n    logging](https://wiki.jenkins.io/display/JENKINS/Logging) for the\n    class names\n    -   `com.cloudbees.jenkins.GitHubPushTrigger`\n    -   `org.jenkinsci.plugins.github.webhook.WebhookManager`\n    -   `com.cloudbees.jenkins.GitHubWebHook`  \n        and you'll see the log of Jenkins trying to install a\n        post-receive hook.\n-   Click \"Test hook\" button from the GitHub UI and see if Jenkins\n    receive a payload.\n\n## Using cache to GitHub requests\n\nEach **GitHub Server Config** creates own GitHub client to interact with\napi. By default it uses cache (with **20MB** limit) to speedup process\nof fetching data and reduce rate-limit consuming. You can change cache\nlimit value in \"Advanced\" section of this config item. If you set 0,\nthen this feature will be disabled for this (and only this) config.\n\nAdditional info:\n\n-   This plugin now serves only hooks from github as main feature. Then\n    it starts using git-plugin to fetch sources.\n-   It works both public and Enterprise GitHub\n-   Plugin have some\n    [limitations](https://stackoverflow.com/questions/16323749/jenkins-github-plugin-inverse-branches)\n\n## Possible Issues between Jenkins and GitHub\n\n### Windows:\n\n-   In windows, Jenkins will use the the SSH key of the user it is\n    running as, which is located in the %USERPROFILE%\\\\.ssh folder ( on\n    XP, that would be C:\\\\Documents and Settings\\\\USERNAME\\\\.ssh, and on\n    7 it would be C:\\\\Users\\\\USERNAME\\\\.ssh). Therefore, you need to\n    force Jenkins to run as the user that has the SSH key configured. To\n    do that, right click on My Computer, and hit \"Manage\". Click on\n    \"Services\". Go to Jenkins, right click, and select¬† \"Properties\".\n    Under the \"Log On\" tab, choose the user Jenkins will run as, and put\n    in the username and password (it requires one). Then restart the\n    Jenkins service by right clicking on Jenkins (in the services\n    window), and hit \"Restart\".\n-   Jenkins does not support passphrases for SSH keys. Therefore, if you\n    set one while running the initial Github configuration, rerun it and\n    don't set one.\n\n## Pipeline examples\n\n### Setting commit status\n\nThis code will set commit status for custom repo with configured context\nand message (you can also define same way backref)\n\n```groovy\nvoid setBuildStatus(String message, String state) {\n  step([\n      $class: \"GitHubCommitStatusSetter\",\n      reposSource: [$class: \"ManuallyEnteredRepositorySource\", url: \"https://github.com/my-org/my-repo\"],\n      contextSource: [$class: \"ManuallyEnteredCommitContextSource\", context: \"ci/jenkins/build-status\"],\n      errorHandlers: [[$class: \"ChangingBuildStatusErrorHandler\", result: \"UNSTABLE\"]],\n      statusResultSource: [ $class: \"ConditionalStatusResultSource\", results: [[$class: \"AnyBuildResult\", message: message, state: state]] ]\n  ]);\n}\n\nsetBuildStatus(\"Build complete\", \"SUCCESS\");\n```\n\nMore complex example (can be used with multiple scm sources in pipeline)\n\n```groovy\ndef getRepoURL() {\n  sh \"git config --get remote.origin.url > .git/remote-url\"\n  return readFile(\".git/remote-url\").trim()\n}\n\ndef getCommitSha() {\n  sh \"git rev-parse HEAD > .git/current-commit\"\n  return readFile(\".git/current-commit\").trim()\n}\n\ndef updateGithubCommitStatus(build) {\n  // workaround https://issues.jenkins-ci.org/browse/JENKINS-38674\n  repoUrl = getRepoURL()\n  commitSha = getCommitSha()\n\n  step([\n    $class: 'GitHubCommitStatusSetter',\n    reposSource: [$class: \"ManuallyEnteredRepositorySource\", url: repoUrl],\n    commitShaSource: [$class: \"ManuallyEnteredShaSource\", sha: commitSha],\n    errorHandlers: [[$class: 'ShallowAnyErrorHandler']],\n    statusResultSource: [\n      $class: 'ConditionalStatusResultSource',\n      results: [\n        [$class: 'BetterThanOrEqualBuildResult', result: 'SUCCESS', state: 'SUCCESS', message: build.description],\n        [$class: 'BetterThanOrEqualBuildResult', result: 'FAILURE', state: 'FAILURE', message: build.description],\n        [$class: 'AnyBuildResult', state: 'FAILURE', message: 'Loophole']\n      ]\n    ]\n  ])\n}\n```\n\n## Change Log\n\n[GitHub Releases](https://github.com/jenkinsci/github-plugin/releases)\n\n## Development\n\nStart the local Jenkins instance:\n\n    mvn hpi:run\n\n\n## Jenkins Plugin Maven goals\n\n\thpi:create  Creates a skeleton of a new plugin.\n\t\n\thpi:hpi Builds the .hpi file\n\n\thpi:hpl Generates the .hpl file\n\n\thpi:run Runs Jenkins with the current plugin project\n\n\thpi:upload Posts the hpi file to java.net. Used during the release.\n\t\n\t\n## How to install\n\nRun \n\n\tmvn hpi:hpi\n\t\nto create the plugin .hpi file.\n\n\nTo install:\n\n1. copy the resulting ./target/rdoc.hpi file to the $JENKINS_HOME/plugins directory. Don't forget to restart Jenkins afterwards.\n\t\n2. or use the plugin management console (https://example.com:8080/pluginManager/advanced) to upload the hpi file. You have to restart Jenkins in order to find the plugin in the installed plugins list.\n\n\n## Plugin releases\n\n\tmvn release:prepare release:perform -Dusername=juretta -Dpassword=****** \n (Distance: 0.9154)",
    "rank_3_distance": 0.9154
  },
  {
    "step": "{'name': 'deleteDir', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.4766)",
    "rank_1_distance": 1.4766,
    "rank_2_name": "# Unik Builder Plugin",
    "rank_2_content": "# Unik Builder Plugin\n\nThis plugin allows to add different Unik command as build steps to your freestyle and pipeline jobs as build steps. \n\nUnik is a build framework that simplifies the build and execution of Unikernel instances (https://github.com/solo-io/unik).\n\n# Commands\n\nThe commands currently supported are:\n\n* create an image\n* delete an image\n* pull an image from a registry\n* push an image to a registry \n* run a new instance\n* start an existing instance\n* stop a running instance\n* delete an instance\n* create a volume\n* attach a volume\n* detach a volume\n* delete a volume\n\n## Example Usage\n\nIn the fallowing we pull an image from a repository and run it, both as a freestyle job an as a pipeline job.\n\n### Freestyle Job\n\n![pull and run instances](images/pull_and_run_instance.png)\n\n### Pipeline Job\n\n````\nnode{\n    unik pull(imageName: 'myImage', provider: 'virtualbox', unikHubEndpoint: hub(credentialsId: 'hubCredentialsID', url: 'http://myunik.hub.com/'))\n    unik run(imageName: 'myImage', instanceName: 'myInstance')\n}\n````\n\n## Configuration\n\nAdditionally we can globally configure both a default location for the Unik deamon and a default location for a Unik Hub. \n\n![builder config](images/builder_config.png)\n\n![hub config](images/hub_config.png) \n (Distance: 1.4970)",
    "rank_2_distance": 1.497,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.5152)",
    "rank_3_distance": 1.5152
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh '''\\n                    curl -qsL https://github.com/crate-ci/typos/releases/download/v1.5.0/typos-v1.5.0-x86_64-unknown-linux-musl.tar.gz | tar xvzf - ./typos\\n                    curl -qsL https://github.com/halkeye/typos-json-to-checkstyle/releases/download/v0.1.1/typos-checkstyle-v0.1.1-x86_64 > typos-checkstyle && chmod 0755 typos-checkstyle\\n                    ./typos --format json | ./typos-checkstyle - > checkstyle.xml || true\\n                    '''\\n                    recordIssues(tools: [checkStyle(id: 'typos', name: 'Typos', pattern: 'checkstyle.xml')])\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'timeout(time: 60, unit: \\'MINUTES\\') {\\n                        sh \\'\\'\\'#!/usr/bin/env bash\\n                        set -o errexit\\n                        set -o nounset\\n                        set -o pipefail\\n                        set -o xtrace\\n\\n                        make all\\n\\n                        illegal_htaccess_content=\"$( find content -name \\'.htaccess\\' -type f -exec grep --extended-regexp --invert-match \\'^(#|ErrorDocument)\\' {} \\\\\\\\; )\"\\n                        if [[ -n \"$illegal_htaccess_content\" ]] ; then\\n                            echo \"Failing build due to illegal content in .htaccess files, only ErrorDocument is allowed:\" >&2\\n                            echo \"$illegal_htaccess_content\" >&2\\n                            exit 1\\n                        fi\\n\\n                        illegal_filename=\"$( find . -name \\'*[<>]*\\' )\"\\n                        if [[ -n \"$illegal_filename\" ]] ; then\\n                            echo \"Failing build due to illegal filename:\" >&2\\n                            echo \"$illegal_filename\" >&2\\n                            exit 1\\n                        fi\\n                        \\'\\'\\'\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'build/**/*.zip', 'fingerprint': 'true'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(credentialsId: 'BLOBXFER_STORAGEACCOUNTKEY', variable: 'BLOBXFER_STORAGEACCOUNTKEY')]\", 'raw_block': \"sh './scripts/blobxfer upload --local-path /data/_site --storage-account-key $BLOBXFER_STORAGEACCOUNTKEY --storage-account prodjenkinsio --remote-path jenkinsio --recursive --mode file --skip-on-md5-match --file-md5'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.result = \"FAILURE\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (!env.hub_org) {\\n                        println(\"${ANSI_BOLD}${ANSI_RED}Uh Oh! Please set a Jenkins environment variable named hub_org with value as registery/sunbidrded${ANSI_NORMAL}\")\\n                        error \\'Please resolve the errors and rerun..\\'\\n                    } else {\\n                        println(\"${ANSI_BOLD}${ANSI_GREEN}Found environment variable named hub_org with value as: ${hub_org}${ANSI_NORMAL}\")\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'cleanWs()\\n                    if (params.github_release_tag == \"\") {\\n                        checkout scm\\n                        commit_hash = sh(script: \\'git rev-parse --short HEAD\\', returnStdout: true).trim()\\n                        branch_name = sh(script: \\'git name-rev --name-only HEAD | rev | cut -d \"/\" -f1| rev\\', returnStdout: true).trim()\\n                        build_tag = \"${branch_name}_${commit_hash}_${env.BUILD_NUMBER}\"\\n                        println(\"${ANSI_BOLD}${ANSI_YELLOW}github_release_tag not specified, using the latest commit hash: ${commit_hash}${ANSI_NORMAL}\")\\n                    } else {\\n                        def scmVars = checkout scm\\n                        checkout scm: [\\n                            $class: \\'GitSCM\\', \\n                            branches: [[name: \"refs/tags/${params.github_release_tag}\"]], \\n                            userRemoteConfigs: [[url: scmVars.GIT_URL]]\\n                        ]\\n                        build_tag = \"${params.github_release_tag}_${env.BUILD_NUMBER}\"\\n                        println(\"${ANSI_BOLD}${ANSI_YELLOW}github_release_tag specified, building from tag: ${params.github_release_tag}${ANSI_NORMAL}\")\\n                    }\\n                    echo \"build_tag: ${build_tag}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh('git submodule update --init')\\n                    sh('git submodule update --init --recursive --remote')\\n                    sh 'git log -1'\\n                    sh 'cat service/conf/routes | grep v2'\\n                    sh 'mvn clean install -U -DskipTests=true'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'service'\", 'raw_block': \"sh 'mvn play2:dist'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': 'metadata.json'}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.description = \"${build_tag}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'bat \\'conan install -u ../ -s build_type=Debug -b missing\\'\\n                                    bat \\'cmake -G \"Visual Studio 15 2017 Win64\" ../\\'\\n                                    bat \\'cmake --build . --config Debug\\''}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': 'bat \\'conan install -u ../ -s build_type=Release -o libcosim:fmuproxy=True -b missing\\'\\n                                    bat \\'cmake -G \"Visual Studio 15 2017 Win64\" ../\\'\\n                                    bat \\'cmake --build . --config Release\\'\\n                                    bat \\'cmake --build . --config Release --target install\\''}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build/dist'\", 'raw_block': 'zip (\\n                                        zipFile: \"cosim-win64.zip\",\\n                                        archive: true\\n                                    )'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build/dist'\", 'raw_block': 'zip (\\n                                        zipFile: \"cosim-${env.TAG_NAME}-win64.zip\",\\n                                        archive: true\\n                                    )'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'debug-build/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/windows/debug --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'debug-build/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/windows/debug --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'release-build/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/windows/release --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'debug-build/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/windows/debug --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'release-build-fmuproxy/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-fmuproxy'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/windows/release --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-fmuproxy/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-fmuproxy/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'debug-build-conan/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build-conan'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/linux/debug --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build-conan/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build-conan/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                        testTimeMargin: '30000',\\n                                        thresholdMode: 1,\\n                                        thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                        tools: [ CTest(pattern: 'release-build-conan-fmuproxy/Testing/**/Test.xml') ]\\n                                    \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-conan-fmuproxy'\", 'raw_block': 'sh \"conan remove libcosim --force\"\\n                                        sh \"conan export-pkg ../libcosim osp/${COSIM_CONAN_CHANNEL} -pf package/linux/release --force\"\\n                                        sh \"conan upload libcosim/*@osp/${COSIM_CONAN_CHANNEL} --all -r=osp --confirm --force\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-conan-fmuproxy/package'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build-conan-fmuproxy/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                                testTimeMargin: '30000',\\n                                thresholdMode: 1,\\n                                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\\n                                tools: [ CTest(pattern: '*-build/Testing/**/Test.xml') ]\\n                            \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'install'\", 'raw_block': \"archiveArtifacts artifacts: '**',  fingerprint: false\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build/Testing'\", 'raw_block': 'deleteDir();'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': \"bat 'conan install ../libcosim -s build_type=Debug -b missing -u'\\n                                    bat 'conan build ../libcosim'\\n                                    bat 'conan package ../libcosim -pf package/windows/debug'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': \"bat 'conan install ../libcosim -s build_type=Release -b missing -u'\\n                                    bat 'conan build ../libcosim'\\n                                    bat 'conan package ../libcosim -pf package/windows/release'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'debug-build'\", 'raw_block': \"bat 'ctest -C Debug -T Test --no-compress-output --test-output-size-passed 307200 || true'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'release-build'\", 'raw_block': \"bat 'ctest -C Release -T Test --no-compress-output --test-output-size-passed 307200 || true'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[\\n                    string(credentialsId: 'github-access-token', variable: 'GH_TOKEN')\\n                ]\", 'raw_block': \"sh 'make build'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (env.BRANCH_NAME == \\'master\\' || (env.BRANCH_NAME.length() > 8 && env.BRANCH_NAME.substring(0,8) == \\'release-\\')) {\\n                        echo \\'On master or release-branch. Running release step.\\'\\n                        sh \\'make release\\'\\n                    } else {\\n                        if (env.BRANCH_NAME.substring(0,3) == \\'PR-\\') {\\n                            echo \\'On PR branch. Running release step in dry-run mode.\\'\\n                        } else {\\n                            echo(\\'Unknown branch type. Running release step in dry-run mode.\\')\\n                        }\\n                        sh \"make release_dry_run BRANCH=${env.BRANCH_NAME}\"\\n\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                        \"state\": \"success\",\\n                        \"description\": \"master ci job completed :)\",\\n                        \"context\": \"Jenkins\"\\n                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                        \"state\": \"failure\",\\n                        \"description\": \"master ci job failed :(\",\\n                        \"context\": \"Jenkins\"\\n                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                        \"state\": \"success\",\\n                                        \"description\": \"job completed :)\",\\n                                        \"context\": \"Apply Inventory\"\\n                                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                        \"state\": \"failure\",\\n                                        \"description\": \"job failed :(\",\\n                                        \"context\": \"Apply Inventory\"\\n                                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                        \"state\": \"success\",\\n                                        \"description\": \"job completed :)\",\\n                                        \"context\": \"Apply Inventory\"\\n                                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                        \"state\": \"failure\",\\n                                        \"description\": \"job failed :(\",\\n                                        \"context\": \"Apply Inventory\"\\n                                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                \"state\": \"success\",\\n                                \"description\": \"job completed :)\",\\n                                \"context\": \"CI Builds\"\\n                            }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                \"state\": \"failure\",\\n                                \"description\": \"job failed :(\",\\n                                \"context\": \"CI Builds\"\\n                            }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                \"state\": \"success\",\\n                                \"description\": \"job completed :)\",\\n                                \"context\": \"CI Deploys\"\\n                            }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                \"state\": \"failure\",\\n                                \"description\": \"job failed :(\",\\n                                \"context\": \"CI Deploys\"\\n                            }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'script', 'raw_args': 'env.OCP_API_SERVER = \"${env.OPENSHIFT_API_URL}\"\\n                    env.OCP_TOKEN = readFile(\\'/var/run/secrets/kubernetes.io/serviceaccount/token\\').trim()\\n\\n                    \\n                    timeout(time: 1, unit: \\'HOURS\\') {\\n                        env.PR_ID = input(\\n                                id: \\'userInput\\', message: \\'Which PR # do you want to test?\\', parameters: [\\n                                [$class: \\'StringParameterDefinition\\', description: \\'PR #\\', name: \\'pr\\']\\n                        ])\\n                        if (env.PR_ID == null || env.PR_ID == \"\"){\\n                            error(\\'PR_ID cannot be null or empty\\')\\n                        }\\n                    }\\n\\n                    env.PR_CI_CD_PROJECT_NAME = \"labs-ci-cd-pr-${env.PR_ID}\"\\n                    env.PR_DEV_PROJECT_NAME = \"labs-dev-pr-${env.PR_ID}\"\\n                    env.PR_TEST_PROJECT_NAME = \"labs-test-pr-${env.PR_ID}\"\\n\\n                    env.PR_GITHUB_TOKEN = new String(\"oc get secret labs-robot-github-oauth-token --template=\\'{{.data.password}}\\'\".execute().text.minus(\"\\'\").minus(\"\\'\").decodeBase64())\\n                    if (env.PR_GITHUB_TOKEN == null || env.PR_GITHUB_TOKEN == \"\"){\\n                        error(\\'PR_GITHUB_TOKEN cannot be null or empty\\')\\n                    }\\n                    env.USER_PASS = \"${env.PR_GITHUB_USERNAME}:${env.PR_GITHUB_TOKEN}\"\\n\\n                    env.PR_BRANCH = \"pull/${env.PR_ID}/head\"\\n                    env.PR_URI = \"https://api.github.com/repos/rht-labs/labs-ci-cd/pulls/${env.PR_ID}\"\\n                    env.PR_STATUS_URI = getGitHubPullRequest().statuses_url\\n\\n                    echo env.PR_STATUS_URI'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'clearProjects', 'raw_args': ''}",
    "rank_1_name": "This plugin provides Clearcase Integration to Hudson.",
    "rank_1_content": "This plugin provides Clearcase Integration to Hudson. \n (Distance: 1.1324)",
    "rank_1_distance": 1.1324,
    "rank_2_name": "---",
    "rank_2_content": "---\nmaintainer: lakruzz\n---\nClearCase Object Oriented Library\n================== \n (Distance: 1.2274)",
    "rank_2_distance": 1.2274,
    "rank_3_name": "This plugin provides Clearcase Integration to Jenkins.",
    "rank_3_content": "This plugin provides Clearcase Integration to Jenkins.\n\n\n\nhttp://wiki.jenkins-ci.org/display/JENKINS/ClearCase+Plugin \n (Distance: 1.2410)",
    "rank_3_distance": 1.241
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                                    \"state\": \"pending\",\\n                                    \"description\": \"ALL CI jobs are running...\",\\n                                    \"context\": \"Jenkins\"\\n                                }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                        \"state\": \"pending\",\\n                        \"description\": \" job is running...\",\\n                        \"context\": \"CI Builds\"\\n                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'node', 'raw_args': '\\'master\\') {\\n                    echo \"Verifying the CI Builds have completed successfully\"\\n                    script {\\n                        openshift.withCluster() {\\n                            openshift.withProject(\"${env.PR_CI_CD_PROJECT_NAME}\") {\\n                                timeout(5) {\\n                                    def pipelineBuildConfigs = openshift.selector(\\'bc\\', [ type:\\'pipeline\\'])\\n                                    def imageBuildConfigs = openshift.selector(\\'bc\\', [ type:\\'image\\'])\\n                                    def allDone = true\\n                                    imageBuildConfigs.withEach {\\n                                        echo \"CI Builds: Checking ${it.name()}\"\\n                                        def imageBuildName = it.name()\\n                                        def isPipelineBuild = false\\n                                        pipelineBuildConfigs.withEach {\\n                                            if (it.name() == imageBuildName) {\\n                                                isPipelineBuild = true\\n                                            }\\n                                        }\\n\\n                                        if (isPipelineBuild == false) {\\n                                            if (it.object().status.phase != \"Complete\"', 'raw_block': 'allDone = false\\n                                            }\\n                                        }\\n                                    }\\n                                    return allDone;\\n                                }\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "compound-slaves",
    "rank_1_content": "compound-slaves\n===============\n\ncompound-slaves is a Jenkins plugin for uniting groups of nodes into a single slave (compound slave)\nThis allows to use several nodes for a single job!\nMoreover it works with any other cloud plugins and is able to get compound slaves from the cloud. \n (Distance: 1.3864)",
    "rank_1_distance": 1.3864,
    "rank_2_name": "# Async Http Client [![Build Status](https://travis-ci.org/AsyncHttpClient/async-http-client.svg?branch=master)](https://travis-ci.org/AsyncHttpClient/async-http-client) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/)",
    "rank_2_content": "# Async Http Client [![Build Status](https://travis-ci.org/AsyncHttpClient/async-http-client.svg?branch=master)](https://travis-ci.org/AsyncHttpClient/async-http-client) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/)\n\nFollow [@AsyncHttpClient](https://twitter.com/AsyncHttpClient) on Twitter.\n\nThe AsyncHttpClient (AHC) library allows Java applications to easily execute HTTP requests and asynchronously process HTTP responses.\nThe library also supports the WebSocket Protocol.\n\nIt's built on top of [Netty](https://github.com/netty/netty). It's currently compiled on Java 8 but runs on Java 9 too.\n\n## Installation\n\nBinaries are deployed on Maven central:\n\n```xml\n<dependency>\n\t<groupId>org.asynchttpclient</groupId>\n\t<artifactId>async-http-client</artifactId>\n\t<version>LATEST_VERSION</version>\n</dependency>\n```\n\n## Version\n\nAHC doesn't use SEMVER, and won't.\n\n* MAJOR = huge refactoring\n* MINOR = new features and minor API changes, upgrading should require 1 hour of work to adapt sources\n* FIX = no API change, just bug fixes, only those are source and binary compatible with same minor version\n\nCheck CHANGES.md for migration path between versions.\n\n## Basics\n\nFeel free to check the [Javadoc](http://www.javadoc.io/doc/org.asynchttpclient/async-http-client/) or the code for more information.\n\n### Dsl\n\nImport the Dsl helpers to use convenient methods to bootstrap components:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n```\n\n### Client\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient asyncHttpClient = asyncHttpClient();\n```\n\nAsyncHttpClient instances must be closed (call the `close` method) once you're done with them, typically when shutting down your application.\nIf you don't, you'll experience threads hanging and resource leaks.\n\nAsyncHttpClient instances are intended to be global resources that share the same lifecycle as the application.\nTypically, AHC will usually underperform if you create a new client for each request, as it will create new threads and connection pools for each.\nIt's possible to create shared resources (EventLoop and Timer) beforehand and pass them to multiple client instances in the config. You'll then be responsible for closing those shared resources.\n\n## Configuration\n\nFinally, you can also configure the AsyncHttpClient instance via its AsyncHttpClientConfig object:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient c = asyncHttpClient(config().setProxyServer(proxyServer(\"127.0.0.1\", 38080)));\n```\n\n## HTTP\n\n### Sending Requests\n\n### Basics\n\nAHC provides 2 APIs for defining requests: bound and unbound.\n`AsyncHttpClient` and Dls` provide methods for standard HTTP methods (POST, PUT, etc) but you can also pass a custom one.\n\n```java\nimport org.asynchttpclient.*;\n\n// bound\nFuture<Response> whenResponse = asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\n\n// unbound\nRequest request = get(\"http://www.example.com/\").build();\nFuture<Response> whenResponse = asyncHttpClient.execute(request);\n```\n\n#### Setting Request Body\n\nUse the `setBody` method to add a body to the request.\n\nThis body can be of type:\n* `java.io.File`\n* `byte[]`\n* `List<byte[]>`\n* `String`\n* `java.nio.ByteBuffer`\n* `java.io.InputStream`\n* `Publisher<io.netty.bufferByteBuf>`\n* `org.asynchttpclient.request.body.generator.BodyGenerator`\n\n`BodyGenerator` is a generic abstraction that let you create request bodies on the fly.\nHave a look at `FeedableBodyGenerator` if you're looking for a way to pass requests chunks on the fly. \n\n#### Multipart\n\nUse the `addBodyPart` method to add a multipart part to the request.\n\nThis part can be of type:\n* `ByteArrayPart`\n* `FilePart`\n* `InputStreamPart`\n* `StringPart`\n\n### Dealing with Responses\n\n#### Blocking on the Future\n\n`execute` methods return a `java.util.concurrent.Future`. You can simply block the calling thread to get the response.\n\n```java\nFuture<Response> whenResponse = asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\nResponse response = whenResponse.get();\n```\n\nThis is useful for debugging but you'll most likely hurt performance or create bugs when running such code on production.\nThe point of using a non blocking client is to *NOT BLOCK* the calling thread!\n\n### Setting callbacks on the ListenableFuture\n\n`execute` methods actually return a `org.asynchttpclient.ListenableFuture` similar to Guava's.\nYou can configure listeners to be notified of the Future's completion. \n\n```java\nListenableFuture<Response> whenResponse = ???;\nRunnable callback = () -> {\n\ttry  {\n\t\tResponse response = whenResponse.get();\n\t\tSystem.out.println(response);\n\t} catch (InterruptedException | ExecutionException e) {\n\t\te.printStackTrace();\n\t}\n};\njava.util.concurrent.Executor executor = ???;\nwhenResponse.addListener(() -> ???, executor);\n```\n\nIf the `executor` parameter is null, callback will be executed in the IO thread.\nYou *MUST NEVER PERFORM BLOCKING* operations in there, typically sending another request and block on a future.\n\n#### Using custom AsyncHandlers\n\n`execute` methods can take an `org.asynchttpclient.AsyncHandler` to be notified on the different events, such as receiving the status, the headers and body chunks.\nWhen you don't specify one, AHC will use a `org.asynchttpclient.AsyncCompletionHandler`;\n\n`AsyncHandler` methods can let you abort processing early (return `AsyncHandler.State.ABORT`) and can let you return a computation result from `onCompleted` that will be used as the Future's result.\nSee `AsyncCompletionHandler` implementation as an example.\n\nThe below sample just capture the response status and skips processing the response body chunks.\n\nNote that returning `ABORT` closes the underlying connection.\n\n```java\nimport static org.asynchttpclient.Dsl.*;\nimport org.asynchttpclient.*;\nimport io.netty.handler.codec.http.HttpHeaders;\n\nFuture<Integer> whenStatusCode = asyncHttpClient.prepareGet(\"http://www.example.com/\")\n.execute(new AsyncHandler<Integer>() {\n\tprivate Integer status;\n\t@Override\n\tpublic State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {\n\t\tstatus = responseStatus.getStatusCode();\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic State onHeadersReceived(HttpHeaders headers) throws Exception {\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic Integer onCompleted() throws Exception {\n\t\treturn status;\n\t}\n\t@Override\n\tpublic void onThrowable(Throwable t) {\n\t}\n});\n\nInteger statusCode = whenStatusCode.get();\n```\n\n#### Using Continuations\n\n`ListenableFuture` has a `toCompletableFuture` method that returns a `CompletableFuture`.\nBeware that canceling this `CompletableFuture` won't properly cancel the ongoing request.\nThere's a very good chance we'll return a `CompletionStage` instead in the next release.\n\n```java\nCompletableFuture<Response> whenResponse = asyncHttpClient\n            .prepareGet(\"http://www.example.com/\")\n            .execute()\n            .toCompletableFuture()\n            .exceptionally(t -> { /* Something wrong happened... */  } )\n            .thenApply(response -> { /*  Do something with the Response */ return resp; });\nwhenResponse.join(); // wait for completion\n```\n\nYou may get the complete maven project for this simple demo from [org.asynchttpclient.example](https://github.com/AsyncHttpClient/async-http-client/tree/master/example/src/main/java/org/asynchttpclient/example)\n\n## WebSocket\n\nAsync Http Client also supports WebSocket.\nYou need to pass a `WebSocketUpgradeHandler` where you would register a `WebSocketListener`.\n\n```java\nWebSocket websocket = c.prepareGet(\"ws://demos.kaazing.com/echo\")\n      .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(\n          new WebSocketListener() {\n\n          @Override\n          public void onOpen(WebSocket websocket) {\n              websocket.sendTextFrame(\"...\").sendTextFrame(\"...\");\n          }\n\n          @Override\n          public void onClose(WebSocket websocket) {\n          }\n          \n    \t\t  @Override\n          public void onTextFrame(String payload, boolean finalFragment, int rsv) {\n          \tSystem.out.println(payload);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n          }\n      }).build()).get();\n```\n\n## Reactive Streams\n\nAsyncHttpClient has built-in support for reactive streams.\n\nYou can pass a request body as a `Publisher<ByteBuf>` or a `ReactiveStreamsBodyGenerator`.\n\nYou can also pass a `StreamedAsyncHandler<T>` whose `onStream` method will be notified with a `Publisher<HttpResponseBodyPart>`.\n\nSee tests in package `org.asynchttpclient.reactivestreams` for examples.\n\n## WebDAV\n\nAsyncHttpClient has build in support for the WebDAV protocol.\nThe API can be used the same way normal HTTP request are made:\n\n```java\nRequest mkcolRequest = new RequestBuilder(\"MKCOL\").setUrl(\"http://host:port/folder1\").build();\nResponse response = c.executeRequest(mkcolRequest).get();\n```\nor\n\n```java\nRequest propFindRequest = new RequestBuilder(\"PROPFIND\").setUrl(\"http://host:port\").build();\nResponse response = c.executeRequest(propFindRequest, new AsyncHandler() {\n  // ...\n}).get();\n```\n\n## More\n\nYou can find more information on Jean-Fran√ßois Arcand's blog.  Jean-Fran√ßois is the original author of this library.\nCode is sometimes not up-to-date but gives a pretty good idea of advanced features.\n\n* https://jfarcand.wordpress.com/2010/12/21/going-asynchronous-using-asynchttpclient-the-basic/\n* https://jfarcand.wordpress.com/2011/01/04/going-asynchronous-using-asynchttpclient-the-complex/\n* https://jfarcand.wordpress.com/2011/12/21/writing-websocket-clients-using-asynchttpclient/\n\n## User Group\n\nKeep up to date on the library development by joining the Asynchronous HTTP Client discussion group\n\n[Google Group](http://groups.google.com/group/asynchttpclient)\n\n## Contributing\n\nOf course, Pull Requests are welcome.\n\nHere are the few rules we'd like you to respect if you do so:\n\n* Only edit the code related to the suggested change, so DON'T automatically format the classes you've edited.\n* Use IntelliJ default formatting rules.\n* Regarding licensing:\n  * You must be the original author of the code you suggest.\n  * You must give the copyright to \"the AsyncHttpClient Project\" \n (Distance: 1.3870)",
    "rank_2_distance": 1.387,
    "rank_3_name": "Test",
    "rank_3_content": "Test \n (Distance: 1.4254)",
    "rank_3_distance": 1.4254
  },
  {
    "step": "{'name': 'notifyGitHub', 'raw_args': '\\'\\'\\'{\\n                        \"state\": \"pending\",\\n                        \"description\": \" job is running...\",\\n                        \"context\": \"CI Deploys\"\\n                    }\\'\\'\\''}",
    "rank_1_name": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)",
    "rank_1_content": "# Notify.Events [![Build Status](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/notify-events-plugin/job/master/)\n\nThis plugin allows **Jenkins** to send notification to:\n\n- Telegram\n- Viber\n- SMS\n- Slack\n- Jabber / XMPP\n- Discord\n- Web Push\n- Microsoft Teams\n- Voice calls\n\nSee the full list of supported messengers [here](https://notify.events/en-US/features).\n\n#### Read the manual in other languages\n\n- [–†—É—Å—Å–∫–∏–π](docs/ru-RU.md)\n\n## Installation\n\n### Option 1. Plugin Manager\n1. Go to **Manage Jenkins** > **Manage plugins** > **Available**.\n2. Search for **Notify.Events**.\n3. Check the box next to the found plugin and click **Install without restart**.\n\n### Option 2. Downloading a .hpi file\n1. Download the latest **notify-events.hpi** release [here](http://archives.jenkins-ci.org/plugins/notify-events/latest/notify-events.hpi).\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n### Option 3. Building from the source\n1. To build the plugin, run `mvn install`. This will create the **./target/notify-events.hpi** file.\n2. Manually install the plugin on the Jenkins controller. Read full instructions for advanced plugin installation [here](https://jenkins.io/doc/book/managing/plugins/#advanced-installation).\n\n## Basic usage\n\n### Createing a channel in Notify.Events\n1. Sign-up to the [Notify.Events](https://notify.events/user/sign-in) service.\n2. Create a new channel.\n3. Add Jenkins as a source to your channel.\n4. Copy your token and save the integration.\n\n### Jenkins build configuration\n\n#### Build Step\n1. Add a build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** field.\n\n#### Post-build Actions\n1. Add a post-build step.\n2. Paste the copied **Token** (see Create a Notify.Events channel, step 4).\n3. Fill in the **Message** (optional).\n4. Fill in the **Send when** field.\n\n#### Pipeline\n```\nnotifyEvents message: 'Hello <b>world</b>', token: '01234567890123456789012345678901'\n```\n\n### Formatting\n\nYou can use environment variables (including Token-Macro) and simple HTML formatting (`<b>`, `<i>`, `<a>` tags) for the Title and Message fields.\n\nExample:\n```html\n<b>$BUILD_ID</b> - Built successfully\n``` \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "weibo-plugin",
    "rank_2_content": "weibo-plugin\n============\n\nsina microblog plugin for jenkins\n\nThis plugin allow you to post customized message to Sina microblog.\n\n# Communication\n\nIf you have any question about this plugin, please contact us in the [gitter room](https://gitter.im/jenkinsci/weibo-plugin). \n (Distance: 1.1626)",
    "rank_2_distance": 1.1626,
    "rank_3_name": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)",
    "rank_3_content": "# TeleJenkins [![Build Status](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/badge/icon)](https://ci.jenkins.io/job/Plugins/job/telegram-notifications-plugin/job/master/)\n\n![TeleJenkins Logo](https://pp.vk.me/c636926/v636926471/193d1/fARBefBcfzs.jpg)\n\nThis plugin allows **Jenkins** to send notifications via **telegram** bot.\n\n---\n \n## Installation\n\n### Build from source \n1. To build a plugin, run `mvn install`. This will create the file *./target/telegram-notifications.hpi*\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Download an hpi\n1. Download _telegram-notifications-*.hpi_ release [here](https://github.com/jenkinsci/telegram-notifications-plugin/releases)\n2. [Manually install](https://jenkins.io/doc/book/managing/plugins/#advanced-installation) plugin to your Jenkins\n\n### Plugin Manager\n1. Go to *<your_jenkins>/pluginManager/available*\n2. Find and install **Telegram Bot**\n\n\n## Basic usage\n### Create bot\n1. Find BotFather in Telegram ([@BotFather](https://t.me/@BotFather))\n2. Send */newbot* command \n3. Follow the instructions\n\n### Global config\n1. Open the Jenkins global config\n2. Paste your bot *name* and *token* to according textfields\n\n### Subscribe for Jenkins messages\n1. In telegram find your bot and send */start* command\n2. Send */sub* command\n\n### Manage your job\n1. Add a build step and/or a post build step\n2. Fill the message (you can use environment variables and simple Markdown)\n\n### Use in Pipeline\n`telegramSend 'Hello World'`\n\nOr, to send the message to some specific chat/channel:\n`telegramSend(message: 'Hello World', chatId: 1234567890)` \n (Distance: 1.1781)",
    "rank_3_distance": 1.1781
  },
  {
    "step": "{'name': 'node', 'raw_args': '\\'master\\') {\\n                    echo \"Verifying the CI Deploys have completed successfully\"\\n                    script {\\n                        openshift.withCluster() {\\n                            openshift.withProject(\"${env.PR_CI_CD_PROJECT_NAME}\") {\\n                                timeout(10', 'raw_block': 'def deploymentConfigs = openshift.selector(\\'dc\\')\\n                                    deploymentConfigs.withEach {\\n                                        echo \"Checking ${env.PR_CI_CD_PROJECT_NAME}:${it.name()}\"\\n                                        \\n                                        \\n                                        it.rollout().status()\\n                                    }\\n                                }\\n                            }\\n                        }\\n                    }'}",
    "rank_1_name": "compound-slaves",
    "rank_1_content": "compound-slaves\n===============\n\ncompound-slaves is a Jenkins plugin for uniting groups of nodes into a single slave (compound slave)\nThis allows to use several nodes for a single job!\nMoreover it works with any other cloud plugins and is able to get compound slaves from the cloud. \n (Distance: 1.3864)",
    "rank_1_distance": 1.3864,
    "rank_2_name": "# Async Http Client [![Build Status](https://travis-ci.org/AsyncHttpClient/async-http-client.svg?branch=master)](https://travis-ci.org/AsyncHttpClient/async-http-client) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/)",
    "rank_2_content": "# Async Http Client [![Build Status](https://travis-ci.org/AsyncHttpClient/async-http-client.svg?branch=master)](https://travis-ci.org/AsyncHttpClient/async-http-client) [![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.asynchttpclient/async-http-client/)\n\nFollow [@AsyncHttpClient](https://twitter.com/AsyncHttpClient) on Twitter.\n\nThe AsyncHttpClient (AHC) library allows Java applications to easily execute HTTP requests and asynchronously process HTTP responses.\nThe library also supports the WebSocket Protocol.\n\nIt's built on top of [Netty](https://github.com/netty/netty). It's currently compiled on Java 8 but runs on Java 9 too.\n\n## Installation\n\nBinaries are deployed on Maven central:\n\n```xml\n<dependency>\n\t<groupId>org.asynchttpclient</groupId>\n\t<artifactId>async-http-client</artifactId>\n\t<version>LATEST_VERSION</version>\n</dependency>\n```\n\n## Version\n\nAHC doesn't use SEMVER, and won't.\n\n* MAJOR = huge refactoring\n* MINOR = new features and minor API changes, upgrading should require 1 hour of work to adapt sources\n* FIX = no API change, just bug fixes, only those are source and binary compatible with same minor version\n\nCheck CHANGES.md for migration path between versions.\n\n## Basics\n\nFeel free to check the [Javadoc](http://www.javadoc.io/doc/org.asynchttpclient/async-http-client/) or the code for more information.\n\n### Dsl\n\nImport the Dsl helpers to use convenient methods to bootstrap components:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n```\n\n### Client\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient asyncHttpClient = asyncHttpClient();\n```\n\nAsyncHttpClient instances must be closed (call the `close` method) once you're done with them, typically when shutting down your application.\nIf you don't, you'll experience threads hanging and resource leaks.\n\nAsyncHttpClient instances are intended to be global resources that share the same lifecycle as the application.\nTypically, AHC will usually underperform if you create a new client for each request, as it will create new threads and connection pools for each.\nIt's possible to create shared resources (EventLoop and Timer) beforehand and pass them to multiple client instances in the config. You'll then be responsible for closing those shared resources.\n\n## Configuration\n\nFinally, you can also configure the AsyncHttpClient instance via its AsyncHttpClientConfig object:\n\n```java\nimport static org.asynchttpclient.Dsl.*;\n\nAsyncHttpClient c = asyncHttpClient(config().setProxyServer(proxyServer(\"127.0.0.1\", 38080)));\n```\n\n## HTTP\n\n### Sending Requests\n\n### Basics\n\nAHC provides 2 APIs for defining requests: bound and unbound.\n`AsyncHttpClient` and Dls` provide methods for standard HTTP methods (POST, PUT, etc) but you can also pass a custom one.\n\n```java\nimport org.asynchttpclient.*;\n\n// bound\nFuture<Response> whenResponse = asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\n\n// unbound\nRequest request = get(\"http://www.example.com/\").build();\nFuture<Response> whenResponse = asyncHttpClient.execute(request);\n```\n\n#### Setting Request Body\n\nUse the `setBody` method to add a body to the request.\n\nThis body can be of type:\n* `java.io.File`\n* `byte[]`\n* `List<byte[]>`\n* `String`\n* `java.nio.ByteBuffer`\n* `java.io.InputStream`\n* `Publisher<io.netty.bufferByteBuf>`\n* `org.asynchttpclient.request.body.generator.BodyGenerator`\n\n`BodyGenerator` is a generic abstraction that let you create request bodies on the fly.\nHave a look at `FeedableBodyGenerator` if you're looking for a way to pass requests chunks on the fly. \n\n#### Multipart\n\nUse the `addBodyPart` method to add a multipart part to the request.\n\nThis part can be of type:\n* `ByteArrayPart`\n* `FilePart`\n* `InputStreamPart`\n* `StringPart`\n\n### Dealing with Responses\n\n#### Blocking on the Future\n\n`execute` methods return a `java.util.concurrent.Future`. You can simply block the calling thread to get the response.\n\n```java\nFuture<Response> whenResponse = asyncHttpClient.prepareGet(\"http://www.example.com/\").execute();\nResponse response = whenResponse.get();\n```\n\nThis is useful for debugging but you'll most likely hurt performance or create bugs when running such code on production.\nThe point of using a non blocking client is to *NOT BLOCK* the calling thread!\n\n### Setting callbacks on the ListenableFuture\n\n`execute` methods actually return a `org.asynchttpclient.ListenableFuture` similar to Guava's.\nYou can configure listeners to be notified of the Future's completion. \n\n```java\nListenableFuture<Response> whenResponse = ???;\nRunnable callback = () -> {\n\ttry  {\n\t\tResponse response = whenResponse.get();\n\t\tSystem.out.println(response);\n\t} catch (InterruptedException | ExecutionException e) {\n\t\te.printStackTrace();\n\t}\n};\njava.util.concurrent.Executor executor = ???;\nwhenResponse.addListener(() -> ???, executor);\n```\n\nIf the `executor` parameter is null, callback will be executed in the IO thread.\nYou *MUST NEVER PERFORM BLOCKING* operations in there, typically sending another request and block on a future.\n\n#### Using custom AsyncHandlers\n\n`execute` methods can take an `org.asynchttpclient.AsyncHandler` to be notified on the different events, such as receiving the status, the headers and body chunks.\nWhen you don't specify one, AHC will use a `org.asynchttpclient.AsyncCompletionHandler`;\n\n`AsyncHandler` methods can let you abort processing early (return `AsyncHandler.State.ABORT`) and can let you return a computation result from `onCompleted` that will be used as the Future's result.\nSee `AsyncCompletionHandler` implementation as an example.\n\nThe below sample just capture the response status and skips processing the response body chunks.\n\nNote that returning `ABORT` closes the underlying connection.\n\n```java\nimport static org.asynchttpclient.Dsl.*;\nimport org.asynchttpclient.*;\nimport io.netty.handler.codec.http.HttpHeaders;\n\nFuture<Integer> whenStatusCode = asyncHttpClient.prepareGet(\"http://www.example.com/\")\n.execute(new AsyncHandler<Integer>() {\n\tprivate Integer status;\n\t@Override\n\tpublic State onStatusReceived(HttpResponseStatus responseStatus) throws Exception {\n\t\tstatus = responseStatus.getStatusCode();\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic State onHeadersReceived(HttpHeaders headers) throws Exception {\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic State onBodyPartReceived(HttpResponseBodyPart bodyPart) throws Exception {\n\t\treturn State.ABORT;\n\t}\n\t@Override\n\tpublic Integer onCompleted() throws Exception {\n\t\treturn status;\n\t}\n\t@Override\n\tpublic void onThrowable(Throwable t) {\n\t}\n});\n\nInteger statusCode = whenStatusCode.get();\n```\n\n#### Using Continuations\n\n`ListenableFuture` has a `toCompletableFuture` method that returns a `CompletableFuture`.\nBeware that canceling this `CompletableFuture` won't properly cancel the ongoing request.\nThere's a very good chance we'll return a `CompletionStage` instead in the next release.\n\n```java\nCompletableFuture<Response> whenResponse = asyncHttpClient\n            .prepareGet(\"http://www.example.com/\")\n            .execute()\n            .toCompletableFuture()\n            .exceptionally(t -> { /* Something wrong happened... */  } )\n            .thenApply(response -> { /*  Do something with the Response */ return resp; });\nwhenResponse.join(); // wait for completion\n```\n\nYou may get the complete maven project for this simple demo from [org.asynchttpclient.example](https://github.com/AsyncHttpClient/async-http-client/tree/master/example/src/main/java/org/asynchttpclient/example)\n\n## WebSocket\n\nAsync Http Client also supports WebSocket.\nYou need to pass a `WebSocketUpgradeHandler` where you would register a `WebSocketListener`.\n\n```java\nWebSocket websocket = c.prepareGet(\"ws://demos.kaazing.com/echo\")\n      .execute(new WebSocketUpgradeHandler.Builder().addWebSocketListener(\n          new WebSocketListener() {\n\n          @Override\n          public void onOpen(WebSocket websocket) {\n              websocket.sendTextFrame(\"...\").sendTextFrame(\"...\");\n          }\n\n          @Override\n          public void onClose(WebSocket websocket) {\n          }\n          \n    \t\t  @Override\n          public void onTextFrame(String payload, boolean finalFragment, int rsv) {\n          \tSystem.out.println(payload);\n          }\n\n          @Override\n          public void onError(Throwable t) {\n          }\n      }).build()).get();\n```\n\n## Reactive Streams\n\nAsyncHttpClient has built-in support for reactive streams.\n\nYou can pass a request body as a `Publisher<ByteBuf>` or a `ReactiveStreamsBodyGenerator`.\n\nYou can also pass a `StreamedAsyncHandler<T>` whose `onStream` method will be notified with a `Publisher<HttpResponseBodyPart>`.\n\nSee tests in package `org.asynchttpclient.reactivestreams` for examples.\n\n## WebDAV\n\nAsyncHttpClient has build in support for the WebDAV protocol.\nThe API can be used the same way normal HTTP request are made:\n\n```java\nRequest mkcolRequest = new RequestBuilder(\"MKCOL\").setUrl(\"http://host:port/folder1\").build();\nResponse response = c.executeRequest(mkcolRequest).get();\n```\nor\n\n```java\nRequest propFindRequest = new RequestBuilder(\"PROPFIND\").setUrl(\"http://host:port\").build();\nResponse response = c.executeRequest(propFindRequest, new AsyncHandler() {\n  // ...\n}).get();\n```\n\n## More\n\nYou can find more information on Jean-Fran√ßois Arcand's blog.  Jean-Fran√ßois is the original author of this library.\nCode is sometimes not up-to-date but gives a pretty good idea of advanced features.\n\n* https://jfarcand.wordpress.com/2010/12/21/going-asynchronous-using-asynchttpclient-the-basic/\n* https://jfarcand.wordpress.com/2011/01/04/going-asynchronous-using-asynchttpclient-the-complex/\n* https://jfarcand.wordpress.com/2011/12/21/writing-websocket-clients-using-asynchttpclient/\n\n## User Group\n\nKeep up to date on the library development by joining the Asynchronous HTTP Client discussion group\n\n[Google Group](http://groups.google.com/group/asynchttpclient)\n\n## Contributing\n\nOf course, Pull Requests are welcome.\n\nHere are the few rules we'd like you to respect if you do so:\n\n* Only edit the code related to the suggested change, so DON'T automatically format the classes you've edited.\n* Use IntelliJ default formatting rules.\n* Regarding licensing:\n  * You must be the original author of the code you suggest.\n  * You must give the copyright to \"the AsyncHttpClient Project\" \n (Distance: 1.3870)",
    "rank_2_distance": 1.387,
    "rank_3_name": "Test",
    "rank_3_content": "Test \n (Distance: 1.4254)",
    "rank_3_distance": 1.4254
  },
  {
    "step": "{'name': 'clearProjects', 'raw_args': ''}",
    "rank_1_name": "This plugin provides Clearcase Integration to Hudson.",
    "rank_1_content": "This plugin provides Clearcase Integration to Hudson. \n (Distance: 1.1324)",
    "rank_1_distance": 1.1324,
    "rank_2_name": "---",
    "rank_2_content": "---\nmaintainer: lakruzz\n---\nClearCase Object Oriented Library\n================== \n (Distance: 1.2274)",
    "rank_2_distance": 1.2274,
    "rank_3_name": "This plugin provides Clearcase Integration to Jenkins.",
    "rank_3_content": "This plugin provides Clearcase Integration to Jenkins.\n\n\n\nhttp://wiki.jenkins-ci.org/display/JENKINS/ClearCase+Plugin \n (Distance: 1.2410)",
    "rank_3_distance": 1.241
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean checkstyle:check -Dcheckstyle.failOnViolation=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean license:check-file-header -Dlicence-check.failOnMissingHeader=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(\\n                   credentialsId: 'artifact-signing-key-password',\\n                   variable: 'SIGN_KEY')]) {\\n                        configFileProvider(\\n                            [configFile(fileId: '10647dc3-5621-463b-a290-85290f0ad119', variable: 'MAVEN_SETTINGS')]\", 'raw_block': \"sh 'mvn -s $MAVEN_SETTINGS clean deploy -P deploy -DskipTests -Dcheckstyle.failOnViolation=true -Dgpg.passphrase=$SIGN_KEY'\\n                        }\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'pip install -r requirements.txt --user'\\n          sh 'python manage.py test'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'pip install -r requirements.txt --user'\\n          sh 'python manage.py test'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'npm install'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'npm test'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'npm install'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'withEnv', 'raw_args': '[\"HOME=${env.WORKSPACE}\"]', 'raw_block': \"sh 'npm test'\"}",
    "rank_1_name": "# Pyenv Pipeline Plugin",
    "rank_1_content": "# Pyenv Pipeline Plugin\nA Jenkins plugin that provides a way to execute <code>sh</code> and \n<code>bat</code> Pipeline DSL commands within a specified Python\nvirtualenv.\n\n## Overview\nThis plugin provides 1 new Pipeline DSL method:\n\n* <code>withPythonEnv</code>: Specifies a Python virtualenv to execute\n  any <code>sh</code> and <code>bat</code> DSL commands contained \n  within its block.\n  \n  <code>withPythonEnv</code> takes a single String argument, which\n  specifies the Python executable to use for the virtualenv.\n  pyenv-pipeline will use the executable to generate a corresponding\n  virtualenv. At runtime, it will take a snapshot of environmental \n  variables with and without the virtualenv active. From this it generates\n  a diff, and applies the environmental variable changes within the\n  <code>withPythonEnv</code> block (reverting them after the block completes)\n  \n  The argument provided to <code>withPythonEnv</code> will first attempt\n  to match it against the name of a <code>ToolInstallation</code> that\n  is described by a <code>ToolDescriptor</code> with an ID that is contained\n  within a pre-defined list of known Jenkins Python Tool plugin IDs. Currently,\n  this plugin only looks to see if [ShiningPanda](https://github.com/jenkinsci/shiningpanda-plugin) is installed. If a \n  <code>ToolInstallation</code> is matched, the location of that tool is used\n  as the Python executable to generate the virtualenv.\n  \n  If no <code>ToolInstallation</code> is matched, we attempt to treat the argument as \n  the location of an already existing virtualenv. A directory lookup is attempted with the\n  string argument, and if the argument is determined to point to a virtualenv, we go\n  ahead and use that. \n  \n  * In order for this feature to work, the passed argument must end with the OS appropriate\n  file separator.\n  \n  Lastly, the argument is treated as the literal location of the Python executable to be used. This can be used\n  to specify a specific Python installation (if the location is known beforehand),\n  or to fallback and use the systems default Python installation.\n  \n  * <pre><code>withPythonEnv('python') {\n        // Uses the default system installation of Python\n        // Equivalent to withPythonEnv('/usr/bin/python') \n        ...\n    }\n    </code></pre>\n  * <pre><code>withPythonEnv('/usr/bin/python3.5') {\n        // Uses the specific python3.5 executable located in /usr/bin\n        ...\n    }</code></pre>\n  * <pre><code>withPythonEnv('CPython-2.7'){\n        // Uses the ShiningPanda registered Python installation named 'CPython-2.7'\n        ...\n    }</code></pre>  \n    \n  * <pre><code>withPythonEnv('/home/user/managed_virtualenv/'){\n        // Uses the virtualenv that already exists at /home/user/managed_virtualenv/\n        ...\n    }</code></pre>\n\n\n## Warnings:\n\n  * Earlier version of this plugin relied on using <code>pysh</code> and\n  <code>pybat</code> steps to execute code within <code>withPythonEnv</code>\n  blocks. These steps are no longer necessary. To migrate, simply remove the <code>py</code>\n  prefix from any such steps, and the command should work as intended. The steps are\n  still included, and are copies of the <code>sh</code> and <code>bat</code> steps. Eventually,\n  the steps will be removed altogether.\n\n\n  * Multibranch pipeline builds will occasionally generate very long path names\n  triggering pypa/virtualenv#596. In these instances, use of this plugin is not\n  an option, at least at this time. \n (Distance: 1.4307)",
    "rank_1_distance": 1.4307,
    "rank_2_name": "# dlisting-cov-plugin",
    "rank_2_content": "# dlisting-cov-plugin \n (Distance: 1.4500)",
    "rank_2_distance": 1.45,
    "rank_3_name": "README",
    "rank_3_content": "README \n (Distance: 1.4875)",
    "rank_3_distance": 1.4875
  },
  {
    "step": "{'name': 'script', 'raw_args': 'c.cleanup()'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"n.export()\\n                build_version = readFile('version')\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'f.invalidate(\"E23K7T1ARU8K88\")'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (build_version.contains(\"SNAPSHOT\")) {\\n            sh \"if git tag --list | grep ${build_version}; then git tag -d ${build_version}; git push origin :refs/tags/${build_version}; fi\"\\n          }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'build', 'raw_args': '\\n        job: \\'Deploy - Front-End\\',\\n        parameters: [\\n          [\\n            $class: \\'StringParameterValue\\',\\n            name: \\'Service\\',\\n            value: \"Config-UI2\",\\n          ],\\n          [\\n            $class: \\'StringParameterValue\\',\\n            name: \\'RefreshRate\\',\\n            value: \"9000\",\\n          ],\\n          [\\n            $class: \\'StringParameterValue\\',\\n            name: \\'Version\\',\\n            value: build_version,\\n          ],\\n          [\\n            $class: \\'StringParameterValue\\',\\n            name: \\'Environment\\',\\n            value: \\'dev\\',\\n          ],\\n          [\\n            $class: \\'BooleanParameterValue\\',\\n            name: \\'blastSqsOutput\\',\\n            value: true,\\n          ],\\n          [\\n            $class: \\'StringParameterValue\\',\\n            name: \\'logLevel\\',\\n            value: \\'debug\\',\\n          ],\\n        ],\\n      '}",
    "rank_1_name": "$Id$",
    "rank_1_content": "$Id$\n\nBuilding\n========\n\nTo build you will need:\n\n * JDK 1.5+ (http://java.sun.com/j2se/)\n * Apache Ant 1.7+ (http://ant.apache.org)\n\nFor detailed instructions please see:\n\n    http://groovy.codehaus.org/Building+Groovy+from+Source\n\nTo build everything, run tests and create a complete installation:\n\n    ant install\n\nTo build without running tests:\n\n    ant install -DskipTests=true \n (Distance: 1.1562)",
    "rank_1_distance": 1.1562,
    "rank_2_name": "buildheroes-plugin",
    "rank_2_content": "buildheroes-plugin\n==================\n\nThis Plugin connects your Jenkins-Build with your account on [Buildheroes](https://www.buildheroes.com).\n\n## Buildheroes.com\n### BOOST YOUR BUILD SUCCESS RATE\n\nBuildheroes.com is a service which connects continous integration with gaming. Every month you challenge your teammates to be the one who cares best about your green builds.\n\n## Why this Plugin?\n\nWith this plugin you only need to paste in your individual project token and everything is set up to start gaming with [Jenkins](https://jenkins-ci.org) and [Buildheroes](https://www.buildheroes.com).\n\n## Want to know more?\n\nJust go to [Buildheroes](https://www.buildheroes.com) and grab your account. It's free for open source. \n (Distance: 1.1745)",
    "rank_2_distance": 1.1745,
    "rank_3_name": "Jenkins Plugin for Buildcoin.com",
    "rank_3_content": "Jenkins Plugin for Buildcoin.com\n================================\n\nThis plugin sends build notifications to Buildcoin, a sweet CI game and real-time dashboard for your team. \n (Distance: 1.2063)",
    "rank_3_distance": 1.2063
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean checkstyle:check -Dcheckstyle.failOnViolation=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'catchError', 'raw_args': \"buildResult: 'FAILURE', stageResult: 'FAILURE'\", 'raw_block': 'sh \"mvn clean license:check-file-header -Dlicence-check.failOnMissingHeader=true\"'}",
    "rank_1_name": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)",
    "rank_1_content": "[![Hackfest Image](./img/README_header_top.png)](https://www.jenkins.io/events/online-hackfest/2020-uiux/)\n\n[![Gitter](https://badges.gitter.im/jenkinsci/hackfest.svg)](https://gitter.im/jenkinsci/hackfest?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge)\n[![Registration](https://img.shields.io/badge/register-here-blue)](https://forms.gle/MrkASJagxNvdXBbdA)\n[![Code of Conduct](https://img.shields.io/badge/%E2%9D%A4-code%20of%20conduct-lightgrey.svg)](https://www.jenkins.io/project/conduct/)\n\n| WARNING:  **This event is over**, thanks a lot to all contributors! Results are being processed at the moment, this page will be updated later. |\n| --- |\n\n## About the event\n\n[Jenkins UI/UX Online Hackfest](https://www.jenkins.io/events/online-hackfest/2020-uiux/) is an online event on May 25-29.\nThe goal to improve the Jenkins user experience, including but not limited to user interface and documentation.\nWe also invite participants to share experiences about Jenkins and to participate in UX testing.\nThe event will have the [Jenkins is the Way](https://www.jenkins.io/blog/2020/04/30/jenkins-is-the-way/) theme.\nYou can find more information on the [event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/).\n\n## Tracks and projects\n\nThere will be [3 main tracks](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas):\n\n* **User Interface** - Improve look&feel and accessibility for Jenkins users, work on new read-only interface for instances managed with configuration as code, create and update Jenkins themes, and many other topics.\n* **User Documentation** - Improve and create new user documentation, tutorials and solution pages. Also, there is ongoing documentation migration from Wiki to jenkins.io and plugin repositories.\n* **Spread the word** - Write user stories for Jenkins Is The Way site and the Jenkins blog, post about your Jenkins user experience and new features, record overview and HOWTO videos, etc.\n\nSee [this page](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas) for the list of project and ideas.\n\n## Resources\n\n* [Main event page](https://www.jenkins.io/events/online-hackfest/2020-uiux/) with all information, e.g. \n  [project ideas](https://www.jenkins.io/events/online-hackfest/2020-uiux/#tracks-and-project-ideas),\n  [online events](https://www.jenkins.io/events/online-hackfest/2020-uiux/#online-events),\n  [swag and prizes](https://www.jenkins.io/events/online-hackfest/2020-uiux/#swag-and-prizes)\n* [Getting started, Reporting contributions](./CONTRIBUTING.md)\n* [Recorded Sessions](./presentations/)\n* [Code of Conduct](https://www.jenkins.io/project/conduct/)\n* [Frequently Asked Questions](https://www.jenkins.io/events/online-hackfest/2020-uiux/faq/)\n\n## Contributors\n\n<!-- ALL-CONTRIBUTORS-BADGE:START - Do not remove or modify this section -->\n[![All Contributors](https://img.shields.io/badge/all_contributors-54-orange.svg?style=flat-square)](#contributors-)\n<!-- ALL-CONTRIBUTORS-BADGE:END --> \n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/oleg-nenashev\"><img src=\"https://avatars0.githubusercontent.com/u/3000480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Oleg Nenashev</b></sub></a><br /><a href=\"#eventOrganizing-oleg-nenashev\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-oleg-nenashev\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=oleg-nenashev\" title=\"Code\">üíª</a> <a href=\"#content-oleg-nenashev\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://jenkins.io/blog/authors/markewaite/\"><img src=\"https://avatars2.githubusercontent.com/u/156685?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Waite</b></sub></a><br /><a href=\"#eventOrganizing-MarkEWaite\" title=\"Event Organizing\">üìã</a> <a href=\"#talk-MarkEWaite\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AMarkEWaite\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://tracymiranda.com\"><img src=\"https://avatars2.githubusercontent.com/u/5173122?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tracy Miranda</b></sub></a><br /><a href=\"#eventOrganizing-tracymiranda\" title=\"Event Organizing\">üìã</a> <a href=\"#content-tracymiranda\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/timja\"><img src=\"https://avatars3.githubusercontent.com/u/21194782?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tim Jacomb</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Atimja\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#ideas-timja\" title=\"Ideas, Planning, & Feedback\">ü§î</a> <a href=\"#talk-timja\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=timja\" title=\"Documentation\">üìñ</a> <a href=\"#content-timja\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/markyjackson5\"><img src=\"https://avatars2.githubusercontent.com/u/16655670?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Marky Jackson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amarkyjackson-taulia\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"http://www.cs.hm.edu/die_fakultaet/ansprechpartner/professoren/hafner/index.de.html\"><img src=\"https://avatars2.githubusercontent.com/u/503338?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ullrich Hafner</b></sub></a><br /><a href=\"#talk-uhafner\" title=\"Talks\">üì¢</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=uhafner\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/res0nance\"><img src=\"https://avatars3.githubusercontent.com/u/31362124?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Raihaan Shouhell</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ares0nance\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=res0nance\" title=\"Tests\">‚ö†Ô∏è</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/alyssat\"><img src=\"https://avatars1.githubusercontent.com/u/15133103?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Alyssat</b></sub></a><br /><a href=\"#fundingFinding-alyssat\" title=\"Funding Finding\">üîç</a> <a href=\"#talk-alyssat\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/stellargo\"><img src=\"https://avatars0.githubusercontent.com/u/27735438?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sumit Sarin</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Documentation\">üìñ</a> <a href=\"#tool-stellargo\" title=\"Tools\">üîß</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=stellargo\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olblak\"><img src=\"https://avatars1.githubusercontent.com/u/2360224?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Olblak</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=olblak\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Aolblak\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#infra-olblak\" title=\"Infrastructure (Hosting, Build-Tools, etc)\">üöá</a></td>\n    <td align=\"center\"><a href=\"https://vsilverman.github.io\"><img src=\"https://avatars0.githubusercontent.com/u/2159948?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Vlad Silverman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Avsilverman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=vsilverman\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"#content-vsilverman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/daniel-beck\"><img src=\"https://avatars3.githubusercontent.com/u/1831569?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Daniel Beck</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adaniel-beck\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=daniel-beck\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://www.romenrg.com\"><img src=\"https://avatars2.githubusercontent.com/u/1831480?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Rom√©n Rodr√≠guez-Gil</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=romenrg\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Wadeck\"><img src=\"https://avatars1.githubusercontent.com/u/2662497?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Wadeck Follonier</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Wadeck\" title=\"Code\">üíª</a> <a href=\"#talk-Wadeck\" title=\"Talks\">üì¢</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/megathaum\"><img src=\"https://avatars3.githubusercontent.com/u/6340362?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>megathaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=megathaum\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Amegathaum\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jphartley\"><img src=\"https://avatars3.githubusercontent.com/u/2852805?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jeremy Hartley</b></sub></a><br /><a href=\"#talk-jphartley\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/fqueiruga\"><img src=\"https://avatars3.githubusercontent.com/u/5738588?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>F√©lix Queiruga</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Afqueiruga\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=fqueiruga\" title=\"Code\">üíª</a> <a href=\"#talk-fqueiruga\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/aytunc-beken/\"><img src=\"https://avatars2.githubusercontent.com/u/17325506?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Aytunc BEKEN</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=aytuncbeken\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/BarakStout\"><img src=\"https://avatars3.githubusercontent.com/u/34528865?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Barak Stout</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=BarakStout\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/nlk35\"><img src=\"https://avatars2.githubusercontent.com/u/26775132?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>nlk35</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nlk35\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Anlk35\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/v1v\"><img src=\"https://avatars2.githubusercontent.com/u/2871786?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Victor Martinez</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=v1v\" title=\"Documentation\">üìñ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Av1v\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://peterjonsson.se\"><img src=\"https://avatars2.githubusercontent.com/u/4572231?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Peter Jonsson</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=95jonpet\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3A95jonpet\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"#tool-95jonpet\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/LarrySul\"><img src=\"https://avatars0.githubusercontent.com/u/29729601?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sule Olanrewaju</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=LarrySul\" title=\"Documentation\">üìñ</a> <a href=\"#content-LarrySul\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"http://amunizmartin.com\"><img src=\"https://avatars3.githubusercontent.com/u/1017585?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Antonio Muniz</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=amuniz\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/ksenia-nenasheva\"><img src=\"https://avatars1.githubusercontent.com/u/5075432?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kseniia Nenasheva</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=ksenia-nenasheva\" title=\"Tests\">‚ö†Ô∏è</a></td>\n    <td align=\"center\"><a href=\"https://github.com/TobiX\"><img src=\"https://avatars3.githubusercontent.com/u/78534?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Tobias Gruetzmacher</b></sub></a><br /><a href=\"#talk-TobiX\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/dwnusbaum\"><img src=\"https://avatars3.githubusercontent.com/u/1068968?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Devin Nusbaum</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=dwnusbaum\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://twitter.com/steven_terrana\"><img src=\"https://avatars1.githubusercontent.com/u/22510821?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>steven-terrana</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=steven-terrana\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/MadsJakobsen\"><img src=\"https://avatars3.githubusercontent.com/u/887218?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mads Jakobsen</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=MadsJakobsen\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/Taeloz\"><img src=\"https://avatars2.githubusercontent.com/u/32245517?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Matthew Brunton</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=Taeloz\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/guptaprakhariitr\"><img src=\"https://avatars0.githubusercontent.com/u/58157064?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Prakhar Gupta</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=guptaprakhariitr\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/urwa\"><img src=\"https://avatars3.githubusercontent.com/u/5441467?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>urwa</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=urwa\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://krharsh17.vision\"><img src=\"https://avatars2.githubusercontent.com/u/46624829?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kumar Harsh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=krharsh17\" title=\"Documentation\">üìñ</a> <a href=\"#content-krharsh17\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://sladyn98.netlify.com\"><img src=\"https://avatars1.githubusercontent.com/u/28837406?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Sladyn</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sladyn98\" title=\"Code\">üíª</a> <a href=\"#blog-sladyn98\" title=\"Blogposts\">üìù</a> <a href=\"#talk-sladyn98\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://abhyudaya.dev\"><img src=\"https://avatars0.githubusercontent.com/u/11471599?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Abhyudaya Sharma</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=AbhyudayaSharma\" title=\"Code\">üíª</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/kennyg\"><img src=\"https://avatars3.githubusercontent.com/u/98244?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kenny Gatdula</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=kennyg\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/rathneesh\"><img src=\"https://avatars3.githubusercontent.com/u/8232523?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>rathneesh</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rathneesh\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://thelostarrow.wordpress.com/\"><img src=\"https://avatars1.githubusercontent.com/u/43414361?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Nimish Bongale</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=nimishbongale\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/sethmccombs\"><img src=\"https://avatars0.githubusercontent.com/u/5605413?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Seth McCombs</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=sethmccombs\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/EstherAF\"><img src=\"https://avatars2.githubusercontent.com/u/5547479?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Esther √Ålvarez Feijoo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Tests\">‚ö†Ô∏è</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=EstherAF\" title=\"Code\">üíª</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3AEstherAF\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/XiongKezhi\"><img src=\"https://avatars1.githubusercontent.com/u/30348893?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Kezhi Xiong</b></sub></a><br /><a href=\"#talk-XiongKezhi\" title=\"Talks\">üì¢</a></td>\n    <td align=\"center\"><a href=\"https://github.com/zaycodes\"><img src=\"https://avatars1.githubusercontent.com/u/22375431?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Zainab Abubakar</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=zaycodes\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/dduportal\"><img src=\"https://avatars0.githubusercontent.com/u/1522731?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Damien Duportal</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Adduportal\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://www.linkedin.com/in/ray-kivisto/\"><img src=\"https://avatars2.githubusercontent.com/u/19917557?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ray Kivisto</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=rkivisto\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mtreeman\"><img src=\"https://avatars3.githubusercontent.com/u/44359078?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mark Baumann</b></sub></a><br /><a href=\"#content-mtreeman\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://www.duemir.net/\"><img src=\"https://avatars3.githubusercontent.com/u/348580?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Denys Digtiar</b></sub></a><br /><a href=\"#tool-duemir\" title=\"Tools\">üîß</a></td>\n    <td align=\"center\"><a href=\"https://github.com/skundrik\"><img src=\"https://avatars2.githubusercontent.com/u/14072681?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Slavo</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=skundrik\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/olevezinho\"><img src=\"https://avatars0.githubusercontent.com/u/37152156?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>olevezinho</b></sub></a><br /><a href=\"#content-olevezinho\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/getJv\"><img src=\"https://avatars0.githubusercontent.com/u/2864961?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Jhonatan Morais</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=getjv\" title=\"Documentation\">üìñ</a></td>\n  </tr>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/bitwiseman\"><img src=\"https://avatars3.githubusercontent.com/u/1958953?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Liam Newman</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Abitwiseman\" title=\"Reviewed Pull Requests\">üëÄ</a> <a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=bitwiseman\" title=\"Code\">üíª</a></td>\n    <td align=\"center\"><a href=\"https://github.com/jsoref\"><img src=\"https://avatars0.githubusercontent.com/u/2119212?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Josh Soref</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/pulls?q=is%3Apr+reviewed-by%3Ajsoref\" title=\"Reviewed Pull Requests\">üëÄ</a></td>\n    <td align=\"center\"><a href=\"https://github.com/gungeajit\"><img src=\"https://avatars3.githubusercontent.com/u/12168279?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Ajit Rajshekar Gunge</b></sub></a><br /><a href=\"#content-gungeajit\" title=\"Content\">üñã</a></td>\n    <td align=\"center\"><a href=\"https://github.com/elliot-smith77\"><img src=\"https://avatars3.githubusercontent.com/u/65857974?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Elliot Smith</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=elliot-smith77\" title=\"Documentation\">üìñ</a></td>\n    <td align=\"center\"><a href=\"http://www.gavinmogan.com\"><img src=\"https://avatars3.githubusercontent.com/u/110087?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Gavin Mogan</b></sub></a><br /><a href=\"https://github.com/jenkinsci/ui-ux-hackfest-2020/commits?author=halkeye\" title=\"Code\">üíª</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\n## Acknowledgements\n\nWe thank all contributors who participate in this event as committers!\nWe especially thank all reviewers, organizers and those who participated in the initial program reviews and provided invaluable feedback.\nIn particular, we thank User Experience, Documentation and Advocacy and Outreach SIG members who heavily contributed to this event.\n\nWe also thank sponsors of the event who make the swag and prizes possible:\n[CloudBees, Inc.](https://www.cloudbees.com/) and\n[Continuous Delivery Foundation (CDF)](https://cd.foundation/).\nIn addition to swag, CloudBees donates working time for event hosts and reviewers.\nCDF also sponsors our [online meetup platform](https://www.jenkins.io/events/online-meetup) which we will be using for the event.\n\n[![CloudBees Logo](./img/cloudbees-logo.png)](https://www.cloudbees.com/)\n[![CDF Logo](./img/cdf.png)](https://cd.foundation/) \n (Distance: 1.4246)",
    "rank_1_distance": 1.4246,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5107)",
    "rank_2_distance": 1.5107,
    "rank_3_name": "#Not currently supported",
    "rank_3_content": "#Not currently supported \n (Distance: 1.5252)",
    "rank_3_distance": 1.5252
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[string(\\n                   credentialsId: 'artifact-signing-key-password',\\n                   variable: 'SIGN_KEY')]) {\\n                        configFileProvider(\\n                            [configFile(fileId: '10647dc3-5621-463b-a290-85290f0ad119', variable: 'MAVEN_SETTINGS')]\", 'raw_block': \"sh 'mvn -s $MAVEN_SETTINGS clean deploy -P deploy -DskipTests -Dcheckstyle.failOnViolation=true -Dgpg.passphrase=$SIGN_KEY'\\n                        }\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'readTrusted', 'raw_args': 'bin/whitelist'}",
    "rank_1_name": "README",
    "rank_1_content": "README \n (Distance: 1.0316)",
    "rank_1_distance": 1.0316,
    "rank_2_name": "////",
    "rank_2_content": "////\n ~ The MIT License\n\n  ~ Copyright 2020 Loghi Perinpanayagam.\n\n  ~ Permission is hereby granted, free of charge, to any person obtaining a copy\n  ~ of this software and associated documentation files (the \"Software\"), to deal\n  ~ in the Software without restriction, including without limitation the rights\n  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  ~ copies of the Software, and to permit persons to whom the Software is\n  ~ furnished to do so, subject to the following conditions:\n\n  ~ The above copyright notice and this permission notice shall be included in\n  ~ all copies or substantial portions of the Software.\n\n  ~ THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  ~ THE SOFTWARE.\n////\n\n\n[[machine-learning-plugin]]\n= Machine Learning Plugin\n:toc: macro\n\nlink:https://ci.jenkins.io/job/Plugins/job/machine-learning-plugin/job/master/[image:https://ci.jenkins.io/job/Plugins/job/machine-learning-plugin/job/master/badge/icon[Build]]\nlink:https://github.com/jenkinsci/machine-learning-plugin/graphs/contributors[image:https://img.shields.io/github/contributors/jenkinsci/machine-learning-plugin.svg?color=blue[Contributors]]\nlink:https://gitter.im/jenkinsci/gsoc-machine-learning-project[image:https://badges.gitter.im/jenkinsci/machine-learning-plugin.svg[Gitter]]\n\nimage:docs/images/jenkins-machine-learning-logo.png[]\n\n== Overview\n\nThe main goal of this project is integrating Machine Learning workflow including Data preprocessing, Model Training, Evaluation and Prediction with Jenkins build tasks. This plugin is capable of executing code fragments via IPython kernel as currently supported by Jupyter.\n\n=== Usage\n\n==== Prerequisites\n\n- Following python libraries are required. If not -> install using,\n\n[source,bash]\n----\npip install jupyter\npip install protobuf\npip install grpcio\n----\n\n- For **Anaconda** environment need to install grpcio as Jupyter is already included in anaconda. For grpcio version >= 1.12 and need to install protobuf separately.\n\n[source,bash]\n----\npip install protobuf\npip install grpcio\n----\n\n> DEPRECATION: Python 2.7 reached the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 is no longer maintained.\n\n==== Configure IPython kernel\n\n* Kernel language name (Eg: python, ir, javascript etc)\n* Language should be alphanumeric and contains only `_` as a special character (Optional)\n* Connection establishing timeout in seconds\n* Max number of data frames in rows\n\nimage:docs/images/global_config.png[configuration]\n\n\n==== Add Jupyter Notebooks\n\n* Copy Jupyter Notebook to the workspace\n\n* Convert Jupyter Notebooks to `Python / JSON` files and save in the workspace\n\n\nimage:docs/images/file_parser.png[notebook]\n\n==== Build Notebook\n\n* Choose a name for the Machine Leaning task folder (Eg: Training)\n* Choose the language kernel\n* Use text editor to run code directly\n* Use file path to run Jupyter Notebook or script file\n\nimage:docs/images/file_builder.png[builder]\n\n* Tips for smooth interpretation\n\n** Install link:https://github.com/jenkinsci/ansicolor-plugin[ANSI-Color plugin] for rich formatted output\n** Aware of permissions for accessing I/O in the python code\n** Make sure about `import` libraries used in the code installed properly\n** If there is any HTML/Images as outputs, all will be saved in the workspace under the Machine Leaning task folder\n\n==== Images and HTMLs\n\nImages and HTMLs in the notebook will be saved in the workspace.\nThose artifacts can be viewed using the action in the left side panel.\n\nimage:docs/images/image_view.png[image_and_htmls]\n\n=== Troubleshooting\n\nIf you are having trouble viewing the HTML files saved, check your browser console to see if there are any errors about Content Security Policy.\nThis is often the problem.\nIf you see the error above, then follow the link link:https://wiki.jenkins.io/display/JENKINS/Configuring+Content+Security+Policy[Resolve issues on CSP] for instructions on how to resolve.\n\n=== Contributing to the Plugin\n\nPlease refer to the following link for more details. See link:CONTRIBUTING.adoc[here] . \n (Distance: 1.4215)",
    "rank_2_distance": 1.4215,
    "rank_3_name": "readonly-parameter-plugin",
    "rank_3_content": "readonly-parameter-plugin\n=======================\n\n##Characteristics\n\t\t1. Some key parameters, once modified in the build execution, can lead to the risk.these parameters,only administrator can modify,to reduce the risk.\n\t\t2. Readonly parameter,readonly in the build execution, in job configuration's page can modify.\n\t\t3. Readonly parameter,readonly in the rebuild excution also.\n\t\t4. This plugin contains string and text two readonly style.\n\n##Use case\nAfter the plugin is installed,in job configuration's page,you can see readonly Parameter:<br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/add_para.jpg)\n\nfor example,you add two readonly parameter,respectively called readonly_para_str and readonly_para_text.<br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/edit_para.jpg)\n\nclick 'Build With Parameters' link ,the parameter readonly_para_str and readonly_para_text of the set before ,display readonly,and can not be edited in this page. <br>\n![](https://github.com/jenkinsci/readonly-parameter-plugin/blob/master/images/build_para.jpg) \n (Distance: 1.4303)",
    "rank_3_distance": 1.4303
  },
  {
    "step": "{'name': 'withDockerRegistry', 'raw_args': '[ credentialsId: \"464911a1-007a-4910-90c8-78ff16ba165e\", url: \"\" ]) {\\n                    script {\\n                        if (env.BRANCH_NAME == \"main\"', 'raw_block': \"sh 'docker push hyperledger/grid-website'\\n                        }\\n                    }\"}",
    "rank_1_name": "# worksoft-certify-dashboard-plugin",
    "rank_1_content": "# worksoft-certify-dashboard-plugin\nCertify plugins are available in the repository.\nThis plugin is used to see the dashboard view of the processes. \n (Distance: 1.3547)",
    "rank_1_distance": 1.3547,
    "rank_2_name": "# alibabacloud credentials plugin",
    "rank_2_content": "# alibabacloud credentials plugin\n\n# Introduction\nWhen you need to verify whether AK and SK match when using Alibaba cloud related products, \nyou can use the alibabcloud credentials Jenkins plugin\n\n\n# Usage\n\n### Register account, get AK, SK\n\nStep 1: before using alibabcloud credentials Jenkins, you need to register an alicloud account \nand log in to the alicloud console. ( https://homenew.console.aliyun.com/ )\n\nStep 2: put the mouse in the user name area at the top right and select access keys from the \nshortcut menu that pops up.\n![](docs/images/alibaba.ak.png)\n\nStep 3: the system will pop up the security prompt dialog box, click continue to use accessKey,\nthe page will display accesskeyid and accesskeysecret\n![](docs/images/alibaba.getak.png)\n\n\n### Install Jenkins and the plugin\n\nOnce your Jenkins is installed, you can download alibab cloud credentials plugin for use\n\n* You can navigate to \"manage Jenkins\" \\ > \"manage plugins\"\n![](docs/images/jenkins.managePlugin.png)\n\n* On the plug-in management page, enter \"Alibaba cloud credentials\" in the query box to query\n the plugin\n![](docs/images/jenkins.available.png)\n\n* Scroll to the bottom and select \"install without restart\"\n![](docs/images/jenkins.install.png)\n\n### Verify\nOnce you've installed the plugin, you can verify AK, SK or save it in \"manage credentials\"\n![](docs/images/jenkins.credential.png)\n![](docs/images/jenkins.verify.png)\n\n# Contact us\n* DingTalk Group NumberÔºö44723358\n* DingTalk Group QR code\n\n  ![](docs/images/qrcode.png) \n (Distance: 1.4029)",
    "rank_2_distance": 1.4029,
    "rank_3_name": "Jenkins Quay.io trigger Plugin",
    "rank_3_content": "Jenkins Quay.io trigger Plugin\n==============================\n\nThis plugin provides integration between Jenkins and Quay.io docker registry.\n\nJenkins Wiki page: https://wiki.jenkins-ci.org/display/JENKINS/Quay.io+Trigger+Plugin\n\n[![Build Status](https://jenkins.ci.cloudbees.com/buildStatus/icon?job=plugins/quayio-trigger-plugin)](https://jenkins.ci.cloudbees.com/job/plugins/job/quayio-trigger-plugin/) \n (Distance: 1.4194)",
    "rank_3_distance": 1.4194
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': \"allowEmptyArchive: false, artifacts: '.ros/**/*.xml, .ros/**/*.log'\"}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': \"allowEmptyArchive: false, artifacts: '.ros/**/*.xml, .ros/**/*.log'\"}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'xunit', 'raw_args': \"\\n                testTimeMargin: '3000',\\n                thresholdMode: 1,\\n                thresholds: [\\n                  skipped(failureThreshold: '0'),\\n                  failed(failureThreshold: '0')\\n                ],\\n              reduceLog: false,\\n              tools: [CTest(\\n                  pattern: 'build/px4_sitl_test/Testing/**/*.xml',\\n                  deleteOutputFiles: true,\\n                  failIfNotNew: false,\\n                  skipNoTestFiles: true,\\n                  stopProcessingIfError: true\\n                )]\\n              \"}",
    "rank_1_name": "TestComplete xUnit Plugin",
    "rank_1_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nMore details can be found at wiki site: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.2924)",
    "rank_1_distance": 1.2924,
    "rank_2_name": "# codeBeamer xUnit Importer Plugin",
    "rank_2_content": "# codeBeamer xUnit Importer Plugin\n\nThis is the repository for the xUnit Importer Plugin for [codeBeamer ALM](https://intland.com)\n\nIf you want to learn more about this plugin visit the [Wiki](https://codebeamer.com/cb/project/1025). \n (Distance: 1.3368)",
    "rank_2_distance": 1.3368,
    "rank_3_name": "TestComplete xUnit Plugin",
    "rank_3_content": "TestComplete xUnit Plugin\n-------------------------\n\nJenkins Plugin that transforms TestComplete (TC) 11 and 12 (but not TC 10 and older) MHT test reports into xUnit format so they can be integrated with Jenkins' JUnit features.\n\nIt has been developed as a xUnit Plugin extension: https://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin\n\nThis plugin is an enhancement of the xUnit Plugin found at wiki site: https://wiki.jenkins.io/display/JENKINS/TestComplete+11+and+12+xUnit+Plugin\n\nIf you want to Transform TC 10 and older see: xUnit Plugin extension: http://wiki.jenkins-ci.org/display/JENKINS/TestComplete+xUnit+Plugin \n (Distance: 1.3765)",
    "rank_3_distance": 1.3765
  },
  {
    "step": "{'content': \"publishHTML target: [\\n              reportTitles: 'clang static analyzer',\\n              allowMissing: false,\\n              alwaysLinkToLastBuild: true,\\n              keepAll: true,\\n              reportDir: 'build/scan-build/report_latest',\\n              reportFiles: '*',\\n              reportName: 'Clang Static Analyzer'\\n            ]\"}",
    "rank_1_name": "# seleniumhtmlreport",
    "rank_1_content": "# seleniumhtmlreport\n\nThis plugin visualizes the results of selenium tests.\n\n# Description\n\nThe seleniumhtmlreport plugin scans the selenium test results directory\nfor html files created by selenium tests and creates an overview of the\nexecuted tests.\n\nAll html result files will be copied into the subdirectory\n\"seleniumReports\" of the build root directory.\n\nAll results will be read from the html result files. In the overview is\nfor each html result file a link to it.\n\n![seleniumhtmlreport_overview](docs/images/seleniumhtmlreport_overview.jpg)\n\n## Configuration\n\nIf you activate the Post-Build-Action \"Publish Selenium Html Report\" you\ncan insert the location of your selenium test results into the text\ninput box with the label \"Selenium tests results location\". Insert a\nlocation relative to your workspace.\n\n![seleniumhtmlreport_config](docs/images/seleniumhtmlreport_config.jpg)\n\n# Feedback\n\nThis plugin is developed and maintained by Marco Machmer with kind\nsupport from [Abas Software AG](http://www.abas.de/). Please feel free\nto contact me for feedback. If you have suggestions for new features or\nyou've found a bug, please use the [issue\ntracker](https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20seleniumhtmlreport-plugin). \n (Distance: 1.1120)",
    "rank_1_distance": 1.112,
    "rank_2_name": "# RadarGun Plugin for Jenkins to report and visualize performance tests",
    "rank_2_content": "# RadarGun Plugin for Jenkins to report and visualize performance tests\n\nRadarGun (https://github.com/SoerenHenning/RadarGun) is a performance testing framework developed at the university of Kiel.\n\nTo use this RadarGun in Jenkins' build pipeline, we developed this plugin. \n\n\n\n## Usage\n\nThis plugin can be activated as post build step.\n\n\n\nIMPORTANT!! RadarGun itself has to be started via a shell script. Therefor, create a shell script build step and copy:\n\n```\n\njava -cp ${JENKINS_HOME}/plugins/radargun-reporting/WEB-INF/lib/radargun-2.0.0-SNAPSHOT.jar:${WORKSPACE}/target/benchmarks.jar radargun.RadarGun --cp-assertions assertions/assertions.yaml --jmh-output\n\n```\n\n\n\n## Configuration\n\nFollowing soon.\n\n\n\n## Build\n\n- via Maven 3.3 or above (necessary for pom-less building):\n\n```\n\nmvn clean package\n\n``` \n (Distance: 1.1655)",
    "rank_2_distance": 1.1655,
    "rank_3_name": "# Publish Over FTP Plugin for Jenkins",
    "rank_3_content": "# Publish Over FTP Plugin for Jenkins\n\nSend build artifacts over FTP.\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/publish-over-ftp.svg)](https://plugins.jenkins.io/publish-over-ftp)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/publish-over-ftp.svg?color=blue)](https://plugins.jenkins.io/publish-over-ftp)\n\n## Publish Over Plugin\n\n<!-- TODO: Update link once the Publish Over documentation is moved to GitHub -->\n\nPlease read [Publish Over Plugin](https://wiki.jenkins.io/display/JENKINS/Publish+Over) documentation first.\nCommon configuration options will not be repeated here.\n\n\n## Features\n\n-   Send files to FTP servers\n-   The plugin is \"promotion aware\" see\n    [Promotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n-   Publish to multiple servers in the \"Post-build Actions\"\n-   Transfer complete directory structures, partial structures or just\n    files\n-   Option to delete all files in the remote directory before publishing\n-   Use passive (PASV) or active (PORT) transfers\n-   FTP can be used as a build step during the build process\n-   Passwords are encrypted in the configuration files and in the UI\n\n## Configure\n\n#### Create host configurations in the main Jenkins configuration\n\nFrom the Jenkins home page, click \"Manage Jenkins\" and the click on\n\"Configure System\"\n\nFind the FTP section (as below) and click on the \"Add\" button next to\n\"FTP Servers\"  \n![](docs/images/ftp_global_unconfigured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_global_configured.PNG)\n\nFill in Name, Hostname, Username, Password and Remote Directory. [see\nPublish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n##### Advanced\n\nIf you click the \"Advanced...\" button for a configuration, then you will\nmake more configuration options available (see below)  \n![](docs/images/ftp_global_advanced.PNG)\n\n[see Publish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n###### Use active data mode\n\nBy default passive mode will be used to connect to the FTP Server.  \nIn passive mode the client initiates all connections which will allow\nthe client to send files through a firewall that has been configured to\nrefuse all inbound connections (and does not create dynamic rules).  \nIf you want to dissable passive mode, and have the client use PORT\ncommands for the server to connect to the client to retieve the files,\nthen you can check this box.\n\n###### Don't make nested dirs\n\nDo not try to create nested directories with a single MKD command  \nThe default behaviour when creating directories is to try to create the\ntarget directory with single command, even if it is nested. If this\nfails, the plugin will fall back to creating each directory\nindividually. Some FTP servers, when asked to create nested directories\nwill respond with a success code, but will not create the directories\ncorrectly. This will result in directories being created in incorrect\nbranches of the directory tree.  \nThis option will not prevent the creation of nested directories, it is\njust a fix for badly behaved FTP servers.\n\n##### Click \"Test Configuration\".\n\n##### Add more server configurations (if required)\n\n##### Save\n\n#### Configure a job to Publish Over FTP\n\nOpen a jobs main page and then click \"Configure\" from the left hand\nmenu.\n\nFind the \"Send build artifacts over FTP\" checkbox in the \"Post-build\nActions\" section (as below) and click in the box.  \n![](docs/images/ftp_publish_not_configured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_configure.png)\n\n[see Publish Over ... for common options for\nServer](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-server)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\nSource files\n\nThe build will fail if you do not select any Source files to transfer\n\n##### Advanced (Transfer Sets)\n\nIf you click the \"Advanced...\" button for a Transfer Set, then you will\nmake more configuration options available (see below)\n\n![](docs/images/screenshot18.png)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\n###### ASCII mode\n\nTransfer the files using ASCII mode.  \nThis means that during the transfer, new lines and carriage returns will\nbe converted from the format used on the client operating system to the\nformat used on the servers operating system.  \nDo not use this option if your Source files pattern will match any\nbinary files, as there is a good chance that binary files will be\ncorrupted during transfer.\n\n###### Clean remote\n\nDelete all files and directories from the remote directory before\nuploading the new files.\n\n##### Advanced (Publisher)\n\nIf you click the \"Advanced...\" button that is immediately below the \"Add\nServer\" button, then you will make more configuration options available\n(see below)  \n![](docs/images/ftp_publish_publisher_advanced.PNG)\n\n[see Publish Over ... for common options for\nPublisher](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-publisher)\n\n#### Options to override the default Promotion behaviour\n\nIf you are configuring an action in a promotion, new options will become\navailable.  \n![](docs/images/ftp_promotion.PNG)\n\n[see Publish Over ... for common options for\nPromotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n\n## Release Notes\n\nSee the [changelog](./CHANGELOG.md). \n (Distance: 1.1829)",
    "rank_3_distance": 1.1829
  },
  {
    "step": "{'content': \"publishHTML target: [\\n              reportTitles: 'Cppcheck',\\n              allowMissing: false,\\n              alwaysLinkToLastBuild: true,\\n              keepAll: true,\\n              reportDir: 'build/cppcheck/',\\n              reportFiles: '*',\\n              reportName: 'Cppcheck'\\n            ]\"}",
    "rank_1_name": "# Publish Over FTP Plugin for Jenkins",
    "rank_1_content": "# Publish Over FTP Plugin for Jenkins\n\nSend build artifacts over FTP.\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/publish-over-ftp.svg)](https://plugins.jenkins.io/publish-over-ftp)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/publish-over-ftp.svg?color=blue)](https://plugins.jenkins.io/publish-over-ftp)\n\n## Publish Over Plugin\n\n<!-- TODO: Update link once the Publish Over documentation is moved to GitHub -->\n\nPlease read [Publish Over Plugin](https://wiki.jenkins.io/display/JENKINS/Publish+Over) documentation first.\nCommon configuration options will not be repeated here.\n\n\n## Features\n\n-   Send files to FTP servers\n-   The plugin is \"promotion aware\" see\n    [Promotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n-   Publish to multiple servers in the \"Post-build Actions\"\n-   Transfer complete directory structures, partial structures or just\n    files\n-   Option to delete all files in the remote directory before publishing\n-   Use passive (PASV) or active (PORT) transfers\n-   FTP can be used as a build step during the build process\n-   Passwords are encrypted in the configuration files and in the UI\n\n## Configure\n\n#### Create host configurations in the main Jenkins configuration\n\nFrom the Jenkins home page, click \"Manage Jenkins\" and the click on\n\"Configure System\"\n\nFind the FTP section (as below) and click on the \"Add\" button next to\n\"FTP Servers\"  \n![](docs/images/ftp_global_unconfigured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_global_configured.PNG)\n\nFill in Name, Hostname, Username, Password and Remote Directory. [see\nPublish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n##### Advanced\n\nIf you click the \"Advanced...\" button for a configuration, then you will\nmake more configuration options available (see below)  \n![](docs/images/ftp_global_advanced.PNG)\n\n[see Publish Over ... for common options for Host\nConfigurations](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-host)\n\n###### Use active data mode\n\nBy default passive mode will be used to connect to the FTP Server.  \nIn passive mode the client initiates all connections which will allow\nthe client to send files through a firewall that has been configured to\nrefuse all inbound connections (and does not create dynamic rules).  \nIf you want to dissable passive mode, and have the client use PORT\ncommands for the server to connect to the client to retieve the files,\nthen you can check this box.\n\n###### Don't make nested dirs\n\nDo not try to create nested directories with a single MKD command  \nThe default behaviour when creating directories is to try to create the\ntarget directory with single command, even if it is nested. If this\nfails, the plugin will fall back to creating each directory\nindividually. Some FTP servers, when asked to create nested directories\nwill respond with a success code, but will not create the directories\ncorrectly. This will result in directories being created in incorrect\nbranches of the directory tree.  \nThis option will not prevent the creation of nested directories, it is\njust a fix for badly behaved FTP servers.\n\n##### Click \"Test Configuration\".\n\n##### Add more server configurations (if required)\n\n##### Save\n\n#### Configure a job to Publish Over FTP\n\nOpen a jobs main page and then click \"Configure\" from the left hand\nmenu.\n\nFind the \"Send build artifacts over FTP\" checkbox in the \"Post-build\nActions\" section (as below) and click in the box.  \n![](docs/images/ftp_publish_not_configured.PNG)\n\nYou should now have the configuration options as below  \n![](docs/images/ftp_configure.png)\n\n[see Publish Over ... for common options for\nServer](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-server)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\nSource files\n\nThe build will fail if you do not select any Source files to transfer\n\n##### Advanced (Transfer Sets)\n\nIf you click the \"Advanced...\" button for a Transfer Set, then you will\nmake more configuration options available (see below)\n\n![](docs/images/screenshot18.png)\n\n[see Publish Over ... for common options for Transfer\nSets](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-transfer)\n\n###### ASCII mode\n\nTransfer the files using ASCII mode.  \nThis means that during the transfer, new lines and carriage returns will\nbe converted from the format used on the client operating system to the\nformat used on the servers operating system.  \nDo not use this option if your Source files pattern will match any\nbinary files, as there is a good chance that binary files will be\ncorrupted during transfer.\n\n###### Clean remote\n\nDelete all files and directories from the remote directory before\nuploading the new files.\n\n##### Advanced (Publisher)\n\nIf you click the \"Advanced...\" button that is immediately below the \"Add\nServer\" button, then you will make more configuration options available\n(see below)  \n![](docs/images/ftp_publish_publisher_advanced.PNG)\n\n[see Publish Over ... for common options for\nPublisher](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-publisher)\n\n#### Options to override the default Promotion behaviour\n\nIf you are configuring an action in a promotion, new options will become\navailable.  \n![](docs/images/ftp_promotion.PNG)\n\n[see Publish Over ... for common options for\nPromotions](https://wiki.jenkins.io/display/JENKINS/Publish+Over#PublishOver-promotions)\n\n## Release Notes\n\nSee the [changelog](./CHANGELOG.md). \n (Distance: 1.0498)",
    "rank_1_distance": 1.0498,
    "rank_2_name": "# seleniumhtmlreport",
    "rank_2_content": "# seleniumhtmlreport\n\nThis plugin visualizes the results of selenium tests.\n\n# Description\n\nThe seleniumhtmlreport plugin scans the selenium test results directory\nfor html files created by selenium tests and creates an overview of the\nexecuted tests.\n\nAll html result files will be copied into the subdirectory\n\"seleniumReports\" of the build root directory.\n\nAll results will be read from the html result files. In the overview is\nfor each html result file a link to it.\n\n![seleniumhtmlreport_overview](docs/images/seleniumhtmlreport_overview.jpg)\n\n## Configuration\n\nIf you activate the Post-Build-Action \"Publish Selenium Html Report\" you\ncan insert the location of your selenium test results into the text\ninput box with the label \"Selenium tests results location\". Insert a\nlocation relative to your workspace.\n\n![seleniumhtmlreport_config](docs/images/seleniumhtmlreport_config.jpg)\n\n# Feedback\n\nThis plugin is developed and maintained by Marco Machmer with kind\nsupport from [Abas Software AG](http://www.abas.de/). Please feel free\nto contact me for feedback. If you have suggestions for new features or\nyou've found a bug, please use the [issue\ntracker](https://issues.jenkins.io/issues/?jql=project%20%3D%20JENKINS%20AND%20component%20%3D%20seleniumhtmlreport-plugin). \n (Distance: 1.0837)",
    "rank_2_distance": 1.0837,
    "rank_3_name": "# lighthouse-report-plugin",
    "rank_3_content": "# lighthouse-report-plugin\n\nA simple plugin that displays a lighthouse report inside jenkins.\n\nYou can use archive() function to save files, but you cannot view any html with javascript for security reasons.\n\nThis will keep the html inside the plugin, but the data is pull in from your build result.\n\nReport Name can also be specified to generate Lighthouse report with a specific name, supports multiple reports.\n\n## Usage\n\n```groovy\n// Generate your lighthouse report.\nnode {\n   sh 'npx lighthouse-ci https://www.example.com --jsonReport --report=.'\n    lighthouseReport('./report.json')\n}\n\n//Generate your lighthouse report with specific report name\nnode {\n   sh 'npx lighthouse-ci https://www.example.com --jsonReport --report=.'\n    lighthouseReport file: './report.json', name: 'My Report'\n}\n```\n\n\n## Screenshot\n\n![Screenshot](./screenshot.png) \n (Distance: 1.1332)",
    "rank_3_distance": 1.1332
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'build/px4_sitl_default/docs'\", 'raw_block': \"archiveArtifacts(artifacts: 'airframes.md, airframes.xml')\\n              stash includes: 'airframes.md, airframes.xml', name: 'metadata_airframes'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'build/px4_sitl_default/docs'\", 'raw_block': \"archiveArtifacts(artifacts: 'parameters.md, parameters.xml')\\n              stash includes: 'parameters.md, parameters.xml', name: 'metadata_parameters'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'build/px4_sitl_default/docs'\", 'raw_block': \"archiveArtifacts(artifacts: 'modules/*.md')\\n              stash includes: 'modules/*.md', name: 'metadata_module_documentation'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': \"'Tools/uorb_graph'\", 'raw_block': \"archiveArtifacts(artifacts: 'graph_px4_sitl.json')\\n              stash includes: 'graph_px4_sitl.json', name: 'uorb_graph'\"}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_airframes'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_parameters'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_module_documentation'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]\", 'raw_block': 'sh(\\'git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/Devguide.git\\')\\n              sh(\\'cp airframes.md Devguide/en/airframes/airframe_reference.md\\')\\n              sh(\\'cp parameters.md Devguide/en/advanced/parameter_reference.md\\')\\n              sh(\\'cp -R modules/*.md Devguide/en/middleware/\\')\\n              sh(\\'cd Devguide; git status; git add .; git commit -a -m \"Update PX4 Firmware metadata `date`\" || true\\')\\n              sh(\\'cd Devguide; git push origin master || true\\')\\n              sh(\\'rm -rf Devguide\\')'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_airframes'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_parameters'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]\", 'raw_block': 'sh(\\'git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/px4_user_guide.git\\')\\n              sh(\\'cp airframes.md px4_user_guide/en/airframes/airframe_reference.md\\')\\n              sh(\\'cp parameters.md px4_user_guide/en/advanced_config/parameter_reference.md\\')\\n              sh(\\'cd px4_user_guide; git status; git add .; git commit -a -m \"Update PX4 Firmware metadata `date`\" || true\\')\\n              sh(\\'cd px4_user_guide; git push origin master || true\\')\\n              sh(\\'rm -rf px4_user_guide\\')'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_airframes'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_parameters'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]\", 'raw_block': 'sh(\\'git clone https://${GIT_USER}:${GIT_PASS}@github.com/mavlink/qgroundcontrol.git\\')\\n              sh(\\'cp airframes.xml qgroundcontrol/src/AutoPilotPlugins/PX4/AirframeFactMetaData.xml\\')\\n              sh(\\'cp parameters.xml qgroundcontrol/src/FirmwarePlugin/PX4/PX4ParameterFactMetaData.xml\\')\\n              sh(\\'cd qgroundcontrol; git status; git add .; git commit -a -m \"Update PX4 Firmware metadata `date`\" || true\\')\\n              sh(\\'cd qgroundcontrol; git push origin master || true\\')\\n              sh(\\'rm -rf qgroundcontrol\\')'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]\", 'raw_block': 'sh(\"git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/px4_msgs.git\")\\n              \\n              sh(\\'python msg/tools/uorb_to_ros_msgs.py msg/ px4_msgs/msg/\\')\\n              sh(\\'cd px4_msgs; git status; git add .; git commit -a -m \"Update message definitions `date`\" || true\\')\\n              sh(\\'cd px4_msgs; git push origin master || true\\')\\n              \\n              sh(\\'cd px4_msgs; git checkout ros1\\')\\n              sh(\\'python msg/tools/uorb_to_ros_msgs.py msg/ px4_msgs/msg/\\')\\n              sh(\\'cd px4_msgs; git status; git add .; git commit -a -m \"Update message definitions `date`\" || true\\')\\n              sh(\\'cd px4_msgs; git push origin ros1 || true\\')\\n              sh(\\'rm -rf px4_msgs\\')'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'withCredentials', 'raw_args': \"[usernamePassword(credentialsId: 'px4buildbot_github_personal_token', passwordVariable: 'GIT_PASS', usernameVariable: 'GIT_USER')]\", 'raw_block': 'sh(\"git clone https://${GIT_USER}:${GIT_PASS}@github.com/PX4/px4_ros_com.git -b ${BRANCH_NAME}\")\\n              \\n              sh(\\'./msg/tools/uorb_to_ros_rtps_ids.py -i msg/tools/uorb_rtps_message_ids.yaml -o px4_ros_com/templates/uorb_rtps_message_ids.yaml\\')\\n              sh(\\'cd px4_ros_com; git status; git add .; git commit -a -m \"Update uORB RTPS ID map `date`\" || true\\')\\n              sh(\\'cd px4_ros_com; git push origin ${BRANCH_NAME} || true\\')\\n              \\n              sh(\\'cp msg/tools/uorb_rtps_classifier.py px4_ros_com/scripts/uorb_rtps_classifier.py\\')\\n              sh(\\'cp msg/tools/generate_microRTPS_bridge.py px4_ros_com/scripts/generate_microRTPS_bridge.py\\')\\n              sh(\\'cp msg/tools/px_generate_uorb_topic_files.py px4_ros_com/scripts/px_generate_uorb_topic_files.py\\')\\n              sh(\\'cp msg/tools/px_generate_uorb_topic_helper.py px4_ros_com/scripts/px_generate_uorb_topic_helper.py\\')\\n              \\n              sh(\\'cp msg/templates/urtps/microRTPS_agent.cpp.em px4_ros_com/templates/microRTPS_agent.cpp.em\\')\\n              sh(\\'cp msg/templates/urtps/microRTPS_timesync.cpp.em px4_ros_com/templates/microRTPS_timesync.cpp.em\\')\\n              sh(\\'cp msg/templates/urtps/microRTPS_timesync.h.em px4_ros_com/templates/microRTPS_timesync.h.em\\')\\n              sh(\\'cp msg/templates/urtps/microRTPS_transport.cpp px4_ros_com/templates/microRTPS_transport.cpp\\')\\n              sh(\\'cp msg/templates/urtps/microRTPS_transport.h px4_ros_com/templates/microRTPS_transport.h\\')\\n              sh(\\'cp msg/templates/urtps/Publisher.cpp.em px4_ros_com/templates/Publisher.cpp.em\\')\\n              sh(\\'cp msg/templates/urtps/Publisher.h.em px4_ros_com/templates/Publisher.h.em\\')\\n              sh(\\'cp msg/templates/urtps/Subscriber.cpp.em px4_ros_com/templates/Subscriber.cpp.em\\')\\n              sh(\\'cp msg/templates/urtps/Subscriber.h.em px4_ros_com/templates/Subscriber.h.em\\')\\n              sh(\\'cp msg/templates/urtps/RtpsTopics.cpp.em px4_ros_com/templates/RtpsTopics.cpp.em\\')\\n              sh(\\'cp msg/templates/urtps/RtpsTopics.h.em px4_ros_com/templates/RtpsTopics.h.em\\')\\n              sh(\\'cd px4_ros_com; git status; git add .; git commit -a -m \"Update uORB RTPS script tools `date`\" || true\\')\\n              sh(\\'cd px4_ros_com; git push origin ${BRANCH_NAME} || true\\')\\n              sh(\\'rm -rf px4_msgs\\')'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4540)",
    "rank_1_distance": 1.454,
    "rank_2_name": "# codehealth",
    "rank_2_content": "# codehealth \n (Distance: 1.5044)",
    "rank_2_distance": 1.5044,
    "rank_3_name": "# Icedq",
    "rank_3_content": "# Icedq\nMy Plugin \n (Distance: 1.5737)",
    "rank_3_distance": 1.5737
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_airframes'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'unstash', 'raw_args': 'metadata_parameters'}",
    "rank_1_name": "gssh",
    "rank_1_content": "gssh\n==== \n (Distance: 1.3310)",
    "rank_1_distance": 1.331,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.5034)",
    "rank_2_distance": 1.5034,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5133)",
    "rank_3_distance": 1.5133
  },
  {
    "step": "{'name': 'withAWS', 'raw_args': \"credentials: 'px4_aws_s3_key', region: 'us-east-1'\", 'raw_block': \"s3Upload(acl: 'PublicRead', bucket: 'px4-travis', file: 'airframes.xml', path: 'Firmware/master/')\\n              s3Upload(acl: 'PublicRead', bucket: 'px4-travis', file: 'parameters.xml', path: 'Firmware/master/')\"}",
    "rank_1_name": "# codehealth",
    "rank_1_content": "# codehealth \n (Distance: 1.5827)",
    "rank_1_distance": 1.5827,
    "rank_2_name": "# Blue Ocean Autofavorite plugin",
    "rank_2_content": "# Blue Ocean Autofavorite plugin\n\nThis plugin discovers new multibranch job branches being created\nand automatically favorites the job for the user that created it.\n\nIt is intended that this plugin is used in conjunction with [Blue Ocean](https://jenkins.io/projects/blueocean/)\n\n## Changelog\nFor recent versions, see [GitHub Releases](https://github.com/jenkinsci/blueocean-autofavorite-plugin/releases)\n\nFor versions 1.2.4 and older, see [CHANGELOG.md](CHANGELOG.md) \n (Distance: 1.5854)",
    "rank_2_distance": 1.5854,
    "rank_3_name": "Test",
    "rank_3_content": "Test \n (Distance: 1.5910)",
    "rank_3_distance": 1.591
  },
  {
    "step": "{'name': 'script', 'raw_args': 'def gitCommit = sh(returnStdout: true, script: \\'git rev-parse --short HEAD\\').trim()\\n                    def imageName = \"${env.IMAGE_NAME}:${gitCommit}\"\\n\\n                    withCredentials([usernamePassword(credentialsId: \"${env.DOCKER_REGISTRY_CREDENTIALS}\", passwordVariable: \\'DOCKER_PASSWORD\\', usernameVariable: \\'DOCKER_USERNAME\\')]) {\\n                        sh \"echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin ${env.DOCKER_REGISTRY_URL}\"\\n                    }\\n\\n                    sh \"docker build -t ${imageName} .\"\\n\\n                    sh \"docker push ${imageName}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': '**/build/libs/*.jar'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh 'sops -d --output-type json ./secrets/encrypted/variables.json > ./secrets/decrypted/variables.json'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh 'docker-compose -f docker-compose.ci.yml up --abort-on-container-exit'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh 'docker-compose build web'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'docker.withRegistry(\\'\\', registryCredential) {\\n                        sh \"docker push $dockerImage\"\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': \"sh 'docker-compose up -d'\"}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'dir', 'raw_args': '\"go/\"', 'raw_block': 'bat \"go test ./...\"\\n                            bat \"go build -mod=readonly -o ..\\\\\\\\.ci_bin\\\\\\\\dolt.exe ./cmd/dolt/.\"\\n                            bat \"copy /Y ..\\\\\\\\.ci_bin\\\\\\\\dolt.exe ..\\\\\\\\.ci_bin\\\\\\\\dolt\"\\n                            bat \"go build -mod=readonly -o ..\\\\\\\\.ci_bin\\\\\\\\git-dolt.exe ./cmd/git-dolt/.\"\\n                            bat \"copy /Y ..\\\\\\\\.ci_bin\\\\\\\\git-dolt.exe ..\\\\\\\\.ci_bin\\\\\\\\git-dolt\"\\n                            bat \"go build -mod=readonly -o ..\\\\\\\\.ci_bin\\\\\\\\git-dolt-smudge.exe ./cmd/git-dolt-smudge/.\"\\n                            bat \"copy /Y ..\\\\\\\\.ci_bin\\\\\\\\git-dolt-smudge.exe ..\\\\\\\\.ci_bin\\\\\\\\git-dolt-smudge\"\\n                            bat \"go build -mod=readonly -o ..\\\\\\\\.ci_bin\\\\\\\\remotesrv.exe ./utils/remotesrv/.\"\\n                            bat \"copy /Y ..\\\\\\\\.ci_bin\\\\\\\\remotesrv.exe ..\\\\\\\\.ci_bin\\\\\\\\remotesrv\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': '\"bats/\"', 'raw_block': 'bat \"dolt config --global --add user.name \\\\\"Liquidata Jenkins\\\\\"\"\\n                            bat \"dolt config --global --add user.email \\\\\"jenkins@liquidata.co\\\\\"\"\\n                            bat \"C:\\\\\\\\wsl.exe bats `pwd`\"'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'dir', 'raw_args': '\"./\"', 'raw_block': 'bat(returnStatus: true, script: \"setLocal EnableDelayedExpansion && pushd %LOCALAPPDATA%\\\\\\\\Temp && del /q/f/s .\\\\\\\\* >nul 2>&1 && rmdir /s/q . >nul 2>&1 && popd\")\\n                            bat(returnStatus: true, script: \"setLocal EnableDelayedExpansion && pushd C:\\\\\\\\batstmp && del /q/f/s .\\\\\\\\* >nul 2>&1 && rmdir /s/q . >nul 2>&1 && popd\")'}",
    "rank_1_name": "Test",
    "rank_1_content": "Test \n (Distance: 1.4164)",
    "rank_1_distance": 1.4164,
    "rank_2_name": "README",
    "rank_2_content": "README \n (Distance: 1.4643)",
    "rank_2_distance": 1.4643,
    "rank_3_name": "# pipeline-reporter",
    "rank_3_content": "# pipeline-reporter \n (Distance: 1.5500)",
    "rank_3_distance": 1.55
  },
  {
    "step": "{'name': 'cleanWs', 'raw_args': ''}",
    "rank_1_name": "# AWS S3 Cleaner",
    "rank_1_content": "# AWS S3 Cleaner\n\nPlugin to clean your S3 Buckets \n (Distance: 1.3155)",
    "rank_1_distance": 1.3155,
    "rank_2_name": "gssh",
    "rank_2_content": "gssh\n==== \n (Distance: 1.4091)",
    "rank_2_distance": 1.4091,
    "rank_3_name": "# Distributed Workspace Clean plugin",
    "rank_3_content": "# Distributed Workspace Clean plugin\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/hudson-wsclean-plugin.svg)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/hudson-wsclean-plugin.svg?color=blue)](https://plugins.jenkins.io/hudson-wsclean-plugin)\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins/wsclean-plugin/master)](https://ci.jenkins.io/job/Plugins/job/wsclean-plugin/job/master/)\n\n## Overview\n\nThe\nDistributed Workspace Clean plugin\nis used to remove unnecessary old build workspaces from nodes used by previous builds.\nThis allows us to keep the overall disk usage down on long-lifetime nodes that do lots of different builds.\nThe \"Workspace\" link for a job only ever points to the most recently used node,\nso that means that all nodes except one could safely delete their unused workspaces\n... but Jenkins does not do that by default.\n\nThis plugin is designed to clean the build's workspace in all nodes _except_ the one(s) where it is currently running.\n\ne.g. if you have 100 jobs that typically uses 1gig of disk to build,\nand you have 100 nodes that can build those jobs,\nthen _without this plugin_ you will eventually end up with a copy of every workspace on every node,\n10000gigs total.\nHowever, with this plugin active on every build,\nyou'd only keep one workspace for each job across all the nodes,\n100gigs total, which is a lot less data to back up etc.\n\n* If you have a lot of static nodes then you may find this useful.\n* If you only have dynamic cloud-provided disposable nodes then you probably won't.\n\n**Note:** This plugin was originally developed before pipeline builds existed.\nIt's intended for use with \"classic\" builds.\n\n## Usage\n\n### How to use it\n\nThis functionality can be enabled by ticking the box in the \"Build Environment\" section of a job's configuration.\n\n![](docs/images/job-configuration-unexpanded.png)\n\n... and optionally expanding the \"Advanced\" box and ticking the \"clean before\" checkbox\nif you would prefer the clean to happen at the start of the build instead of at the end (the default).\n\n![](docs/images/job-configuration-expanded.png)\n\n### How to avoid it\n\nIf you have nodes that should never have their workspaces cleaned\n(by this plugin)\nthen you can add a Node Property specifying\n(in the node's configuration page)\nthat this plugin should always skip them:\n\n![](docs/images/node-properties.png)\n\nFor example,\nnodes that are dynamically created\n(and deleted)\nby a cloud plugin are unlikely to require cleaning\n(as they'll be destroyed before they have a chance to build up much mess),\nso it's useful to add this Node Property to the template(s) from which such nodes are created.\n\nNote:\nIf you can't add a node property due to limitations on the type of node\n(e.g. not all cloud plugins support node properties),\nyou can achieve the same effect using the \"Nodes to ignore\" field in the global configuration.\n\n### How to control it\n\nFurther options to control which nodes are selected for cleanup can be found in the global configuration page\n(Manage Jenkins -> Configure System):\n\n![](docs/images/global-configuration.png)\n\nThe default setting is to \"clean nodes that could be used\"\n(for the build),\nwhich preserves the behavior of plugin version 1.0.5 and earlier\n(where the plugin looks at what other nodes could have been used to run the build,\nand cleans the workspace that would've been used on each of those).\nAs of version 1.0.6 onwards, you can choose to clean only where previous completed builds had run, or both.\n\nFor further details, see the help text associated with each configuration option.\n\n## See also\n* [Software licence](LICENSE)\n* Support and [contribution guide](CONTRIBUTING.md)\n* [Changelog](CHANGELOG.md) \n (Distance: 1.4115)",
    "rank_3_distance": 1.4115
  },
  {
    "step": "{'content': 'setBuildStatus(\"Build succeeded\", \"SUCCESS\");'}",
    "rank_1_name": "figlet-buildstep-plugin",
    "rank_1_content": "figlet-buildstep-plugin\n=======================\n\nAllows you to output a simple banner message via build step. \n (Distance: 0.9944)",
    "rank_1_distance": 0.9944,
    "rank_2_name": "# Party Parrot Status for Jenkins",
    "rank_2_content": "# Party Parrot Status for Jenkins\n\n\n\nProviding a party parrot look to Jenkins Status indicators. \n\n\n\n![Example](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/example.gif)\n\n\n\nStatus | Build Finished | Build in Progress\n\n------ | -------------- | -----------------\n\nNo Build | ![No Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/nobuilt.png) | ![No Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/nobuilt_anime.gif)\n\nDisabled Build | ![Disabled Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/disabled.png) | ![Disabled Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/disabled_anime.gif)\n\nSuccessful Build | ![Successful Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/blue.png) | ![Successful Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/blue_anime.gif)\n\nUnstable Build | ![Unstable Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/yellow.png) | ![Unstable Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/yellow_anime.gif)\n\nFailed Build | ![Failed Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/red.png) | ![Failed Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/red_anime.gif)\n\nAborted Build | ![Aborted Build](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/aborted.png) | ![Aborted Build, new Build in Progress](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/aborted_anime.gif)\n\n\n\n## Project Icons\n\n\n\nAction | Icon\n\n------ | ----\n\nBuild Now | ![Build Now](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/clock.png)\n\nDelete Project | ![Delete Project](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/edit-delete.png)\n\nWorkspace | ![Workspace](https://raw.githubusercontent.com/jenkinsci/partyparrotstatus-plugin/master/src/main/webapp/24x24/folder.png) \n (Distance: 1.0893)",
    "rank_2_distance": 1.0893,
    "rank_3_name": "# Build Description plugin",
    "rank_3_content": "# Build Description plugin\nBuild Description plugin allows you to add description for every build from a text file you define.\nInstall, define a file, enjoy. See console log for warns and errors. \n (Distance: 1.0999)",
    "rank_3_distance": 1.0999
  },
  {
    "step": "{'content': 'setBuildStatus(\"Build not Successfull\", \"FAILURE\");'}",
    "rank_1_name": "figlet-buildstep-plugin",
    "rank_1_content": "figlet-buildstep-plugin\n=======================\n\nAllows you to output a simple banner message via build step. \n (Distance: 1.0605)",
    "rank_1_distance": 1.0605,
    "rank_2_name": "Disable Failed Job Plugin",
    "rank_2_content": "Disable Failed Job Plugin\n==========================\n\nThis Plugin disable Job when Build failed.<br>\nPlease use this when you want to prevent the jobs that are regularly performed, fail in a row.\n\n„Éì„É´„Éâ„ÅåÂ§±Êïó„Åó„ÅüÊôÇ„Å´„ÄÅ„Ç∏„Éß„Éñ„ÇíÁÑ°Âäπ„Å´„Åô„Çã„Éó„É©„Ç∞„Ç§„É≥„Åß„Åô„ÄÇ<br>\nÂÆöÊúüÂÆüË°å„Åï„Çå„Å¶„Çã„Ç∏„Éß„Éñ„Åå„ÄÅÁ∂ö„Åë„Å¶Â§±Êïó„Åô„Çã„Åì„Å®„ÇíÈò≤„ÅêÊôÇ„Å™„Å©„Å´Âà©Áî®„Åó„Å¶‰∏ã„Åï„ÅÑ„ÄÇ \n (Distance: 1.0912)",
    "rank_2_distance": 1.0912,
    "rank_3_name": "# Build Description plugin",
    "rank_3_content": "# Build Description plugin\nBuild Description plugin allows you to add description for every build from a text file you define.\nInstall, define a file, enjoy. See console log for warns and errors. \n (Distance: 1.0957)",
    "rank_3_distance": 1.0957
  },
  {
    "step": "{'name': 'emailext', 'raw_args': {'body': 'Something is wrong with ${env.BUILD_URL}', 'subject': 'Failed Pipeline: ${currentBuild.fullDisplayName}', 'to': '${DEFAULT_RECIPIENTS}'}}",
    "rank_1_name": "= Mock JavaMail",
    "rank_1_content": "= Mock JavaMail\n\n== What is this?\n\nTesting JavaMail applications is more difficult than necessary, because it involves a lot of setup outside the test program.\nDoing this correctly in a portable way so that anyone in your team can run the test is almost impossible.\n\nMock JavaMail comes to the rescue. This project takes advantage of pluggability in JavaMail, so that you can send/receive e-mails against a temporary in-memory \"mailbox\".\nFor example, when this JAR is in your classpath, the following code that normally sends e-mail to me actually just sends the e-mail to an in-memory mailbox:\n\n[source,java]\n----\nMimeMessage msg = new MimeMessage();\n...\nmsg.setRecipients(TO,\"first.last@example.com\");\nTransport.send(msg);\n----\n\nYou can access this e-mail programatically like this:\n\n[source,java]\n----\nList<Message> inbox = Mailbox.get(\"first.last@example.com\");\nassertEquals(inbox.size(),1); // was the e-mail really sent?\n----\n\nYou can also directly add messages to this list to emulate e-mails in the inbox, instead of using the JavaMail API.\nStaging e-mails like this is useful for testing the server.\n\nSimilarly you can access these e-mails programatically by using JavaMail, just like you normally do:\n\n[source,java]\n----\nSession session = ...;\nStore store = session.getStore(\"pop3\");  // imap would do, too\n\n// connect to first.last@example.com mailbox\nstore.connect(\"example.com\",\"first.last\",\"anything\");\n\nFolder folder = store.getFolder(\"INBOX\");\nfolder.open(Folder.READ_WRITE);\nMessage[] msgs = folder.getMessages();\n----\n\nThis allows you to test both the sending side and receiving side.\nAll you need to do is to drop the JAR in the classpath during the test.\n\n== Enforcing usage in tests\n\nThis library works thanks to the https://jakarta.ee/specifications/mail/2.1/apidocs/jakarta.mail/jakarta/mail/session#getProvider(java.lang.String)[JavaMail API] which allows to use different providers implementation to handle actual email sending.\n\nTo ensure it's used in your tests, you need to define the following Java system properties:\n\n`mail.smtp.class`:: set to `org.jvnet.mock_javamail.MockTransport`\n`mail.pop3.class`:: set to `org.jvnet.mock_javamail.MockStore`\n`mail.imap.class`:: set to `org.jvnet.mock_javamail.MockStore`\n\nThis can be done either manually or via a configuration in your test runner.\n\n=== Maven\n\nFor example, with Maven this can be done with the following configuration:\n\n[source,xml]\n----\n<project>\n  [‚Ä¶]\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-surefire-plugin</artifactId>\n        <configuration>\n          <systemPropertyVariables>\n            <mail.smtp.class>org.jvnet.mock_javamail.MockTransport</mail.smtp.class>\n            <mail.pop3.class>org.jvnet.mock_javamail.MockStore</mail.pop3.class>\n            <mail.imap.class>org.jvnet.mock_javamail.MockStore</mail.imap.class>\n          </systemPropertyVariables>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n----\n\n== Testing error handling behaviors\n\n`Mailbox` can be marked as 'error' programatically, which causes all sending/receiving operations to fail.\nThis can be used to test the error handling behavior of the application.\n\n[source,java]\n----\nMailbox inbox = Mailbox.get(\"first.last@example.com\");\ninbox.setError(true);\n----\n\n== Documentation\n\n* https://javadoc.jenkins.io/component/mock-javamail/[Javadoc]\n\n== Related projects\n\nIf this project isn't what you were looking for, see the following related projects:\n\n* http://subethasmtp.tigris.org/wiser.html[Wiser]\n* http://quintanasoft.com/dumbster/[dumbster]\n* https://aspirin.dev.java.net/[Aspirin] \n (Distance: 1.1084)",
    "rank_1_distance": 1.1084,
    "rank_2_name": "Creating templates",
    "rank_2_content": "Creating templates\n------------------\nEdit e-mail in Thunderbird, save it as a template, then use \"Save As...\" to export it into the *.eml format.\n\nSetting up outgoing e-mail\n--------------------------\nKohsuke has been doing '-Dmail.smtp.port=1025' and 'ssh -L 1025:localhost:25 jenkins-ci.org' to route e-mails\nthrough jenkins-ci.org SMTP server.\n\nUsage\n-----\nPut all *.eml files that has the subject line like this in a single folder, and run this program\nspecifying the said directory as the argument.\n\n  Receipt [$123.45] By: Kohsuke Kawaguchi [kk@kohsuke.org]\n\nThe program will update Google Docs and send thank you e-mail. \n (Distance: 1.1156)",
    "rank_2_distance": 1.1156,
    "rank_3_name": "# Jakarta Mail API Plugin",
    "rank_3_content": "# Jakarta Mail API Plugin\n\nThis plugin provides the [Jakarta Mail](https://github.com/eclipse-ee4j/mail) API for other plugins. \n (Distance: 1.1544)",
    "rank_3_distance": 1.1544
  },
  {
    "step": "{'name': 'script', 'raw_args': 'docker.withRegistry(\\'https://registry.hub.docker.com/v1/repositories/woped\\', registryCredential) {\\n                            def dockerImage = docker.build(\"woped/text2process-stanford:$DOCKER_VERSION\")\\n                            def dockerImageLatest = docker.build(\"woped/text2process-stanford:latest\")\\n                            dockerImage.push();\\n                            dockerImageLatest.push();\\n                        }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'def remote = [:]\\n                    remote.name = \"woped\"\\n                    remote.host = \"woped.dh-karlsruhe.de\"\\n                    remote.allowAnyHosts = true\\n                    remote.sudo = true\\n                    remote.pty = true\\n\\n                    withCredentials([usernamePassword(credentialsId: \\'sshUserWoPeD\\', passwordVariable: \\'password\\', usernameVariable: \\'userName\\')]) {\\n                        remote.user = userName\\n                        remote.password = password\\n                    }\\n\\n                    stage(\\'Remote SSH\\') {\\n                        sshCommand remote: remote, command: \"sudo docker-compose -f /usr/local/bin/woped-webservice/docker-compose.yml pull t2p-stanford\", sudo: true\\n                        sshCommand remote: remote, command: \"sudo docker-compose -f /usr/local/bin/woped-webservice/docker-compose.yml up -d\", sudo: true\\n                        sshCommand remote: remote, command: \"sudo docker image prune -f\", sudo: true\\n                    }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'junit', 'raw_args': {'testResults': '**/target/surefire-reports/*.xml'}}",
    "rank_1_name": "This plugin publishes test results of an execution of a testing tool in Jenkins.",
    "rank_1_content": "This plugin publishes test results of an execution of a testing tool in Jenkins.\n\n![](docs/images/xunit_features.JPG)\n\n# Features\n\n-   Records xUnit tests\n-   Mark the build unstable or fail according to threshold values\n\n# Supported tools\n\n## Embedded tools\n\n* JUnit (supported schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd) and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd))\n* [AUnit](http://libre.adacore.com/libre/tools/aunit/)\n* [MSTest](http://en.wikipedia.org/wiki/MSTest) (imported from [MSTest Plugin](https://github.com/jenkinsci/mstest-plugin))\n* [NUnit](http://www.nunit.org/index.php) (imported from [NUnit Plugin](https://github.com/jenkinsci/nunit-plugin))\n* [UnitTest++](http://unittest-cpp.sourceforge.net/)\n* [Boost Test Library](http://www.boost.org/doc/libs/1_39_0/libs/test/doc/html/index.html)\n* [PHPUnit](http://www.phpunit.de/)\n* [Free Pascal Unit](http://www.freepascal.org/units.html)\n* [CppUnit](https://sourceforge.net/projects/cppunit/)\n* [MbUnit](http://www.mbunit.com/)\n* [Googletest](http://code.google.com/p/googletest/)\n* [EmbUnit](http://embunit.sourceforge.net/embunit/index.html)\n* [gtester/glib](https://developer.gnome.org/glib/stable/gtester.html)\n* [QTestLib](http://doc.qt.io/qt-5/qtest-overview.html)\n\n## Other plugins as an extension of the xUnit plugin:\n\n* [Gallio](http://www.gallio.org/) ([Gallio plugin](https://github.com/jenkinsci/gallio-plugin))\n* [Parasoft C++Test tool](http://www.parasoft.com/jsp/products/cpptest.jsp) ([Cpptest Plugin](https://github.com/jenkinsci/parasoft-findings-plugin))\n* [JSUnit](http://www.jsunit.net/) ([JSUnit Plugin](https://github.com/jenkinsci/jsunit-plugin))\n* [JBehave](http://jbehave.org/reference/stable/hudson-plugin.html)\n* [TestComplete](http://smartbear.com/product/testcomplete/overview/) ([TestComplete xUnit Plugin](https://github.com/jenkinsci/testcomplete-xunit-plugin))\n\n## External contributions\n\nFor each xUnit tool, an embedded style sheet is used.\nHowever, the plugin also enables you to use a custom style sheet for your own tool such as :\n\n* [WebUI](http://github.com/versionone/webui-plugin)\n* [Ranorex](http://github.com/ranorex/ranorex-to-xunit)\n\n# Configuration\n\n## Job Configuration\n\n* Execute your testing tools manually or as a step of your build chain\n* Give a pattern that specifies your test results\n\n![](docs/images/xunit-conf-0.2.png)\n\n##  Provide User XSL\n\nIf you want to customise how a input report is transformed to a JUnit report of an existing tool type; xUnit provides a way to use your own XSL if placed at specific path.\nSpecify your XSLs in the `JENKINS_HOME/userContent` directory with the following convention:\n\n```\n$JENKINS_HOME/userContent/xunit/[toolName]/[version]/[any_name].xsl\n```\n\nFor example:\n\n```\n$JENKINS_HOME/userContent/xunit/AUnit/3.x/aunit-to-junit.xsl\n```\n\n**Note**: The tool name and the version are taken from the label in the combo box from the UI.\nIf the tool doesn't have a version (N/A), do not create a version directory.\n\n##  Custom Tool for unsupported formats\n\nXUnit supports a large number of report format, but not all.\nFor unsupported report type an user could provide an own stylesheet that convert the original report into a supported JUnit report.\n\nWhen choose the \"Custom Tool\" as tool type a path to the user XSL must be provided.\nThe path is relative and the plugin lookup the provided relative path using the following priority:\n\n1.  on Jenkins controller\n2.  on Jenkins agent\n3.  relative to workspace\n\nYou could also provide an URL to the stylesheet.\nIf the XSL file is placed in the `$JENKINS_HOME/userContent` folder, the file will be available under the URL\n`http(s)://$JENKINS_URL/userContent/<xsl file>`\n\n### Publish test result checks\n\nThis feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nWhen enabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\nIn the *Details* view of each check, test results will be displayed.\n\nIn order to enable the checks feature, set the property `skipPublishingChecks` to `false`\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  xunit (tools: [ BoostTest(pattern: 'integration/*.xml') ], skipPublishingChecks: false)\n}\n// no stage at all\nxunit (tools: [ BoostTest(pattern: 'boost/*.xml') ], skipPublishingChecks: false)\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    xunit (tools: [ MSTest(pattern: '**/*.trx') ], skipPublishingChecks: false)\n  }\n}\n```\n\n# xUnit Architecture\n\n## Global Architecture\n\nWhen this plugin is installed and configured, Jenkins can transform test result reports produced by different testing tools into JUnit test result format.\nThe JUnit tests can then be recorded by Jenkins.\nJenkins can provide useful information about test results, such as the historical test result trend, web UI for viewing test reports, tracking failures, and so on.\n\nUnder the hood, xUnit Jenkins plugin delegates processing to [DTKit](https://plugins.jenkins.io/dtkit/).\n\n![](docs/images/xunit_architecture.JPG)\n\n## DTKit Activities for XUnit\n\n![](docs/images/xunit_dtkit_activities.JPG)\n\n## DTKit Packaging\n\n## ![](docs/images/xunit_packaging.JPG)\n\n## Working with Pipelines\n\nIt is also possible to set an xUnit configuration in a pipeline job, but is somewhat more verbose.\n\nFor example, creating a boost pipeline (declarative) with the same\nconfiguration as above would be:\n\n**Example of pipeline**\n\n```groovy\npipeline {\n    agent any\n    stages {\n        stage('Test'){\n            steps {\n                sh \"run_tests.bash\"\n            }\n        }\n    }\n    post {\n        always{\n            xunit (\n                thresholds: [ skipped(failureThreshold: '0'), failed(failureThreshold: '0') ],\n                tools: [ BoostTest(pattern: 'boost/*.xml') ]\n            )\n        }\n    }\n }\n```\n\n# Releases\n\n**Moved to [GitHub repository page](https://github.com/jenkinsci/xunit-plugin/releases/)**\n\n## Version 2.2.5\n\n#### Improvements\n\n-   [JENKINS-51645](https://issues.jenkins-ci.org/browse/JENKINS-51645) Add\n    support for claims plugin in xUnit (nfalco79 to Arnaud)\n-   [JENKINS-24224](https://issues.jenkins-ci.org/browse/JENKINS-24224) improve\n    xunit plugin with test-stability plugin (nfalco79 to Arnaud)\n\n#### Bugfixes\n\n-   [JENKINS-53186](https://issues.jenkins-ci.org/browse/JENKINS-53186) NUnit\n    2.x test cases with result Error are reported as Success (nfalco79)\n-   Fix lookup strategy when user provides a custom stylesheets file to\n    override the embedded one (nfalco79)\n-   [JENKINS-53034](https://issues.jenkins-ci.org/browse/JENKINS-53034) Failure\n    when validate NUnit 2.x reports generated by NUnit 3.x console\n    (nfalco79)\n-   [JENKINS-53036](https://issues.jenkins-ci.org/browse/JENKINS-53036) NPE\n    after upgrade to 2.2.1 when run publisher (nfalco79)\n-   [JENKINS-52908](https://issues.jenkins-ci.org/browse/JENKINS-52908) Newlines\n    get ignored in failure message and possibly stack trace when\n    uploading xUnitDotNet xml results (nfalco79)\n\n## Version 2.1.0\n\n#### Improvements\n\n-   [JENKINS-32920](https://issues.jenkins-ci.org/browse/JENKINS-32920)\n    Support for URL for stylesheet in Custom Tool (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-52512](https://issues.jenkins-ci.org/browse/JENKINS-52512)\n    Builds on agent fails when there is no report file even if set\n    to do not fail (nfalco79)\n-   [JENKINS-52400](https://issues.jenkins-ci.org/browse/JENKINS-52400)\n    xUnit miss to add required attributes when converts Valgrind reports\n    (nfalco79)\n\n## Version 2.0.4\n\n#### Improvements\n\n-   Improved GoogleTest, FPCUnit, CppTest XSLT to produce a report more\n    compliant with surefire XSD\n\n#### Bugfixes\n\n-   [JENKINS-52327](https://issues.jenkins-ci.org/browse/JENKINS-52327) java.nio.file.AccessDeniedException\n    on Publish xunit Custom tool test report (nfalco79 to greghoeppner)\n-   [JENKINS-52202](https://issues.jenkins-ci.org/browse/JENKINS-52202)\n    xUnit reports \"All test reports are empty\" in case of parallel steps\n    but reports are not empty (nfalco79)\n-   [JENKINS-52253](https://issues.jenkins-ci.org/browse/JENKINS-52253)\n    xUnit in case of multiple tool type processes only the first one\n    (nfalco79)\n-   [JENKINS-52173](https://issues.jenkins-ci.org/browse/JENKINS-52173)\n    xUnit fails when converting gtester/glib2 input to junit format\n    (nfalco79)\n-   [JENKINS-51604](https://issues.jenkins-ci.org/browse/JENKINS-51604) XPathExeption\n    when parsing QtTestLib Reports when a Test contains multiple\n    Incidents (nfalco79)\n-   [JENKINS-27860](https://issues.jenkins-ci.org/browse/JENKINS-27860) Build\n    does not stop if it is marked as Failure when the opportune option\n    is enabled (nfalco79)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194) xUnit\n    should not consider report generated by other xUnit step (nfalco79)\n-   [JENKINS-52107](https://issues.jenkins-ci.org/browse/JENKINS-52107) Convertion\n    exception for NUnit 2.1 reports because nunit-version attribute not\n    contains only digits (nfalco79)\n-   [JENKINS-41093](https://issues.jenkins-ci.org/browse/JENKINS-41093)\n    For Unittest++ xml, only the first failure of each test case is\n    recognized (nfalco79)\n-   [JENKINS-51767](https://issues.jenkins-ci.org/browse/JENKINS-51767)\n    xUnit 2.x XSD does not validate NUnit 2.x XML report file (nfalco79)\n-   [JENKINS-51797](https://issues.jenkins-ci.org/browse/JENKINS-51797)\n    xUnit.Net v2 parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51798](https://issues.jenkins-ci.org/browse/JENKINS-51798) GoogleTest\n    parse error when time attribute is missing (nfalco79)\n-   [JENKINS-51561](https://issues.jenkins-ci.org/browse/JENKINS-51561)\n    xUnit plugin fails to parse NUnit 2 report format generated by NUnit\n    3.6.0.0 (nfalco79)\n-   [JENKINS-51465](https://issues.jenkins-ci.org/browse/JENKINS-51465)\n    Exception in XSL Transformation cause JEP-200 (nfalco79)\n-   [JENKINS-51481](https://issues.jenkins-ci.org/browse/JENKINS-51481)\n    Parse error occur when NUnit report have categories (nfalco79)\n-   [JENKINS-26227](https://issues.jenkins-ci.org/browse/JENKINS-26227)\n    xUnit plugin doesn't use OS culture when reads time values in\n    [xUnit.net](http://xunit.net/) output (nfalco79)\n-   [JENKINS-12417](https://issues.jenkins-ci.org/browse/JENKINS-12417)\n    xUnit problems with CppTest reports generated with default options\n    (nfalco79)\n-   [JENKINS-28871](https://issues.jenkins-ci.org/browse/JENKINS-28871)\n    CppTest 9.5 report file seems not valid for xUnit when no tests was\n    executed (nfalco79)\n\n## Version 2.0.0\n\n#### Breaking Changes\n\nI have introduce some schemas validation becase the large number of\nissues opened to xUnit plugin. Those issues are caused by custom\nattributes or XML DOM in the report generated by some user/tools report\nlogger also if they declare to produce a valid report file. This cause\nme to spend a lot of time to investigate what is right and what is wrong\nand how to implement the XSL without it goes in error during\ntransformation. \n\n-   **Official supported JUnit schema are [Ant junit](https://github.com/windyroad/JUnit-Schema/blob/master/JUnit.xsd)\n    and [Maven Surefire](http://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd)).**\n\nIn case you are using a non java tools that declares to produce a JUnit\ncompatible report, ensure the report respects one of the widely used\nsupported schemas. If not than select as test type the build step\n\"Custom Tool\" and\nuse [this](https://github.com/jenkinsci/xunit-plugin/blob/master/docs/files/input.xsl)\nXSL as\ndescribed [here](#provide-user-xsl). The XSL is provided AS IS without any support.\n\n-   **NUnit 2.x (2.0 - 2.6) schema validation from official\n    distribution.**\n\nIn case you are using a tools that declares to produce a NUnit 2\ncompatible report, ensure the report respects the official schemas. If\nnot than select as test type the build step \"Custom Tool\" and provide a\nXSL as\ndescribed [here](#provide-user-xsl).\n\n#### Improvements\n\n-   Improved MSTest, MbUnit, AUnit, NUnit, QtTest XSLT to produce a\n    report more compliant with surefire XSD\n-   Change UI rendering of the report tool and clarify the pattern\n    description\n-   [JENKINS-37611](https://issues.jenkins-ci.org/browse/JENKINS-37611)\n    Add support for pipeline using @Symbol annotation to xunit and its\n    parameters (nfalco79)\n\n#### Bugfixes\n\n-   [JENKINS-42715](https://issues.jenkins-ci.org/browse/JENKINS-42715)\n    xUnit does not support PHPUnit 5.x skipped attribute (nfalco79 to\n    ray)\n-   [JENKINS-47194](https://issues.jenkins-ci.org/browse/JENKINS-47194)\n    xUnit should not consider report generated by other xUnit step\n    (nfalco79)\n-   [JENKINS-10911](https://issues.jenkins-ci.org/browse/JENKINS-10911)\n    xUnit not detecting Ignored MSTest and NUnit Tests (nfalco79)\n-   [JENKINS-51347](https://issues.jenkins-ci.org/browse/JENKINS-51347)\n    Test Status \"notrun\" being reported as \"failed\" test (nfalco79)\n-   [JENKINS-13113](https://issues.jenkins-ci.org/browse/JENKINS-13113)\n    xUnit plugins detects MSTEST \"NotExecuted\" as successed instead of\n    skipped (nfalco79)\n\n## Version 1.104\n\n#### Improvements\n\n-   [JENKINS-33450](https://issues.jenkins-ci.org/browse/JENKINS-33450)\n    Support for NUnit3 which uses a different XML format by NUnit2\n    (nfalco79 to alexschwantes)\n\n-   [JENKINS-50658](https://issues.jenkins-ci.org/browse/JENKINS-50658)\n    Fix xsd to be compliant with surefire report and rerun option\n    (nfalco79 to alemorato)\n-   Move plugin to pipeline so that commits and pull request could be\n    checked for test failure\n\n#### Bugfixes\n\n-   [JENKINS-48945](https://issues.jenkins-ci.org/browse/JENKINS-48945)\n    Testreport lacks of those test in which the hashcode of two\n    different testsuite name coincide (nfalco79)\n-   [JENKINS-33385](https://issues.jenkins-ci.org/browse/JENKINS-33385)\n    Testresult doesn't show test name in case the package is empty\n    (nfalco79 to Zenger Alexander)\n\n-   [JENKINS-51056](https://issues.jenkins-ci.org/browse/JENKINS-51056)\n    xUnit throws NPE when no threshold was specified (nfalco79)\n-   [JENKINS-35660](https://issues.jenkins-ci.org/browse/JENKINS-35660)\n    QTestLib time information is lost (nfalco79 to kpop)\n-   [JENKINS-28471](https://issues.jenkins-ci.org/browse/JENKINS-28471)\n    xUnit should compare test results to last build where tests was\n    recorded to calculate correctly thresholds (nfalco79 to Jimilian)\n-   [JENKINS-50378](https://issues.jenkins-ci.org/browse/JENKINS-50378)\n    Skipped count percentage is affected by integer rounding (nfalco79\n    to pauljohnston2009)\n-   [JENKINS-42031](https://issues.jenkins-ci.org/browse/JENKINS-42031)\n    xUnit Plugin Does Not Parse Some Boost 1.63 Test Reports (nfalco79\n    to aschet)\n-   Relax BoostTest code line validation (nfalco79 to penberg)\n-   Ensure testuite time attribute is valid for NUnit\n-   [JENKINS-24382](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin)\n    Add basic support for Unit\n\n## Version 1.100\n\n-   Fix\n    [JENKINS-30812](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    added parsing for gtest errors so that a failure to run a test is\n    considered a test failure\n-   Fix\n    [JENKINS-27240](http://wiki.jenkins-ci.org/display/JENKINS/xUnit+Plugin) -\n    Workflow integration XUnit as a SimpleBuildSte \n (Distance: 1.0227)",
    "rank_1_distance": 1.0227,
    "rank_2_name": "# JUnit Plugin for Jenkins",
    "rank_2_content": "# JUnit Plugin for Jenkins\n\n[![Jenkins Plugin](https://img.shields.io/jenkins/plugin/v/junit.svg)](https://plugins.jenkins.io/junit)\n[![GitHub release](https://img.shields.io/github/release/jenkinsci/junit-plugin.svg?label=release)](https://github.com/jenkinsci/junit-plugin/releases/latest)\n[![Jenkins Plugin Installs](https://img.shields.io/jenkins/plugin/i/junit.svg?color=blue)](https://plugins.jenkins.io/junit)\n\nThe JUnit plugin provides a publisher that consumes XML test reports generated during the builds and provides some graphical visualization of the historical test results \n(see [JUnit graph](https://wiki.jenkins.io/display/JENKINS/JUnit+graph) for a sample) \nas well as a web UI for viewing test reports, tracking failures, and so on. \nJenkins understands the JUnit test report XML format (which is also used by TestNG). \nWhen this option is configured, Jenkins can provide useful information about test results, such as trends.\n\nThe plugin also provides a generic API for other unit-test publisher plugins in Jenkins. This functionality was part of the Jenkins Core until it was split out to this plugin in version in 1.577.\n\n## Configuration\n\nThe JUnit publisher is configured at the job level by adding a Publish JUnit test result report post build action. The configuration parameters include:\n\n* **Test report XMLs:** Specify the path to JUnit XML files in the Ant glob syntax, such as `**/build/test-reports/*.xml`. \n  Be sure not to include any non-report files into this pattern. \n  You can specify multiple patterns of files separated by commas. \n  The base directory of the fileset is the workspace root.\n* **Retain long standard output/error:** If checked, any standard output or error from a test suite will be retained in the test results after the build completes. \n  (This refers only to additional messages printed to console, not to a failure stack trace). \n  Such output is always kept if the test failed, but by default lengthy output from passing tests is truncated to save space. \n  Check this option if you need to see every log message from even passing tests, but beware that Jenkins's memory consumption can substantially increase as a result, even if you never look at the test results!\n* **Health report amplification factor:** The amplification factor to apply to test failures when computing the test result contribution to the build health score. \n  The default factor is 1.0. A factor of 0.0 will disable the test result contribution to build health score, and, as an example, a factor of 0.5 means that 10% of tests failing will score 95% health. \n  The factor is persisted with the build results, so changes will only be reflected in new builds.\n* **Allow empty results:** If checked, the default behavior of failing a build on missing test result files or empty test results is changed to not affect the status of the build. \n  Please note that this setting make it harder to spot misconfigured jobs or build failures where the test tool does not exit with an error code when not producing test report files.\n* **Skip publishing checks:** If this option is unchecked, then the plugin automatically publishes the test results to corresponding SCM hosting platforms.\n  For example, if you are using this feature for a GitHub organization project, the warnings will be published to\n  GitHub through the Checks API. If this operation slows down your build, or you don't want to publish the warnings to\n  SCM platforms, you can use this option to deactivate this feature.\n* **Checks name:** If provided, and publishing checks enabled, the plugin will use this name when publishing\n  results to corresponding SCM hosting platforms. If not, a default of \"Test\" will be used.\n* **Skip marking build unstable:**  If this option is unchecked, then the plugin will mark the build as unstable when it finds at least 1 test failure.\n    If this option is checked, then the build will still be successful even if there are test failures reported.\n    In any case, the corresponding pipeline node (and stage) will be marked as unstable in case of test failure.\n    In order to enable this, set the property: \n    `skipMarkingBuildUnstable` to `true`:\n    \n      junit skipMarkingBuildUnstable: true, testResults: 'test-results.xml'\n      \n### Test result checks (for GitHub projects)\n\n:warning: This feature requires:\n* the installation of an additional plugin: [GitHub Checks Plugin](https://github.com/jenkinsci/github-checks-plugin)\n* the configuration of GitHub App credentails, see [this guide](https://docs.cloudbees.com/docs/cloudbees-ci/latest/cloud-admin-guide/github-app-auth) for more details.\n\nIf not disabled in the job configuration, this plugin will publish test results to GitHub through [GitHub checks API](https://docs.github.com/en/rest/reference/checks).\n\nIn the *Details* view of each check ([example](https://github.com/timja-org/junit-attachments-test/pull/4/checks?check_run_id=1237630805)), test results will be displayed.\n\n![checks](images/checks.png)\n\nIn order to disable the checks feature, set the property `skipPublishingChecks` to `true`:\n```groovy\njunit skipPublishingChecks: true, testResults: 'test-results.xml'\n```\n\nThe plugin will default to using the stage name or branch of a parallel step prepended by `Tests` for the checks name.\nIf there are no enclosing stages or branches, `Tests` will be used. The name can also be overridden by a `withChecks` step.\n\nThe following snippet would publish three checks with the names `Tests / Integration`, `Tests` and `Integration Tests`, respectively.\n\n```groovy\nstage('Integration') {\n  junit 'test-results.xml'\n}\n\njunit 'more-test-results.xml'\n\nstage('Ignored') {\n  withChecks('Integration Tests') {\n    junit 'yet-more-test-results.xml'\n  }\n}\n```\n\n## Contributing\n\nRefer to our [contribution guidelines](https://github.com/jenkinsci/.github/blob/master/CONTRIBUTING.md) \n (Distance: 1.0300)",
    "rank_2_distance": 1.03,
    "rank_3_name": "This project hosts a sample project that runs Selenium as an unit test.",
    "rank_3_content": "This project hosts a sample project that runs Selenium as an unit test.\n\nIt works with junit-attachment plugin as well. \n (Distance: 1.0360)",
    "rank_3_distance": 1.036
  },
  {
    "step": "{'name': 'archiveArtifacts', 'raw_args': {'artifacts': 'build/**, **/target/work/data/.metadata/.log'}}",
    "rank_1_name": "# Periodic Backup extension implementation tutorial",
    "rank_1_content": "# Periodic Backup extension implementation tutorial\n\n\n\nThis tutorial was written to show how to implement an extension points to the Periodic Backup plugin.\n\n### Extension points\n\n\n\nThe Periodic Backup plugin provides three extension points to allow developers to easily add features.\n\nThe extension points are:\n\n\n\n*   Storage: how to store/restore the files\n\n*   Location: where to store/restore the files to/from\n\n*   FileManager: which files to store/restore\n\n\n\nA new Storage implementation (TarGzStorage) will be created.\n\nEvery Storage implementation extends the abstract Storage class.\n\n\n\n### How to define the descriptor:\n\n\n\n\n\n    @Extension\n\n    public static class DescriptorImpl extends StorageDescriptor {\n\n        public String getDisplayName() {\n\n            return \"TarGzStorage\";\n\n        }\n\n\n\n        @Override\n\n        public String getArchiveFileExtension() {\n\n            return \"tar.gz\";\n\n        }\n\n    }\n\n\n\nWhere:\n\n\n\n*   getDisplayName ‚Äì the name of the Storage we will see in the Storage configuration.\n\n*   getArchiveFileExtension ‚Äì extension of the archive file.\n\n\n\n### Storage methods\n\n\n\nThe org.codehaus.plexus.archiver library will be used. The backupStart method initializes the archiving:\n\n\n\n\n\n    @Override\n\n    public void backupStart(String tempDirectoryPath, String archiveFilenameBase) throws PeriodicBackupException {\n\n        // Create a new archiver\n\n        archiver = new TarArchiver();\n\n        // Set the destination file\n\n        File destination = new File(new File(tempDirectoryPath), Util.createFileName(archiveFilenameBase, this.getDescriptor().getArchiveFileExtension()));\n\n        archiver.setDestFile(destination);\n\n\n\n        // Support long filenames\n\n        archiver.setLongfile(TarLongFileMode.gnu);\n\n        // Set the compression method\n\n        archiver.setCompression(TarArchiver.TarCompressionMethod.gzip);\n\n    }\n\n\n\nThe backupAddFile method will add the files to the archive and backupStop will finalize the backup.\n\n\n\n\n\n    @Override\n\n    public void backupAddFile(File fileToStore) throws PeriodicBackupException {\n\n        try {\n\n            archiver.addFile(fileToStore, Util.getRelativePath(fileToStore, Hudson.getInstance().getRootDir()));\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not add file to the archive. \" + e.getMessage());\n\n        }\n\n    }\n\n\n\n    @Override\n\n    public Iterable backupStop() throws PeriodicBackupException {\n\n        try {\n\n            archiver.createArchive();\n\n        } catch (ArchiverException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        } catch (IOException e) {\n\n            LOGGER.warning(\"Could not create archive \" + archiver.getDestFile() + \" \" + e.getMessage());\n\n        }\n\n        return Lists.newArrayList(archiver.getDestFile());\n\n    }\n\n\n\n### Constructor\n\n\n\nThe DataBoundConstructor annotation is needed as for normal Jenkins plugins:\n\n\n\n\n\n    @DataBoundConstructor\n\n    public TarGzStorage() {\n\n        super();\n\n    }\n\n\n\n### Restoring\n\n\n\nThe basic backup functionality is now ready. Now the restoring needs to be implemented.\n\n\n\n\n\n    @Override\n\n    public void unarchiveFiles(Iterable archives, File tempDir) {\n\n        // Setting up unArchiver\n\n        TarGZipUnArchiver unArchiver = new TarGZipUnArchiver();\n\n        unArchiver.setDestDirectory(tempDir);\n\n\n\n        // Extracting each archive to the temporary directory\n\n        for(File archive : archives) {\n\n            unArchiver.setSourceFile(archive);\n\n            LOGGER.info(\"Extracting files from \" + archive.getAbsolutePath() + \" to \" + tempDir.getAbsolutePath());\n\n            try {\n\n                unArchiver.extract();\n\n            } catch (ArchiverException e) {\n\n                LOGGER.warning(\"Could not extract from \" + archive.getAbsolutePath() + e.getMessage());\n\n            }\n\n\n\n            // Deleting the archive file\n\n            LOGGER.info(\"Deleting \" + archive.getAbsolutePath());\n\n            if(!archive.delete()) {\n\n                LOGGER.warning(\"Could not delete \" + archive.getAbsolutePath());\n\n            }\n\n        }\n\n    }\n\n\n\n### Equals & hashCode\n\n\n\nThe equals and hashCode methods need to be implemented since the objects will be compared.\n\n\n\n\n\n    @Override\n\n    public boolean equals(Object o) {\n\n        return o instanceof ZipStorage;\n\n    }\n\n\n\n    @Override\n\n    public int hashCode() {\n\n        return 93;\n\n    }\n\n\n\nNow the TarGzStorage class is ready.\n\n\n\n### Update notes for 2.0\n\n\n\nLogging configurations for the logger \"UnArchiver\" should be updated to use the package \"org.codehaus.plexus.archiver\" \n (Distance: 1.0821)",
    "rank_1_distance": 1.0821,
    "rank_2_name": "# Commons Compress API Plugin",
    "rank_2_content": "# Commons Compress API Plugin\n\nThis plugin provides the [Commons Compress](https://commons.apache.org/proper/commons-compress/) library for other plugins. \n (Distance: 1.2385)",
    "rank_2_distance": 1.2385,
    "rank_3_name": "ArchiveFileSCM",
    "rank_3_content": "ArchiveFileSCM\n===============\nArchiveFilesSCM plugin for Jenkins checkouts archive files and extracts to Jenkins job workspace\n\nPlugin\n\n- checkouts archive file only when last modified date(last-modified header returned when connecting to a URL) changes from last checkout date\n\n- supports pooling using the same above logic\n \n- supports extraction of zip,tar,gz,jar,war,ear files\n\n- detects type of archive file based on file name (i.e URL must end with zip,tar,tar.gz,jar,war,ear)\n\n- supports basic authentication\n\n- supports connection through proxy\n\n- supports running on slave\n\n- supports http:// and file:// protocols e.g - URL can be\n                                             \n* * http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-3.0.4-bin.tar.gz\n\n* * file:///C:/Arjun/felix.jar (On Windows)\n\n* * file:///home/arjun/felix.jar (On Unix/Linux)\n\nNote: If the type is unknown the plugin will simply copy the file to workspace \n (Distance: 1.3595)",
    "rank_3_distance": 1.3595
  },
  {
    "step": "{'name': 'script', 'raw_args': 'if (params.TRIGGER_DOWNSTREAM_BUILD==true) {\\n          DOWNSTREAM_JOBS.split(\\',\\').each {\\n            def downstreamUrl = new URL(\"${env.JENKINS_URL}/job/$it/job/${env.BRANCH_NAME}\")\\n            def boolean downstreamJobExists = sh(script: \"curl -L -s -o /dev/null -I -w \\'%{http_code}\\' ${downstreamUrl}\", returnStdout: true) == \"200\"\\n            if (downstreamJobExists) {\\n              build job: \"$it/${env.BRANCH_NAME}\", wait: false, parameters: [booleanParam(name: \\'TRIGGER_DOWNSTREAM_BUILD\\', value: \"${params.TRIGGER_DOWNSTREAM_BUILD}\"), string(name: \\'JDK_VERSION\\', value: \"${params.JDK_VERSION}\")]\\n            }\\n          }\\n        }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'script', 'raw_args': 'def curResult = currentBuild.currentResult\\n        def lastResult = \\'NEW\\'\\n        if (currentBuild.previousBuild != null) {\\n          lastResult = currentBuild.previousBuild.result\\n        }\\n\\n        if (curResult != \\'SUCCESS\\' || lastResult != \\'SUCCESS\\') {\\n          def color = \\'\\'\\n          switch (curResult) {\\n            case \\'SUCCESS\\':\\n              color = \\'#00FF00\\'\\n              break\\n            case \\'UNSTABLE\\':\\n              color = \\'#FFFF00\\'\\n              break\\n            case \\'FAILURE\\':\\n              color = \\'#FF0000\\'\\n              break\\n            default: \\n              color = \\'#666666\\'\\n          }\\n\\n          slackSend (\\n            message: \"${lastResult} => ${curResult}: <${env.BUILD_URL}|${env.JOB_NAME}#${env.BUILD_NUMBER}>\",\\n            botUser: true,\\n            channel: \\'xtext-builds\\',\\n            color: \"${color}\"\\n          )\\n        }'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'content': 'checkout scm'}",
    "rank_1_name": "# SCM-Manager Plugin",
    "rank_1_content": "# SCM-Manager Plugin\n[![Build Status](https://ci.jenkins.io/buildStatus/icon?job=Plugins%2Fscm-manager-plugin%2Fmaster)](https://ci.jenkins.io/job/Plugins/job/scm-manager-plugin/job/master/)\n[![License](https://img.shields.io/github/license/jenkinsci/github-plugin.svg)](LICENSE)\n\nJenkins [SCM-Manager 2](https://www.scm-manager.org/) Plugin\n\n## Description\n\nThis plugin gives various ways to connect your SCM-Manager with Jenkins, like sending build status, multibranch\npipelines, folders for complete namespaces and navigation items.\n\n### Build Status\nOnce the plugin is installed, it will automatically detect jobs which have configured scm that points to an instance\nof SCM-Manager v2. If such a build job starts, the plugin will send the `PENDING` state for the checkout revision to\nSCM-Manager. After the build is complete the plugin will send the resulting state to SCM-Manager (`SUCCESS`, `UNSTABLE`\nor `FAILURE`).\n\n### Multibranch Pipelines\nFor multibranch pipelines there is a new branch source named \"SCM-Manager\", so you can create pipelines in Jenkins that\ncan find branches, tags and pull requests in SCM-Manager hosted repositories on their own. In cooperation with the\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) in SCM-Manager the Jenkins ci server will receive hooks on\nevery change and trigger new builds.\nTo remove stale jobs like for no longer available repositories, you can manually execute \"Scan Namespace Now\".\n\nTo create such a pipeline, select \"New Item\" on the Jenkins top level page, then enter a name and select \"Multibranch\nPipeline\".\n\n![](docs/de/assets/select-multibranch-pipeline.png)\n\nIn the configuration form for this item, select the matching \"SCM-Manager\" entry for your repository type in the \"Add\nsource\" dropdown in the section \"Branch Sources\".\n\n![](docs/de/assets/config-multibranch-pipeline-source.png)\n\nIn the new configuration enter the base URL of your SCM-Manager instance and select according credentials. This\nplugin will then load a list of all available repositories you can select from.\n\n![](docs/de/assets/config-multibranch-pipeline.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a SCM-Manager Mercurial or Git repository with the Jenkins JobDSL the following syntax can be used:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManager {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n    }\n  }\n}\n```\n\nThe parameters `discoverBranches`, `discoverPullRequest` und `discoverTags` are optional \nand describe which heads of the repository are build.\nThe example shows the default values.\n\nFor a Subversion repository have a look at the following example:\n\n```groovy\nmultibranchPipelineJob('heart-of-gold') {\n  branchSources {\n    scmManagerSvn {\n      id('spaceships/heart-of-gold')\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      repository('spaceships/heart-of-gold')\n      includes(\"trunk,branches/*,tags/*,sandbox/*\")\n      excludes(\"\")\n    }\n  }\n}\n```\nThe parameters for `includes` und `excludes` are optional and describe which directories of the repository are build.\nThe example shows the default values.\n\n### Namespaces\nIf you want to have build jobs for every repository in a namespace, you can create \"SCM-Manager namespace\" jobs. These\nwill scan all repositories in the given namespace and create multibranch pipelines for each repository where a\n`Jenkinsfile` can be found. If a new repository is created in this namespace, a new pipeline will be created\nautomatically.\n\nTo create such a folder for a complete namespace, select \"New Item\" on the Jenkins top level page, then enter a name\nand select \"SCM-Manager Namespace\".\n\n![](docs/de/assets/select-namespace-item.png)\n\nIn the configuration form for this item, enter the base URL of your SCM-Manager instance and select according\ncredentials. This plugin will then load a list of all available namespaces you can select from.\n\nAs an alternative to a concrete namespace you can select <code>--all--</code> if you want to create build jobs for\nall repositories of the whole SCM-Manager instance. Please note, that in this case the folders for the jobs will be\nnamed with the pattern *namespace/name*.\n\n![](docs/de/assets/config-namespace-item.png)\n\nFinally you can select behaviours where you can choose for example, whether branches, tags or pull requests shall be\nbuild.\n\n#### JobDSL\n\nIn order to create a build job for an SCM-Manager namespace with the job dsl, have a look at the following example:\n\n```groovy\norganizationFolder(\"spaceships\") {\n  organizations {\n    scmManagerNamespace {\n      serverUrl('https://scm.hitchhiker.com')\n      credentialsId('my-secret-id')\n      namespace(\"spaceships\")\n      discoverBranches(true)\n      discoverPullRequest(true)\n      discoverTags(false)\n      discoverSvn {\n        includes(\"trunk,branches/*,tags/*,sandbox/*\")\n        excludes(\"\")\n      }\n    }\n  }\n}\n// scan namespace directly after creation\nqueue(\"spaceships\")\n```\n\nThe `discover*` parameters are optional, the example above shows the default values. \nTo disable subversion builds, a `false` can be passed to the `discoverSvn` method e.g.: `discoverSvn(false)`.\nTo build all namespaces of the SCM-Manager instance, the pseudo namespace `--all--` can be used.\n\n### Navigation\nIn different pages of Jenkins you can find links to the corresponding SCM-Manager page:\n\n- In multibranch pipelines you can find the link \"SCM-Manager\" in the main navigation on the left. This leads you\n  directly to the main page of the repository in SCM-Manager.\n- In a job for a concrete branch or a tag the link \"SCM-Manager\" in the main navigation on the left will get you\n  directly to the sources in SCM-Manager for this branch or tag.\n- In a job for a pull request the link \"SCM-Manager\" in the main navigation on the left will navigate to the pull\n  request in SCM-Manager.\n- From the page for a build result the link \"SCM-Manager\" in the main navigation on the left leads to the sources\n  view in SCM-Manager for the concrete revision that has been build.\n- In the \"Changes\" view there are links that lead to the details of a change showing the authors, the commit message\n  and the diff for the commit.\n\n## Requirements\n\nFor full functionality, this plugin requires SCM-Manager v2 with an installed\n[jenkins plugin](https://www.scm-manager.org/plugins/scm-jenkins-plugin/) for the triggers and the\n[CI plugin](https://www.scm-manager.org/plugins/scm-ci-plugin/) to show the build results inside SCM-Manager. To create\nssh connection between Jenkins and SCM-Manager you can use the\n[SSH plugin](https://www.scm-manager.org/plugins/scm-ssh-plugin/).\n\n## Build\n\nTo build the plugin just run the maven package phase.\n\n```bash\nmvn package\n```\n\n## Development \n\nStart the local Jenkins instance:\n\n```bash\nmvn hpi:run\n``` \n (Distance: 1.1469)",
    "rank_1_distance": 1.1469,
    "rank_2_name": "# Pre-SCM Build Step",
    "rank_2_content": "# Pre-SCM Build Step\n\nThis plugin allows build steps to run before SCM checkout so that build steps can be performed in the workspace before SCM checkout.\nBuild steps can perform cleanup, add SCM configuration files, etc.\nThey can call other scripts that need to be run before SCM checkout.\n\n## Configuration example\n\n![](docs/images/pre_scm_buildstep_config.png)\n\nThis plugin was originally written to provide a build step point where a perl script could be run after detecting changes in the polling but before the SCM checkout.\nTo make it more usable and flexible it was decided to allow any number of build steps to be added.\n\n## Warnings on the use of this plugin\n\nBe Careful\n\n- The SCM may modify or remove any files that are in the workspace before the main build steps.\n  See [JENKINS-22795](https://issues.jenkins.io/browse/JENKINS-22795) for an example with the git plugin\n- Enviroment variables may not exist at this point if they are defined by other plugins.\n  Check using a shell script and the env (unix) or equivalent for your executor system\n\n### Warning\n\n- IMPORTANT: Failed pre-SCM build steps will not cause the job to fail at this point and all build steps will be called regardless of the result.\n\n## History\n\nChangelogs are on [GitHub releases](https://github.com/jenkinsci/pre-scm-buildstep-plugin/releases). \n (Distance: 1.1930)",
    "rank_2_distance": 1.193,
    "rank_3_name": "# Jenkins SCM API Plugin",
    "rank_3_content": "# Jenkins SCM API Plugin\n\n This plugin provides a new enhanced API for interacting with SCM systems.\n\n If you are writing a plugin that implements this API, please see [the implementation guide](docs/implementation.adoc)\n\n If you are writing a plugin that consumes this API, please see [the consumer guide](docs/consumer.adoc)\n\n# Build\n\nTo build the plugin locally:\n\n    mvn clean verify\n\n# Test local instance\n\nTo test in a local Jenkins instance\n\n    mvn hpi:run \n (Distance: 1.2098)",
    "rank_3_distance": 1.2098
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.displayName = String.format(\"#%s(JDK%s,Eclipse%s)\", BUILD_NUMBER, javaVersion(), eclipseVersion())'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  },
  {
    "step": "{'name': 'wrap', 'raw_args': \"[$class: 'Xvnc', takeScreenshot: false, useXauthority: true]\", 'raw_block': 'sh \"\"\"\\n              export MAVEN_OPTS=-Xmx1500m\\n              ./tycho-test.sh -s /home/jenkins/.m2/settings.xml --tp=${selectedTargetPlatform()} --local-repository=/home/jenkins/.m2/repository\\n            \"\"\"'}",
    "rank_1_name": "# Icedq",
    "rank_1_content": "# Icedq\nMy Plugin \n (Distance: 1.4287)",
    "rank_1_distance": 1.4287,
    "rank_2_name": "Test",
    "rank_2_content": "Test \n (Distance: 1.4981)",
    "rank_2_distance": 1.4981,
    "rank_3_name": "# label-test",
    "rank_3_content": "# label-test \n (Distance: 1.5281)",
    "rank_3_distance": 1.5281
  },
  {
    "step": "{'name': 'script', 'raw_args': 'currentBuild.displayName = \"PR ${env.CHANGE_ID}: ${env.CHANGE_TITLE}\"'}",
    "rank_1_name": "# jenkins-scripts",
    "rank_1_content": "# jenkins-scripts\n\nThis is a collection of utility scripts for use with\n[Jenkins](http://jenkins-ci.org), the leading continuous integration\nserver.\n\nThey can cover a range of use cases - automating Jenkins management,\nend-user tools, etc. They're organized by function \n\n- [Scriptler](https://wiki.jenkins-ci.org/display/JENKINS/Scriptler+Plugin)\nscripts, for use in the Jenkins Plugin, are in the \"scriptler\"\ndirectory and should follow the convention as described in [scriptler README.md](scriptler/README.md)\n- and other scripts are in the \"managed-scripts\" directory,\nand then organized by scripting language. \n (Distance: 1.1995)",
    "rank_1_distance": 1.1995,
    "rank_2_name": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver",
    "rank_2_content": "Run the auto actions from \"flat lines\" scripts based on Selenium WebDriver \n (Distance: 1.2440)",
    "rank_2_distance": 1.244,
    "rank_3_name": "# Scriptler Plugin for Jenkins",
    "rank_3_content": "# Scriptler Plugin for Jenkins\n\nScriptler allows you to store/edit groovy scripts and execute it on any\nof the agents/nodes... no need to copy/paste groovy code anymore.\n\nBesides administering your scripts, Scriptler also provides a way to\nshare scripts between users via hosted script catalogs on the\ninternet.  \nOn GitHub at\n<https://github.com/jenkinsci/jenkins-scripts/tree/main/scriptler> you\nare not only able to find scripts and import it via scriptler in to your\nJenkins instance, but can also share your own scripts. Just send a pull\nrequest to <https://github.com/jenkinsci/jenkins-scripts/> and your\nscripts will be available for everyone else too.\n\n# Description\n\nThis plugin takes the idea of the script console one step further and\nallows you to ease your daily work with the Jenkins script console.\n\n-   save/edit groovy scripts\n-   select the node to execute the script on\n-   download scripts from a shared catalog\n-   scripts repo is exposed via git, push/pull scripts into scriptler\n\nScriptler adds a new link to the manage Jenkins page:\n\n![](docs/images/screen-capture-1.gif)\n\nFrom within the Scriptlers view, you can create (\"Add a new Script\") or\nimport scripts via the \"Remote script catalog\".\n\n![](docs/images/screen-capture-10.jpg)\n\n## Catalogs\n\nImport a script from a public catalog:\n\n![](docs/images/screen-capture-8.jpg)\n\n## Edit\n\nThe editor is syntax highlighted and allows you to define parameters\nwhich have to be passed to the script...\n\n![](docs/images/screen-capture-11.jpg)  \nOnce you have created/imported some scripts, you run it right from the\nsame screen, just click on the little terminal icon on the scripts list.\n\nYou'll get forwarded to a page where you can select the node the script\nshould run on and can can even modify the script just before execution.\nThese modifications will not touch the saved version of the script and\nare only active for you and only as long till you change to another\nscript.\n\nAfter execution, the output of the command will appear in the below part\nof the screen.\n\n## Builder\n\nSince version 2.2, Scriptler also provides a builder, with this support\none is able to integrate its admins scripts in any job. The dropdown\nwill provide all scripts which have been marked to be allowed with\n'RunScript' permission.\n\n**To be able to configure a Scriptler Builder, the user has to be\nadministrator or have 'RunScript' permission!** All changes made by a\nuser not having these permissions will get lost. The 'Value' also\nsupports parameter expansion and expansion by the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) .\n\n![](docs/images/scriptler-builder.jpg)\n\n## Settings\n\nYou are able to configure whether you want to allow users which have\nonly the \"RunScripts\" permission to execute scripts (every script has to\nbe allowed separately). In addition you can also configure if these\nusers should be able to change a script (which would be a security\nissue).  \n![](docs/images/screen-capture-9.jpg)\n\n## Git\n\nScriptler exposes its scripts via git. Browse to\n`JENKINS_URL/scriptler.git` on your installation to get more info about\nhow to access the repo via git.\n\nThis allows an administrator to push/pull scripts from its\nworkstation/IDE into Scriptler. If such a script is pushed the first\ntime into scriptler, then it will parse the optional header info like\nthis:\n\n**optional script header**\n\n``` groovy\n/*** BEGIN META {\n  \"name\" : \"Clear build queue\",\n  \"comment\" : \"If you accidently trigger a lot of unneeded builds, it is useful to be able to <b>cancel</b> them all\",\n  \"parameters\" : [],\n  \"core\": \"1.300\",\n  \"authors\" : [\n    { name : \"Niels Harremoes\" }\n  ]\n} END META**/\nprintln(\"hello world\")\n```\n\n## TokenMacro Support\n\nScriptler supports the [Token Macro\nPlugin](https://wiki.jenkins.io/display/JENKINS/Token+Macro+Plugin) in\ntwo ways\n\n1.  as a consumer, scriptler accepts tokens in the passed arguments\n    (only if the script is executed as a buildstep)\n2.  as a producer, scriptler exposes all scripts marked as non admin\n    scripts via a macro:  \n    - the value returned by the script is the value returned by the\n    TokenMacro, it is NOT enough to write something to the console/log  \n    - scriptler exposes the current '*build'* to the script executed\n    (since 1.7)\n\n**macro**\n\n``` \n${SCRIPTLER, scriptId=\"superscript.groovy\"}\n```\n\n**superscript.groovy**\n\n``` groovy\ndef d = new Date()\nreturn \"TODAY is: ${d.toString()} - build number is: ${build.number}\"\n```\n\n## REST\n\nsince version 1.7, one can also run a script using GET or POST to the\nURL */scriptler/run/\\<your-script-id\\>* with the optional\nparameters node, script (alternative script text), contentType, and the\nparameters defined for your stored script.\n\ne.g.\n\n*<http://myserver/jenkins/scriptler/run/>\\<yourScriptId\\>?param1=value1*\n\n# Help and Support\n\n[View issues in\nJira](http://issues.jenkins-ci.org/secure/IssueNavigator.jspa?reset=true&jqlQuery=project%20=%20JENKINS%20AND%20status%20in%20%28Open,%20%22In%20Progress%22,%20Reopened%29%20AND%20component%20=%20%27scriptler-plugin%27&src=confmacro)\n\nFor Help and support please use the [Jenkins\nUsers](http://jenkins-ci.org/content/mailing-lists) mailing list. \n (Distance: 1.3184)",
    "rank_3_distance": 1.3184
  }
]